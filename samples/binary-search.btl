//# exit = 0
//# stdout = binary_search(vals, 11, 0) = -1
//# stdout = binary_search(vals, 11, 1) = 0
//# stdout = binary_search(vals, 11, 2) = 5
//# stdout = binary_search(vals, 11, 3) = 10
//# stdout = binary_search(vals, 11, 4) = -12

func printf(fmt: *Char, ...);

func binary_search(xs: *Int, n: Int, key: Int): Int {
    var lo = 0;
    var hi = n;
    while (lo < hi) {
        var mid = (hi - lo) / 2 + lo;
        if (xs[mid] < key) {
            lo = mid + 1;
        } else if (xs[mid] > key) {
            hi = mid;
        } else {
            return mid;
        }
    }
    return -lo - 1;
}

func main(): Int32 {
    var vals = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10];
    const N_VALS = sizeof(typeof(vals)) / sizeof(Int);

    var keys = [-1, 0, 5, 10, 11];
    const N_KEYS = sizeof(typeof(keys)) / sizeof(Int);

    for (var i = 0; i < N_KEYS; i += 1) {
        var key = keys[i];
        var idx = binary_search(&vals[0], N_VALS, key);
        printf("binary_search(vals, %d, %d) = %d\n", N_VALS, i, idx);
    }
    return 0;
}
