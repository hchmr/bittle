//# stdout = Sum: 110
// This example uses a top-down declaration style to test
// the compiler's ability to resolve forward references.

func main(): Int32 {
    var leaf1: Tree = Leaf { value: 11 };
    var leaf2: Tree = Leaf { value: 22 };
    var leaf3: Tree = Leaf { value: 33 };
    var leaf4: Tree = Leaf { value: 44 };
    var branch1: Tree = Branch {
        left: &leaf1,
        right: &leaf2,
    };
    var branch2: Tree = Branch {
        left: &leaf3,
        right: &leaf4,
    };
    var root: Tree = Branch {
        left: &branch1,
        right: &branch2,
    };

    printf("Sum: %d\n", sum(&root));
    return 0;
}

func sum(tree: *Tree): Int {
    match (tree.kind) {
        case Tree_Leaf: {
            return tree.as_leaf.value;
        }
        case Tree_Branch: {
            return sum(tree.as_branch.left) + sum(tree.as_branch.right);
        }
        case _: {
            return 0;
        }
    }
}

enum TreeKind {
    Tree_Leaf,
    Tree_Branch,
}

struct TreeBase {
    kind: TreeKind,
}

struct Leaf: TreeBase {
    kind = Tree_Leaf,
    value: Int,
}

struct Branch: TreeBase {
    kind = Tree_Branch,
    left: *Tree,
    right: *Tree,
}

union Tree: TreeBase {
    as_leaf: Leaf,
    as_branch: Branch,
}

func printf(fmt: *Char, ...): Int32;
