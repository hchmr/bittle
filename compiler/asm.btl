include "bittle.btls";

enum AsmOperandKind {
    AsmOperand_Reg,
    AsmOperand_Mem,
    AsmOperand_Int,
    AsmOperand_Label,
    AsmOperand_Global,
    AsmOperand_FpFromFrameStart,
    AsmOperand_SpFromFp,
    AsmOperand_Raw,
}

struct AsmOperand {
    kind: AsmOperandKind,
}

// e.g. x0
struct AsmRegOperand : AsmOperand {
    width: Int,
    reg: Reg,
    shift: Int,
}

// e.g. [x0]
// e.g. [x0, #42]
struct AsmMemOperand : AsmOperand {
    n_args: Int,
    args: **AsmOperand,
}

// e.g. #42
// e.g. #1, lsl 16
struct AsmIntOperand : AsmOperand {
    value: Int,
    shift: Int,
}

// e.g. .L0
struct AsmLabelOperand : AsmOperand {
    counter: Int, // Only used for auto-generated labels
    suffix: *Char,
}

// e.g. :got:my_global
// e.g. str3
struct AsmGlobalOperand : AsmOperand {
    relocation_spec: *Char, // :lo12, :got, :got_lo12
    prefix: *Char,
    counter: Int, // Only used for strings
}

struct AsmFpFromFrameStartOperand : AsmOperand {
    offset: Int,
}

struct AsmSpFromFpOperand : AsmOperand {
    fp_offset: Int,
}

struct AsmRawOperand : AsmOperand {
    op: *Char,
}

struct AsmInstr {
    op: *Char,
    n_args: Int,
    args: **AsmOperand,
    comment: *Char,
}

struct AsmInstrBuilder {
    instrs: *List,
}

func reg_width_from_size(size: Int): Int {
    return size < 8 ? 4 : 8;
}

func asm_mk_reg_operand(width: Int, reg: Reg, shift: Int): *AsmRegOperand {
    var operand: *AsmRegOperand = calloc(1, sizeof(AsmRegOperand));
    *operand = AsmRegOperand {
        kind: AsmOperand_Reg,
        width: width,
        reg: reg,
        shift: shift,
    };
    return operand;
}

func asm_mk_int_operand(value: Int): *AsmIntOperand {
    var operand: *AsmIntOperand = calloc(1, sizeof(AsmIntOperand));
    *operand = AsmIntOperand {
        kind: AsmOperand_Int,
        value: value,
        shift: 0,
    };
    return operand;
}

func asm_mk_label_operand(counter: Int, suffix: *Char): *AsmLabelOperand {
    var operand: *AsmLabelOperand = calloc(1, sizeof(AsmLabelOperand));
    *operand = AsmLabelOperand {
        kind: AsmOperand_Label,
        counter: counter,
        suffix: suffix,
    };
    return operand;
}

func asm_mk_global_operand(relocation_spec: *Char, prefix: *Char, suffix: Int): *AsmGlobalOperand {
    var operand: *AsmGlobalOperand = calloc(1, sizeof(AsmGlobalOperand));
    *operand = AsmGlobalOperand {
        kind: AsmOperand_Global,
        relocation_spec: relocation_spec,
        prefix: prefix,
        counter: suffix,
    };
    return operand;
}

func asm_mk_fp_from_frame_start_operand(offset: Int): *AsmFpFromFrameStartOperand {
    var operand: *AsmFpFromFrameStartOperand = calloc(1, sizeof(AsmFpFromFrameStartOperand));
    *operand = AsmFpFromFrameStartOperand {
        kind: AsmOperand_FpFromFrameStart,
        offset: offset,
    };
    return operand;
}

func asm_mk_sp_from_fp_operand(fp_offset: Int): *AsmSpFromFpOperand {
    var operand: *AsmSpFromFpOperand = calloc(1, sizeof(AsmSpFromFpOperand));
    *operand = AsmSpFromFpOperand {
        kind: AsmOperand_SpFromFp,
        fp_offset: fp_offset,
    };
    return operand;
}

func asm_mk_raw_operand(op: *Char): *AsmRawOperand {
    var operand: *AsmRawOperand = calloc(1, sizeof(AsmRawOperand));
    *operand = AsmRawOperand {
        kind: AsmOperand_Raw,
        op: op,
    };
    return operand;
}

func asm_mk_mem_operand(n_args: Int): *AsmMemOperand {
    var operand: *AsmMemOperand = calloc(1, sizeof(AsmMemOperand));
    *operand = AsmMemOperand {
        kind: AsmOperand_Mem,
        n_args: n_args,
        args: calloc(n_args, sizeof(*AsmOperand)),
    };
    return operand;
}

func asm_mk_reg_mem_operand(reg: Reg, offset: Int): *AsmMemOperand {
    var operand = asm_mk_mem_operand(offset != 0 ? 2 : 1);
    operand.args[0] = asm_mk_reg_operand(8, reg, shift: 0);
    if (offset != 0) {
        operand.args[1] = asm_mk_int_operand(offset);
    }
    return operand;
}

func asm_mk_fp_from_frame_start_mem_operand(offset: Int): *AsmMemOperand {
    var operand = asm_mk_mem_operand(2);
    operand.args[0] = asm_mk_reg_operand(8, FP, shift: 0);
    operand.args[1] = asm_mk_fp_from_frame_start_operand(offset);
    return operand;
}

func asm_mk_sp_from_fp_mem_operand(fp_offset: Int): *AsmMemOperand {
    var operand = asm_mk_mem_operand(2);
    operand.args[0] = asm_mk_reg_operand(8, SP, shift: 0);
    operand.args[1] = asm_mk_sp_from_fp_operand(fp_offset);
    return operand;
}

func asm_mk_instr(op: *Char, n_args: Int): *AsmInstr {
    var instr: *AsmInstr = calloc(1, sizeof(AsmInstr));
    *instr = AsmInstr {
        op: op,
        n_args: n_args,
        args: calloc(n_args, sizeof(*AsmOperand)),
        comment: null,
    };
    return instr;
}

//==============================================================================
//== Instruction building

func asm_builder_new(): *AsmInstrBuilder {
    var builder: *AsmInstrBuilder = calloc(1, sizeof(AsmInstrBuilder));
    *builder = AsmInstrBuilder {
        instrs: list_new(),
    };
    return builder;
}

func asm_write_instr(builder: *AsmInstrBuilder, op: *Char, n_args: Int): *AsmInstr {
    var instr = asm_mk_instr(op, n_args);
    list_push(builder.instrs, instr);
    return instr;
}

// Data Movement

func asm_get_load_op(width: Int): *Char {
    return
        width == 1 ? "ldrsb" :
        width == 2 ? "ldrsh" :
        width == 4 ? "ldrsw" :
        "ldr";
}

func asm_get_store_op(width: Int): *Char {
    return
        width == 1 ? "strb" :
        width == 2 ? "strh" :
        "str";
}

func asm_write_mov_r(builder: *AsmInstrBuilder, width: Int, xd: Reg, x1: Reg) {
    var instr = asm_write_instr(builder, "mov", n_args: 2);
    instr.args[0] = asm_mk_reg_operand(width, xd, shift: 0);
    instr.args[1] = asm_mk_reg_operand(width, x1, shift: 0);
}

func asm_write_mov_i(builder: *AsmInstrBuilder, width: Int, xd: Reg, value: Int) {
    if (value == 0) {
        var instr = asm_write_instr(builder, "mov", n_args: 2);
        instr.args[0] = asm_mk_reg_operand(width, xd, shift: 0);
        instr.args[1] = asm_mk_int_operand(0);
        return;
    }

    var MASK_16 = (1 << 16) - 1;

    var n_gen = 0;
    for (var i = 0; i < 4; i += 1) {
        var lo16 = value & MASK_16;

        if (lo16 != 0 || i == 3 && n_gen == 0) {
            var op = n_gen == 0 ? "movz" : "movk";

            var instr = asm_write_instr(builder, op, n_args: 2);
            instr.args[0] = asm_mk_reg_operand(8, xd, shift: 0);
            instr.args[1] = asm_mk_int_operand(lo16);
            (instr.args[1] as *AsmIntOperand).shift = i * 16;

            n_gen += 1;
        }

        value >>= 16;
    }

    assert(n_gen > 0, "asm_write_mov_i: should generate at least one instruction.");
}

func asm_write_ldrs(builder: *AsmInstrBuilder, width: Int, dst: *AsmOperand, src: *AsmOperand) {
    var op = asm_get_load_op(width);
    var instr = asm_write_instr(builder, op, n_args: 2);
    instr.args[0] = dst;
    instr.args[1] = src;
}

func asm_write_ldrs_ri(builder: *AsmInstrBuilder, width: Int, xd: Reg, xs: Reg, offset: Int) {
    var dst_operand = asm_mk_reg_operand(8, xd, shift: 0);
    var src_operand = asm_mk_reg_mem_operand(xs, offset);
    asm_write_ldrs(builder, width, dst_operand, src_operand);
}

func asm_write_ldrs_r(builder: *AsmInstrBuilder, width: Int, xd: Reg, xs: Reg) {
    asm_write_ldrs_ri(builder, width, xd, xs, 0);
}

func asm_write_ldrs_r_fp_from_frame_start(builder: *AsmInstrBuilder, width: Int, xd: Reg, offset: Int) {
    var dst_operand = asm_mk_reg_operand(8, xd, shift: 0);
    var src_operand = asm_mk_fp_from_frame_start_mem_operand(offset);
    asm_write_ldrs(builder, width, dst_operand, src_operand);
}

func asm_write_ldrs_r_sp_from_fp(builder: *AsmInstrBuilder, width: Int, xd: Reg, fp_offset: Int) {
    var dst_operand = asm_mk_reg_operand(8, xd, shift: 0);
    var src_operand = asm_mk_sp_from_fp_mem_operand(fp_offset);
    asm_write_ldrs(builder, width, dst_operand, src_operand);
}

func asm_write_str(builder: *AsmInstrBuilder, width: Int, src: *AsmOperand, dst: *AsmOperand) {
    var op = asm_get_store_op(width);
    var instr = asm_write_instr(builder, op, n_args: 2);
    instr.args[0] = src;
    instr.args[1] = dst;
}

func asm_write_str_ri(builder: *AsmInstrBuilder, width: Int, xs: Reg, xd: Reg, offset: Int) {
    var src_width = reg_width_from_size(width);
    var src_operand = asm_mk_reg_operand(src_width, xs, shift: 0);
    var dst_operand = asm_mk_reg_mem_operand(xd, offset);
    asm_write_str(builder, width, src_operand, dst_operand);
}

func asm_write_str_r(builder: *AsmInstrBuilder, width: Int, xs: Reg, xd: Reg) {
    asm_write_str_ri(builder, width, xs, xd, 0);
}

func asm_write_str_r_sp_from_fp(builder: *AsmInstrBuilder, width: Int, xs: Reg, fp_offset: Int) {
    var src_width = reg_width_from_size(width);
    var src_operand = asm_mk_reg_operand(src_width, xs, shift: 0);
    var dst_operand = asm_mk_sp_from_fp_mem_operand(fp_offset);
    asm_write_str(builder, width, src_operand, dst_operand);
}

// Arithmetic, Logic and Comparison

func asm_write_sxt(builder: *AsmInstrBuilder, dst_size: Int, src_size: Int, xd: Reg, x1: Reg) {
    var op =
        src_size == 1 ? "sxtb" :
        src_size == 2 ? "sxth" :
        "sxtw";

    var dst_width = reg_width_from_size(dst_size);
    var src_width = reg_width_from_size(src_size);

    var instr = asm_write_instr(builder, op, n_args: 2);
    instr.args[0] = asm_mk_reg_operand(dst_width, xd, shift: 0);
    instr.args[1] = asm_mk_reg_operand(src_width, x1, shift: 0);
}

func asm_write_binary_op_rr(builder: *AsmInstrBuilder, op: *Char, xd: Reg, x1: Reg, x2: Reg) {
    var instr = asm_write_instr(builder, op, n_args: 3);
    instr.args[0] = asm_mk_reg_operand(8, xd, shift: 0);
    instr.args[1] = asm_mk_reg_operand(8, x1, shift: 0);
    instr.args[2] = asm_mk_reg_operand(8, x2, shift: 0);
}

func asm_write_binary_op_ri(builder: *AsmInstrBuilder, op: *Char, xd: Reg, x1: Reg, imm: Int) {
    var instr = asm_write_instr(builder, op, n_args: 3);
    instr.args[0] = asm_mk_reg_operand(8, xd, shift: 0);
    instr.args[1] = asm_mk_reg_operand(8, x1, shift: 0);
    instr.args[2] = asm_mk_int_operand(imm);
}

func asm_write_binary_op_rrr(builder: *AsmInstrBuilder, op: *Char, xd: Reg, x1: Reg, x2: Reg, x3: Reg) {
    var instr = asm_write_instr(builder, op, n_args: 4);
    instr.args[0] = asm_mk_reg_operand(8, xd, shift: 0);
    instr.args[1] = asm_mk_reg_operand(8, x1, shift: 0);
    instr.args[2] = asm_mk_reg_operand(8, x2, shift: 0);
    instr.args[3] = asm_mk_reg_operand(8, x3, shift: 0);
}

func asm_write_add_ri(builder: *AsmInstrBuilder, width: Int, xd: Reg, x1: Reg, imm: Int) {
    asm_write_binary_op_ri(builder, "add", xd, x1, imm);
}

func asm_write_add_r_fp_from_frame_start(builder: *AsmInstrBuilder, width: Int, xd: Reg, offset: Int) {
    var instr = asm_write_instr(builder, "add", n_args: 3);
    instr.args[0] = asm_mk_reg_operand(8, xd, shift: 0);
    instr.args[1] = asm_mk_reg_operand(8, FP, shift: 0);
    instr.args[2] = asm_mk_fp_from_frame_start_operand(offset);
}

func asm_write_add_rr(builder: *AsmInstrBuilder, width: Int, xd: Reg, x1: Reg, x2: Reg) {
    asm_write_binary_op_rr(builder, "add", xd, x1, x2);
}

func asm_write_cmp_rr(builder: *AsmInstrBuilder, width: Int, xd: Reg, x1: Reg) {
    var instr = asm_write_instr(builder, "cmp", n_args: 2);
    instr.args[0] = asm_mk_reg_operand(8, xd, shift: 0);
    instr.args[1] = asm_mk_reg_operand(8, x1, shift: 0);
}

func asm_write_cset(builder: *AsmInstrBuilder, width: Int, xd: Reg, op: *Char) {
    var instr = asm_write_instr(builder, "cset", n_args: 2);
    instr.args[0] = asm_mk_reg_operand(8, xd, shift: 0);
    instr.args[1] = asm_mk_raw_operand(op);
}

// Control Flow

func asm_write_cbz(builder: *AsmInstrBuilder, xd: Reg, counter: Int, label_suffix: *Char) {
    var instr = asm_write_instr(builder, "cbz", n_args: 2);
    instr.args[0] = asm_mk_reg_operand(8, xd, shift: 0);
    instr.args[1] = asm_mk_label_operand(counter, label_suffix);
}

func asm_write_b(builder: *AsmInstrBuilder, counter: Int, suffix: *Char) {
    var instr = asm_write_instr(builder, "b", n_args: 1);
    instr.args[0] = asm_mk_label_operand(counter, suffix);
}

func asm_write_bl(builder: *AsmInstrBuilder, name: *Char) {
    var instr = asm_write_instr(builder, "bl", n_args: 1);
    instr.args[0] = asm_mk_global_operand("", name, -1);
}

// Addressing

func asm_write_global_addr(builder: *AsmInstrBuilder, xd: Reg, name: *Char) {
    var addrp_instr = asm_write_instr(builder, "adrp", n_args: 2);
    addrp_instr.args[0] = asm_mk_reg_operand(8, xd, shift: 0);
    addrp_instr.args[1] = asm_mk_global_operand("", name, -1);

    var instr = asm_write_instr(builder, "add", n_args: 3);
    instr.args[0] = asm_mk_reg_operand(8, xd, shift: 0);
    instr.args[1] = asm_mk_reg_operand(8, xd, shift: 0);
    instr.args[2] = asm_mk_global_operand(":lo12:", name, -1);
}

func asm_write_got_global_addr(builder: *AsmInstrBuilder, xd: Reg, name: *Char) {
    var addrp_instr = asm_write_instr(builder, "adrp", n_args: 2);
    addrp_instr.args[0] = asm_mk_reg_operand(8, xd, shift: 0);
    addrp_instr.args[1] = asm_mk_global_operand(":got:", name, -1);

    var mem_operand = asm_mk_mem_operand(2);
    mem_operand.args[0] = asm_mk_reg_operand(8, xd, shift: 0);
    mem_operand.args[1] = asm_mk_global_operand(":got_lo12:", name, -1);

    var ldr_instr = asm_write_instr(builder, "ldr", n_args: 2);
    ldr_instr.args[0] = asm_mk_reg_operand(8, xd, shift: 0);
    ldr_instr.args[1] = mem_operand;
}

func asm_write_string_addr(builder: *AsmInstrBuilder, xd: Reg, id: Int) {
    var addrp_instr = asm_write_instr(builder, "adrp", n_args: 2);
    addrp_instr.args[0] = asm_mk_reg_operand(8, xd, shift: 0);
    addrp_instr.args[1] = asm_mk_global_operand("", ".L.str.", id);

    var add_instr = asm_write_instr(builder, "add", n_args: 3);
    add_instr.args[0] = asm_mk_reg_operand(8, xd, shift: 0);
    add_instr.args[1] = asm_mk_reg_operand(8, xd, shift: 0);
    add_instr.args[2] = asm_mk_global_operand(":lo12:", ".L.str.", id);
}

// Miscellaneous

func asm_write_label(builder: *AsmInstrBuilder, counter: Int, suffix: *Char) {
    var instr = asm_write_instr(builder, op: null, 1);
    instr.args[0] = asm_mk_label_operand(counter, suffix);
}

func asm_write_raw(builder: *AsmInstrBuilder, raw: *Char) {
    asm_write_instr(builder, raw, n_args: 0);
}

func asm_write_comment(builder: *AsmInstrBuilder, fmt: *Char, ...args) {
    var sb = sb_new();
    sb_printf(sb, "// ");
    sb_vprintf(sb, fmt, args);
    var text = sb_finish(sb);
    asm_write_raw(builder, text);
}

func asm_add_comment_to_last(builder: *AsmInstrBuilder, fmt: *Char, ...args) {
    var sb = sb_new();
    sb_printf(sb, "// ");
    sb_vprintf(sb, fmt, args);
    var text = sb_finish(sb);

    var list = builder.instrs;
    var instr: *AsmInstr = list_get(list, list_len(list) - 1);
    instr.comment = text;
}

//==============================================================================
//== Printing Assembly

func asm_print_reg(reg: Reg, width: Int) {
    if (reg == SP) {
        printf("sp");
    } else {
        if (width == 4) {
            printf("w%d", reg);
        } else {
            printf("x%d", reg);
        }
    }
}

func asm_print_operand(fun: *AsmFunc, operand: *AsmOperand) {
    if (operand.kind == AsmOperand_Reg) {
        var operand = operand as *AsmRegOperand;
        asm_print_reg(operand.reg, operand.width);
        if (operand.shift != 0) {
            printf(", lsl #%d", operand.shift);
        }
    } else if (operand.kind == AsmOperand_Mem) {
        var operand = operand as *AsmMemOperand;
        printf("[");
        for (var i = 0; i < operand.n_args; i += 1) {
            asm_print_operand(fun, operand.args[i]);
            if (i < operand.n_args - 1) {
                printf(", ");
            }
        }
        printf("]");
    } else if (operand.kind == AsmOperand_Int) {
        var operand = operand as *AsmIntOperand;
        printf("#%d", operand.value);
        if (operand.shift != 0) {
            printf(", lsl #%d", operand.shift);
        }
    } else if (operand.kind == AsmOperand_Label) {
        var operand = operand as *AsmLabelOperand;
        printf(".L%d", operand.counter);
        if (operand.suffix != null) {
            printf(".%s", operand.suffix);
        }
    } else if (operand.kind == AsmOperand_Global) {
        var operand = operand as *AsmGlobalOperand;
        printf("%s%s", operand.relocation_spec, operand.prefix);
        if (operand.counter != -1) {
            printf("%d", operand.counter);
        }
    } else if (operand.kind == AsmOperand_FpFromFrameStart) {
        var operand = operand as *AsmFpFromFrameStartOperand;
        printf("#%d", fun.spills_size + operand.offset);
    } else if (operand.kind == AsmOperand_SpFromFp) {
        var operand = operand as *AsmSpFromFpOperand;
        printf("#%d", fun.frame_size - fun.spills_size + operand.fp_offset);
    } else if (operand.kind == AsmOperand_Raw) {
        var operand = operand as *AsmRawOperand;
        printf("%s", operand.op);
    }
}

func asm_print_instr(fun: *AsmFunc, instr: *AsmInstr) {
    // special case for labels:
    if (instr.op == null) {
        asm_print_operand(fun, instr.args[0]);
        printf(":\n");
        return;
    }

    printf("  %s", instr.op);

    for (var i = 0; i < instr.n_args; i += 1) {
        var arg = instr.args[i];

        if (i == 0) {
            printf(" ");
        } else {
            printf(", ");
        }
        asm_print_operand(fun, arg);
    }

    if (instr.comment != null) {
        printf("  %s", instr.comment);
    }

    printf("\n");
}

func asm_print_func(fun: *AsmFunc) {
    var n_spills = fun.n_spills;
    var spills = fun.spills;
    var spills_size = fun.spills_size;

    printf("  .text\n");
    printf("  .align 2\n");
    printf("  .global %s\n", fun.name);
    printf("%s:\n", fun.name);

    // prologue
    printf("  // prologue\n");
    printf("  sub  sp, sp, #%d\n", spills_size);
    for (var i = 0; i < n_spills; i += 2) {
        if (i + 1 < n_spills) {
            printf("  stp  x%d, x%d, [sp, #%d]\n", spills[i], spills[i + 1], i * 8);
        } else {
            printf("  str  x%d, [sp, #%d]\n", spills[i], i * 8);
        }
    }
    printf("  mov  x29, sp\n");
    printf("  sub  sp, sp, #%d\n", fun.frame_size - spills_size);

    var instrs = fun.builder.instrs;
    var n_instrs = list_len(instrs);
    for (var i = 0; i < n_instrs; i += 1) {
        var instr: *AsmInstr = list_get(instrs, i);
        asm_print_instr(fun, instr);
    }

    // epilogue
    printf("  // epilogue\n");
    printf("  add  sp, sp, #%d\n", fun.frame_size - spills_size);
    for (var i = 0; i < n_spills; i += 2) {
        if (i + 1 < n_spills) {
            printf("  ldp  x%d, x%d, [sp, #%d]\n", spills[i], spills[i + 1], i * 8);
        } else {
            printf("  ldr  x%d, [sp, #%d]\n", spills[i], i * 8);
        }
    }
    printf("  add  sp, sp, #%d\n", spills_size);
    printf("  ret\n");
}


func asm_print_global(name: *Char, size: Int, align: Int) {
    printf("  .global %s\n", name);
    printf("  .bss\n");
    printf("  .align %d\n", align);
    printf("%s:\n", name);
    printf("  .zero %d\n", size);
}

func asm_print_string(id: Int, str: *StringBuffer) {
    printf("  .text\n");
    printf("  .section .rodata\n");
    printf("  .align 3\n");
    printf(".L.str.%d:\n", id);
    printf("  .string \"");
    var i = 0;
    for (var i = 0; i < sb_len(str); i += 1) {
        var c = sb_get(str, i);
        if (!is_print(c) || c == '\"' || c == '\\') {
            printf("\\%03o", c);
        } else {
            printf("%c", c);
        }
    }
    printf("\"\n");
}
