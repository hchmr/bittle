include "bittle.btls";

struct Type;
func mk_void_type(): *VoidType {
    var type: *VoidType = calloc(1, sizeof(VoidType));
    type.kind = Type_Void;
    return type;
}

func mk_never_type(): *NeverType {
    var type: *NeverType = calloc(1, sizeof(NeverType));
    type.kind = Type_Never;
    return type;
}

func mk_bool_type(): *BoolType {
    var type: *BoolType = calloc(1, sizeof(BoolType));
    type.kind = Type_Bool;
    return type;
}

func mk_int_type(size: Int): *IntType {
    var type: *IntType = calloc(1, sizeof(IntType));
    *type = IntType(kind: Type_Int, size);
    return type;
}

func mk_ptr_type(pointee: *Type): *PtrType {
    var type: *PtrType = calloc(1, sizeof(PtrType));
    *type = PtrType(kind: Type_Ptr, pointee);
    return type;
}

func mk_array_type(elem: *Type, size: Int): *ArrType {
    var type: *ArrType = calloc(1, sizeof(ArrType));
    *type = ArrType(kind: Type_Arr, elem, size);
    return type;
}

func mk_enum_type(sym: *EnumSym): *EnumType {
    var type: *EnumType = calloc(1, sizeof(EnumType));
    *type = EnumType(kind: Type_Enum, sym);
    return type;
}

func mk_struct_type(sym: *StructSym): *StructType {
    var type: *StructType = calloc(1, sizeof(StructType));
    *type = StructType(kind: Type_Struct, sym);
    return type;
}

func type_eq(t1: *Type, t2: *Type): Bool {
    if (t1.kind != t2.kind) {
        return false;
    }
    if (t1.kind == Type_Int) {
        var t1 = t1 as *IntType;
        var t2 = t2 as *IntType;
        return t1.size == t2.size;
    } else if (t1.kind == Type_Ptr) {
        var t1 = t1 as *PtrType;
        var t2 = t2 as *PtrType;
        return type_eq(t1.pointee, t2.pointee);
    } else if (t1.kind == Type_Arr) {
        var t1 = t1 as *ArrType;
        var t2 = t2 as *ArrType;
        return type_eq(t1.elem, t2.elem) && t1.size == t2.size;
    } else if (t1.kind == Type_Enum) {
        var t1 = t1 as *EnumType;
        var t2 = t2 as *EnumType;
        return t1.sym == t2.sym;
    } else if (t1.kind == Type_Struct) {
        var t1 = t1 as *StructType;
        var t2 = t2 as *StructType;
        return t1.sym == t2.sym;
    }
    return true;
}

func struct_le(s1: *StructSym, s2: *StructSym): Bool {
    if (s1 == s2) {
        return true;
    }
    if (!s1.base) {
        return false;
    }
    return struct_le(s1.base, s2);
}

func pointee_type_le(t1: *Type, t2: *Type): Bool {
    return type_eq(t1, t2)
        || t1.kind == Type_Void
        || t1.kind == Type_Struct && t2.kind == Type_Struct && struct_le((t1 as *StructType).sym, (t2 as *StructType).sym);
}

func type_le(t1: *Type, t2: *Type): Bool {
    if (t1.kind == Type_Never) {
        return true;
    } else if (is_scalar(t1) && t2.kind == Type_Bool) {
        return true;
    } else if (t1.kind == Type_Int && t2.kind == Type_Int) {
        return (t1 as *IntType).size <= (t2 as *IntType).size;
    } else if (t1.kind == Type_Ptr && t2.kind == Type_Ptr) {
        return pointee_type_le((t1 as *PtrType).pointee, (t2 as *PtrType).pointee);
    } else {
        return type_eq(t1, t2);
    }
}

func type_size(type: *Type): Int {
    if (type.kind == Type_Void) {
        return -1;
    } else if (type.kind == Type_Bool) {
        return 1;
    } else if (type.kind == Type_Int) {
        return (type as *IntType).size;
    } else if (type.kind == Type_Ptr) {
        return 8;
    } else if (type.kind == Type_Arr) {
        var type = type as *ArrType;
        return type_size(type.elem) * type.size;
    } else if (type.kind == Type_Enum) {
        var type = type as *EnumType;
        return type_size(mk_int_type(type.sym.size));
    } else if (type.kind == Type_Struct) {
        var type = type as *StructType;
        return type.sym.fields.len == 0 ? -1 : align_up(type.sym.unpadded_size, type_align(type));
    } else if (type.kind == Type_Never) {
        return -1;
    } else {
        unreachable("type_size");
    }
}

func type_align(type: *Type): Int {
    if (type.kind == Type_Struct) {
        return 8; // Maximum possible alignment
    } else {
        return type_size(type);
    }
}

func is_scalar(type: *Type): Bool {
    return type.kind == Type_Bool
        || type.kind == Type_Int
        || type.kind == Type_Ptr
        || type.kind == Type_Enum;
}

func is_sized(type: *Type): Bool {
    return type_size(type) != -1;
}

func pretty_type(file: *File, type: *Type): Void {
    if (type.kind == Type_Void) {
        fprintf(file, "Void");
    } else if (type.kind == Type_Bool) {
        fprintf(file, "Bool");
    } else if (type.kind == Type_Int) {
        fprintf(file, "Int%d", (type as *IntType).size * 8);
    } else if (type.kind == Type_Ptr) {
        fprintf(file, "*");
        pretty_type(file, (type as *PtrType).pointee);
    } else if (type.kind == Type_Arr) {
        var type = type as *ArrType;
        fprintf(file, "[");
        pretty_type(file, type.elem);
        fprintf(file, "; %d]", type.size);
    } else if (type.kind == Type_Enum) {
        var sym = (type as *EnumType).sym;
        fprintf(file, "%s", sym.name);
    } else if (type.kind == Type_Struct) {
        var sym = (type as *StructType).sym;
        fprintf(file, "%s", sym.name);
    } else if (type.kind == Type_Never) {
        fprintf(file, "!");
    } else {
        unreachable("pretty_type");
    }
}
