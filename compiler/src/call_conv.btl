include "bittle.btls";

func call_layout_drop(self: *CallLayout) {
    free(self.arg_locs);
}

func mapped_to_regs(reg: Int, n_regs: Int): ArgLocation {
    return RegArgLocation {
        reg: reg,
        n_regs: n_regs,
    };
}

func mapped_to_stack(offset: Int): ArgLocation {
    return StackArgLocation {
        offset,
    };
}

// Simplified implementation of aapcs64 2024Q3.
func get_call_layout(n_args: Int, arg_types: **Type, ret_type: *Type): CallLayout {
    var arg_locs = calloc(n_args, sizeof(ArgLocation)) as *ArgLocation;

    var ngrn = 0;
    var nsaa = 0;
    for (var i = 0; i < n_args; i += 1) {
        var type = arg_types[i];
        var arg_size = type_size(type);
        var arg_align = type_align(type);

        assert(is_sized(type), "get_call_layout: argument type must have known size");

        // Stage B – Pre-padding and extension of arguments

        if (is_pass_by_ptr(type)) {
            type = mk_ptr_type(type);
            arg_size = 8;
            arg_align = 8;
        } else if (is_composite(type)) {
            arg_size = align_up(arg_size, 8);
        }

        // Stage C – Assignment of arguments to registers and stack

        // C.9
        if (is_scalar(type) && arg_size <= 8 && ngrn < 8) {
            arg_locs[i] = mapped_to_regs(reg: ngrn, n_regs: 1);
            ngrn += 1;
            continue;
        }
        // C.10:
        if (arg_align == 16) {
            ngrn = align_up(ngrn, 2);
        }
        // C.11:
        if (is_composite(type) && arg_size / 8 <= (8 - ngrn)) {
            var n_regs = arg_size / 8;
            arg_locs[i] = mapped_to_regs(reg: ngrn, n_regs: n_regs);
            ngrn += n_regs;
            continue;
        }
        // C.13
        ngrn = 8;
        // C.14
        nsaa = align_up(nsaa, arg_align);
        // C.15
        if (is_composite(type)) {
            arg_locs[i] = mapped_to_stack(offset: nsaa);
            nsaa += arg_size;
            continue;
        }
        // C.16
        if (arg_size < 8) {
            arg_size = 8;
        }
        arg_locs[i] = mapped_to_stack(offset: nsaa);
        nsaa += arg_size;
    }

    var is_reg_ret = is_scalar(ret_type) || is_composite(ret_type) && type_size(ret_type) <= 16;
    var n_ret_regs = is_reg_ret ? align_up(type_size(ret_type), 8) / 8 : 0;
    var is_inderect_ret = is_composite(ret_type) && type_size(ret_type) > 16;

    return CallLayout {
        n_args: n_args,
        arg_locs,
        ret_loc: RetLocation {
            is_reg: is_reg_ret,
            is_indirect: is_inderect_ret,
            n_regs: n_ret_regs,
        },
        stack_space: nsaa * 8,
        next_gpr: ngrn,
    };
}

func get_call_layout_for_call(e: *HirCallExpr): CallLayout {
    var arg_types = calloc(e.n_args, sizeof(*Type)) as **Type;
    for (var i = 0; i < e.n_args; i += 1) {
        arg_types[i] = e.args[i].type;
    }
    var layout = get_call_layout(e.n_args, arg_types, e.type);
    free(arg_types);
    return layout;
}

func get_call_layout_for_func(f: *FuncSym): CallLayout {
    var n_params = list_len(f.params);
    var param_types = calloc(n_params, sizeof(*Type)) as **Type;
    for (var i = 0; i < n_params; i += 1) {
        var param = list_get(f.params, i) as *FuncParam;
        param_types[i] = param.type;
    }
    var layout = get_call_layout(n_params, param_types, f.return_type);
    free(param_types);
    return layout;
}
