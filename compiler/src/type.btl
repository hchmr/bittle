include "bittle.btls";

func mk_void_type(): *VoidType {
    var type: *VoidType = calloc(1, sizeof(VoidType));
    type.kind = Type_Void;
    return type;
}

func mk_never_type(): *NeverType {
    var type: *NeverType = calloc(1, sizeof(NeverType));
    type.kind = Type_Never;
    return type;
}

func mk_bool_type(): *BoolType {
    var type: *BoolType = calloc(1, sizeof(BoolType));
    type.kind = Type_Bool;
    return type;
}

func mk_int_type(size: Int): *IntType {
    var type: *IntType = calloc(1, sizeof(IntType));
    *type = IntType { kind: Type_Int, size };
    return type;
}

func mk_ptr_type(pointee: *Type): *PtrType {
    var type: *PtrType = calloc(1, sizeof(PtrType));
    *type = PtrType { kind: Type_Ptr, pointee };
    return type;
}

func mk_array_type(elem: *Type, size: Int): *ArrType {
    var type: *ArrType = calloc(1, sizeof(ArrType));
    *type = ArrType { kind: Type_Arr, elem, size };
    return type;
}

func mk_enum_type(sym: *EnumSym): *EnumType {
    var type: *EnumType = calloc(1, sizeof(EnumType));
    *type = EnumType { kind: Type_Enum, sym };
    return type;
}

func mk_record_type(sym: *RecordSym): *RecordType {
    var type: *RecordType = calloc(1, sizeof(RecordType));
    *type = RecordType { kind: Type_Record, sym };
    return type;
}

func mk_rest_param_type(): *Type {
    var rest: *Type = calloc(1, sizeof(Type));
    *rest = Type { kind: Type_RestParam };
    return rest;
}

func type_eq(t1: *Type, t2: *Type): Bool {
    if (t1.kind != t2.kind) {
        return false;
    }
    match (t1.kind) {
        case Type_Int: {
            var t1 = t1 as *IntType;
            var t2 = t2 as *IntType;
            return t1.size == t2.size;
        }
        case Type_Ptr: {
            var t1 = t1 as *PtrType;
            var t2 = t2 as *PtrType;
            return type_eq(t1.pointee, t2.pointee);
        }
        case Type_Arr: {
            var t1 = t1 as *ArrType;
            var t2 = t2 as *ArrType;
            return type_eq(t1.elem, t2.elem) && t1.size == t2.size;
        }
        case Type_Enum: {
            var t1 = t1 as *EnumType;
            var t2 = t2 as *EnumType;
            return t1.sym == t2.sym;
        }
        case Type_Record: {
            var t1 = t1 as *RecordType;
            var t2 = t2 as *RecordType;
            return t1.sym == t2.sym;
        }
        case _: {
            return true;
        }
    }
}

func record_le(s1: *RecordSym, s2: *RecordSym): Bool {
    if (s1 == s2) {
        return true;
    }
    if (!s1.base) {
        return false;
    }
    return record_le(s1.base, s2);
}

func pointee_type_le(t1: *Type, t2: *Type): Bool {
    return type_eq(t1, t2)
        || t1.kind == Type_Void
        || t1.kind == Type_Record && t2.kind == Type_Record && record_le((t1 as *RecordType).sym, (t2 as *RecordType).sym);
}

// Returns whether the first type is implicitly convertible to the second type.
func type_implicitly_convertible(src: *Type, dst: *Type): Bool {
    if (src.kind == Type_Never) {
        return true;
    }

    match (dst.kind) {
        case Type_Bool: {
            return is_scalar(src);
        }
        case Type_Int: {
            return src.kind == Type_Int && type_size(src) <= type_size(dst)
                || src.kind == Type_Enum && type_size(src) <= type_size(dst);
        }
        case Type_Ptr: {
            return src.kind == Type_Ptr && pointee_type_le((src as *PtrType).pointee, (dst as *PtrType).pointee);
        }
        case _: {
            return false;
        }
    }
}

// Returns whether the first type is explicitly convertible to the second type
func type_convertible(src: *Type, dst: *Type): Bool {
    // special case
    if (src.kind == Type_Never) {
        return true;
    }

    match (dst.kind) {
        case Type_Bool: {
            return is_scalar(src);
        }
        case Type_Int: {
            return is_scalar(src);
        }
        case Type_Ptr: {
            return src.kind == Type_Int && type_size(src) == 8
                || src.kind == Type_Ptr;
        }
        case Type_Enum: {
            return src.kind is (Type_Int | Type_Enum);
        }
        case _: {
            return false;
        }
    }
}

func type_size(type: *Type): Int {
    match (type.kind) {
        case Type_Void: {
            return -1;
        }
        case Type_Bool: {
            return 1;
        }
        case Type_Int: {
            return (type as *IntType).size;
        }
        case Type_Ptr: {
            return 8;
        }
        case Type_Arr: {
            var type = type as *ArrType;
            return type_size(type.elem) * type.size;
        }
        case Type_Enum: {
            var type = type as *EnumType;
            return type_size(mk_int_type(type.sym.size));
        }
        case Type_Record: {
            var type = type as *RecordType;
            return list_len(type.sym.fields) == 0 ? -1 : align_up(type.sym.unpadded_size, type.sym.align);
        }
        case Type_Never: {
            return -1;
        }
        case Type_RestParam: {
            return 32;
        }
        case _: {
            unreachable("type_size");
        }
    }
}

func type_align(type: *Type): Int {
    match (type.kind) {
        case Type_Record: {
            var type = type as *RecordType;
            return list_len(type.sym.fields) == 0 ? -1 : type.sym.align;
        }
        case Type_Arr: {
            var type = type as *ArrType;
            return type_align(type.elem);
        }
        case Type_RestParam: {
            return 8;
        }
        case _: {
            return type_size(type);
        }
    }
}

func is_scalar(type: *Type): Bool {
    return type.kind is (Type_Bool | Type_Int | Type_Ptr | Type_Enum);
}

func is_composite(type: *Type): Bool {
    return type.kind is (Type_Arr | Type_Record | Type_RestParam);
}

func is_pass_by_ptr(type: *Type): Bool {
    return is_composite(type) && type_size(type) > 16;
}

func is_sized(type: *Type): Bool {
    return type_size(type) != -1;
}

func sb_pretty_type(sb: *StringBuffer, type: *Type) {
    match (type.kind) {
        case Type_Void: {
            sb_printf(sb, "Void");
        }
        case Type_Bool: {
            sb_printf(sb, "Bool");
        }
        case Type_Int: {
            sb_printf(sb, "Int%d", (type as *IntType).size * 8);
        }
        case Type_Ptr: {
            sb_printf(sb, "*");
            sb_pretty_type(sb, (type as *PtrType).pointee);
        }
        case Type_Arr: {
            var type = type as *ArrType;
            sb_printf(sb, "[");
            sb_pretty_type(sb, type.elem);
            sb_printf(sb, "; %d]", type.size);
        }
        case Type_Enum: {
            var sym = (type as *EnumType).sym;
            sb_printf(sb, "%s", sym.name);
        }
        case Type_Record: {
            var sym = (type as *RecordType).sym;
            sb_printf(sb, "%s", sym.name);
        }
        case Type_Never: {
            sb_printf(sb, "!");
        }
        case Type_RestParam: {
            sb_printf(sb, "...");
        }
        case _: {
            unreachable("pretty_type");
        }
    }
}

func pretty_type(type: *Type): *Char {
    var sb = sb_new();
    sb_pretty_type(sb, type);
    return sb_finish(sb);
}
