include "bittle.btls";

func mk_void_type(): *VoidType {
    return box(sizeof(VoidType), &VoidType { }) as *VoidType;
}

func mk_never_type(): *NeverType {
    return box(sizeof(NeverType), &NeverType { }) as *NeverType;
}

func mk_bool_type(): *BoolType {
    return box(sizeof(BoolType), &BoolType { }) as *BoolType;
}

func mk_int_type(size: Int): *IntType {
    return box(sizeof(IntType), &IntType { size }) as *IntType;
}

func mk_ptr_type(pointee: *Type, is_mut: Bool): *PtrType {
    return box(sizeof(PtrType), &PtrType { pointee, is_mut }) as *PtrType;
}

func mk_array_type(elem: *Type, size: Int): *ArrType {
    return box(sizeof(ArrType), &ArrType { elem, size }) as *ArrType;
}

func mk_enum_type(sym: *mut EnumSym): *EnumType {
    return box(sizeof(EnumType), &EnumType { sym }) as *EnumType;
}

func mk_record_type(sym: *mut RecordSym): *RecordType {
    return box(sizeof(RecordType), &RecordType { sym }) as *RecordType;
}

func mk_rest_param_type(): *Type {
    return box(sizeof(RestParamType), &RestParamType { }) as *Type;
}

func type_eq(t1: *Type, t2: *Type): Bool {
    if (t1.kind != t2.kind) {
        return false;
    }
    match (t1.kind) {
        case Type_Int: {
            var t1 = t1 as *IntType;
            var t2 = t2 as *IntType;
            return t1.size == t2.size;
        }
        case Type_Ptr: {
            var t1 = t1 as *PtrType;
            var t2 = t2 as *PtrType;
            return type_eq(t1.pointee, t2.pointee);
        }
        case Type_Arr: {
            var t1 = t1 as *ArrType;
            var t2 = t2 as *ArrType;
            return type_eq(t1.elem, t2.elem) && t1.size == t2.size;
        }
        case Type_Enum: {
            var t1 = t1 as *EnumType;
            var t2 = t2 as *EnumType;
            return t1.sym == t2.sym;
        }
        case Type_Record: {
            var t1 = t1 as *RecordType;
            var t2 = t2 as *RecordType;
            return t1.sym == t2.sym;
        }
        case _: {
            return true;
        }
    }
}

func record_le(s1: *RecordSym, s2: *RecordSym): Bool {
    if (s1 == s2) {
        return true;
    }
    if (!s1.base) {
        return false;
    }
    return record_le(s1.base, s2);
}

func is_union_with_member(sym: *RecordSym, t: *Type): Bool {
    if (!sym.is_union) {
        return false;
    }
    for (var i = 0; i < list_len(sym.fields); i += 1) {
        var field = list_get(sym.fields, i) as *RecordField;
        if (type_eq(field.type, t)) {
            return true;
        }
    }
    return false;
}

/*
    Pointer subtyping rules:

    Pointee subtyping relation (T << U)
    - T << T
    - ! << T
    - T << Void
    - r1 << r2 if r1 extends r2

    Pointer rules (T <: U)
    - *T <: *U if T << U: Immutable to immutable (covariant)
    - *mut T <: *U if T << U: Mutable to immutable (covariant)
    - *mut T <: *mut T: Mutable to mutable (invariant)
    - *mut T <: *mut Void: Mutable to mutable (void pointer)

    Future extensions:
    - Nullable pointers
    - Function pointers
*/

func pointee_type_le(t1: *Type, t2: *Type): Bool {
    return type_eq(t1, t2)
        || t1.kind == Type_Never
        || t2.kind == Type_Void
        || t1.kind == Type_Record && t2.kind == Type_Record && record_le((t1 as *RecordType).sym, (t2 as *RecordType).sym);
}

func ptr_type_le(t1: *PtrType, t2: *PtrType): Bool {
    var p1 = t1.pointee;
    var p2 = t2.pointee;

    return
        // Immutable to immutable
        // Mutable to immutable
        !t2.is_mut && pointee_type_le(p1, p2)
        // Mutable to mutable
        || t1.is_mut && t2.is_mut && (type_eq(p1, p2) || p2.kind == Type_Void);
}

// Returns whether the first type is implicitly convertible to the second type.
func type_implicitly_convertible(src: *Type, dst: *Type): Bool {
    if (src.kind == Type_Never) {
        return true;
    }

    match (dst.kind) {
        case Type_Bool: {
            return is_scalar(src);
        }
        case Type_Int: {
            return src.kind == Type_Int && type_size(src) <= type_size(dst)
                || src.kind == Type_Enum && type_size(src) <= type_size(dst);
        }
        case Type_Ptr if src.kind == Type_Ptr: {
            var dst = dst as *PtrType;
            var src = src as *PtrType;
            return ptr_type_le(src, dst);
        }
        case _: {
            return false;
        }
    }
}

func ptr_type_convertible(src: *PtrType, dst: *PtrType): Bool {
    return !(!src.is_mut && dst.is_mut && (pointee_type_le(src.pointee, dst.pointee) || pointee_type_le(dst.pointee, src.pointee)))
        || (src.pointee.kind == Type_Void || dst.pointee.kind == Type_Void);
}

// Returns whether the first type is explicitly convertible to the second type
func type_convertible(src: *Type, dst: *Type): Bool {
    if (type_implicitly_convertible(src, dst)) {
        return true;
    }

    match (dst.kind) {
        case Type_Int: {
            return is_scalar(src);
        }
        case Type_Ptr if src.kind == Type_Int: {
            return type_size(src) == 8;
        }
        case Type_Ptr if src.kind == Type_Ptr: {
            return ptr_type_convertible(src as *PtrType, dst as *PtrType);
        }
        case Type_Enum: {
            return src.kind is (Type_Int | Type_Enum);
        }
        case _: {
            return false;
        }
    }
}

func type_size(type: *Type): Int {
    match (type.kind) {
        case Type_Void: {
            return -1;
        }
        case Type_Bool: {
            return 1;
        }
        case Type_Int: {
            return (type as *IntType).size;
        }
        case Type_Ptr: {
            return 8;
        }
        case Type_Arr: {
            var type = type as *ArrType;
            return type_size(type.elem) * type.size;
        }
        case Type_Enum: {
            var type = type as *EnumType;
            return type_size(mk_int_type(type.sym.size));
        }
        case Type_Record: {
            var type = type as *RecordType;
            return list_len(type.sym.fields) == 0 ? -1 : align_up(type.sym.unpadded_size, type.sym.align);
        }
        case Type_Never: {
            return -1;
        }
        case Type_RestParam: {
            return 32;
        }
        case _: {
            unreachable("type_size");
        }
    }
}

func type_align(type: *Type): Int {
    match (type.kind) {
        case Type_Record: {
            var type = type as *RecordType;
            return list_len(type.sym.fields) == 0 ? -1 : type.sym.align;
        }
        case Type_Arr: {
            var type = type as *ArrType;
            return type_align(type.elem);
        }
        case Type_RestParam: {
            return 8;
        }
        case _: {
            return type_size(type);
        }
    }
}

func is_scalar(type: *Type): Bool {
    return type.kind is (Type_Bool | Type_Int | Type_Ptr | Type_Enum);
}

func is_composite(type: *Type): Bool {
    return type.kind is (Type_Arr | Type_Record | Type_RestParam);
}

func is_pass_by_ptr(type: *Type): Bool {
    return is_composite(type) && type_size(type) > 16;
}

func is_sized(type: *Type): Bool {
    return type_size(type) != -1;
}

func sb_pretty_type(sb: *mut StringBuffer, type: *Type) {
    match (type.kind) {
        case Type_Void: {
            sb_printf(sb, "Void");
        }
        case Type_Bool: {
            sb_printf(sb, "Bool");
        }
        case Type_Int: {
            sb_printf(sb, "Int%d", (type as *IntType).size * 8);
        }
        case Type_Ptr: {
            sb_printf(sb, "*");
            if ((type as *PtrType).is_mut) {
                sb_printf(sb, "");
            }
            sb_pretty_type(sb, (type as *PtrType).pointee);
        }
        case Type_Arr: {
            var type = type as *ArrType;
            sb_printf(sb, "[");
            sb_pretty_type(sb, type.elem);
            sb_printf(sb, "; %d]", type.size);
        }
        case Type_Enum: {
            var sym = (type as *EnumType).sym;
            sb_printf(sb, "%s", sym.name);
        }
        case Type_Record: {
            var sym = (type as *RecordType).sym;
            sb_printf(sb, "%s", sym.name);
        }
        case Type_Never: {
            sb_printf(sb, "!");
        }
        case Type_RestParam: {
            sb_printf(sb, "...");
        }
        case _: {
            unreachable("pretty_type");
        }
    }
}

func pretty_type(type: *Type): *mut Char {
    var sb = sb_new();
    sb_pretty_type(sb, type);
    return sb_finish(sb);
}
