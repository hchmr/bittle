module parser;

import "../support/libc";
import "../support/utils";
import "../support/utils";
import "ast";
import "lexer";
import "tok";

//==============================================================================
//== Parser core

struct Parser {
    lexer: *mut Lexer,
    tok: Tok,
    lookahead: Tok,
}

func advance(self: *mut Parser) {
    self.tok = self.lookahead;
    self.lookahead = lexer_next(self.lexer);
}

func peek(self: *mut Parser): *mut Tok {
    return &self.lookahead;
}

func parser_new(lexer: *mut Lexer): *mut Parser {
    var self = calloc(1, sizeof(Parser)) as *mut Parser;
    self.lexer = lexer;
    advance(self);
    advance(self);
    return self;
}

func at(self: *mut Parser, kind: TokKind): Bool {
    return self.tok.kind == kind;
}

func at_eof(self: *mut Parser): Bool {
    return at(self, Tok_Eof);
}

func at_literal_tok(self: *mut Parser): Bool {
    return at(self, Tok_Null) || at(self, Tok_True) || at(self, Tok_False) || at(self, Tok_Int) || at(self, Tok_Char) || at(self, Tok_String);
}

func at_pattern_const_tok(self: *mut Parser): Bool {
    return at_literal_tok(self) || at(self, Tok_Ident);
}

func next_is(self: *mut Parser, kind: TokKind): Bool {
    return self.lookahead.kind == kind;
}

func eat(self: *mut Parser, kind: TokKind): Bool {
    if (at(self, kind)) {
        advance(self);
        return true;
    }
    return false;
}

func expect(self: *mut Parser, kind: TokKind) {
    if (!eat(self, kind)) {
        die_at(&self.tok.pos, "Unexpected token. Expected %s, but got %s.", pretty_tok_kind(kind), pretty_tok_kind(self.tok.kind));
    }
}

func expect_with_lexeme(self: *mut Parser, kind: TokKind): *Char {
    var tok = self.tok;
    expect(self, kind);
    return tok.lexeme;
}

func p_ident(self: *mut Parser): *Char {
    return expect_with_lexeme(self, Tok_Ident);
}

//==============================================================================
//== Types

func p_named_type(self: *mut Parser): *mut TypeExpr {
    var pos = self.tok.pos;
    var name = p_ident(self);
    return box(sizeof(NamedTypeExpr), &NamedTypeExpr {
        pos,
        name,
    }) as *mut TypeExpr;
}

func p_grouped_type(self: *mut Parser): *mut TypeExpr {
    expect(self, Tok_LParen);
    var result = p_type(self);
    expect(self, Tok_RParen);
    return result;
}

func p_ptr_type(self: *mut Parser): *mut TypeExpr {
    var pos = self.tok.pos;
    expect(self, Tok_Star);
    var is_mut = eat(self, Tok_Mut);
    var pointee = p_type(self);

    return box(sizeof(PtrTypeExpr), &PtrTypeExpr {
        pos,
        pointee,
        is_mut,
    }) as *mut TypeExpr;
}

func p_arr_type(self: *mut Parser): *mut TypeExpr {
    var pos = self.tok.pos;
    expect(self, Tok_LBracket);
    var elem = p_type(self);
    expect(self, Tok_Semicolon);
    var size = p_expr(self);
    expect(self, Tok_RBracket);

    return box(sizeof(ArrTypeExpr), &ArrTypeExpr {
        pos,
        elem,
        size,
    }) as *mut TypeExpr;
}

func p_never_type(self: *mut Parser): *mut TypeExpr {
    var pos = self.tok.pos;
    expect(self, Tok_Bang);

    return box(sizeof(NeverTypeExpr), &NeverTypeExpr {
        pos,
    }) as *mut TypeExpr;
}

func p_typeof_type(self: *mut Parser): *mut TypeExpr {
    var pos = self.tok.pos;
    expect(self, Tok_Typeof);
    expect(self, Tok_LParen);
    var expr = p_expr(self);
    expect(self, Tok_RParen);

    return box(sizeof(TypeofTypeExpr), &TypeofTypeExpr {
        pos,
        expr,
    }) as *mut TypeExpr;
}

func p_rest_param_type(self: *mut Parser): *mut TypeExpr {
    var pos = self.tok.pos;
    expect(self, Tok_DotDotDot);

    return box(sizeof(RestParamTypeExpr), &RestParamTypeExpr {
        pos,
    }) as *mut TypeExpr;
}

func p_type(self: *mut Parser): *mut TypeExpr {
    if (at(self, Tok_Ident)) {
        return p_named_type(self);
    } else if (at(self, Tok_LParen)) {
        return p_grouped_type(self);
    } else if (at(self, Tok_Star)) {
        return p_ptr_type(self);
    } else if (at(self, Tok_LBracket)) {
        return p_arr_type(self);
    } else if (at(self, Tok_Typeof)) {
        return p_typeof_type(self);
    } else if (at(self, Tok_Bang)) {
        return p_never_type(self);
    } else if (at(self, Tok_DotDotDot)) {
        return p_rest_param_type(self);
    } else {
        die_at(&self.tok.pos, "Unexpected start of type.");
    }
}

//==============================================================================
//== Literals

func parse_int_lexeme(lexeme: *Char): Int64 {
    if (lexeme[0] == '0') {
        var prefix = lexeme[1] | 32;
        match (prefix) {
            case 'b': {
                return strtol(&lexeme[2], null, 2);
            }
            case 'o': {
                return strtol(&lexeme[2], null, 8);
            }
            case 'x': {
                return strtol(&lexeme[2], null, 16);
            }
            case _: {}
        }
    }
    return strtol(lexeme, null, 10);
}

func p_literal(self: *mut Parser): *Literal {
    var result: *Literal;

    if (at(self, Tok_Null)) {
        var literal = box(sizeof(NullLiteral), &NullLiteral { }) as *Literal;
        result = literal;
    } else if (at(self, Tok_True)) {
        var literal = box(sizeof(BoolLiteral), &BoolLiteral { value: true }) as *Literal;
        result = literal;
    } else if (at(self, Tok_False)) {
        var literal = box(sizeof(BoolLiteral), &BoolLiteral { value: false }) as *Literal;
        result = literal;
    } else if (at(self, Tok_Int)) {
        var value = parse_int_lexeme(self.tok.lexeme);
        var literal = box(sizeof(IntLiteral), &IntLiteral { value }) as *Literal;
        result = literal;
    } else if (at(self, Tok_Char)) {
        var value = parse_char(self.tok.lexeme);
        var literal = box(sizeof(CharLiteral), &CharLiteral { value }) as *Literal;
        result = literal;
    } else if (at(self, Tok_String)) {
        var value = parse_string(self.tok.lexeme);
        var literal = box(sizeof(StringLiteral), &StringLiteral { value }) as *Literal;
        result = literal;
    } else {
        die_at(&self.tok.pos, "Unexpected start of literal.");
    }

    advance(self);
    return result;
}

//==============================================================================
//== Patterns

func p_pattern_const(self: *mut Parser): *mut Expr {
    if (at_literal_tok(self)) {
        return p_literal_expr(self);
    } else {
        return p_name_expr(self);
    }
}

func p_grouped_pattern(self: *mut Parser): *mut Pattern {
    var pos = self.tok.pos;
    expect(self, Tok_LParen);
    var pattern = p_pattern(self);
    expect(self, Tok_RParen);

    return box(sizeof(GroupedPattern), &GroupedPattern {
        pos,
        type: null,
        pattern,
    }) as *mut Pattern;
}

func p_literal_pattern(self: *mut Parser): *mut Pattern {
    var pos = self.tok.pos;
    var literal = p_literal(self);

    return box(sizeof(LiteralPattern), &LiteralPattern {
        pos,
        type: null,
        literal,
        value: null,
    }) as *mut Pattern;
}

func p_name_pattern(self: *mut Parser): *mut Pattern {
    var pos = self.tok.pos;
    var name = p_ident(self);

    return box(sizeof(NamePattern), &NamePattern {
        pos,
        type: null,
        name,
        sym: null,
    }) as *mut Pattern;
}

func p_wildcard_pattern(self: *mut Parser): *mut Pattern {
    var pos = self.tok.pos;
    expect(self, Tok_Underscore);

    return box(sizeof(WildcardPattern), &WildcardPattern {
        pos,
        type: null,
    }) as *mut Pattern;
}

func p_var_pattern(self: *mut Parser): *mut Pattern {
    var pos = self.tok.pos;
    var name = p_ident(self);
    expect(self, Tok_At);
    var pattern = p_inner_pattern(self);

    return box(sizeof(VarPattern), &VarPattern {
        pos,
        type: null,
        name,
        pattern,
        sym: null,
    }) as *mut Pattern;
}

func p_range_pattern(self: *mut Parser): *mut Pattern {
    var pos = self.tok.pos;
    var lower: *mut Expr = null;

    if (!at(self, Tok_DotDotDot)) {
        lower = p_pattern_const(self);
    }

    expect(self, Tok_DotDotDot);

    var upper: *mut Expr = null;
    if (at_pattern_const_tok(self)) {
        upper = p_pattern_const(self);
    }

    return box(sizeof(RangePattern), &RangePattern {
        pos,
        type: null,
        lower,
        upper,
        lower_value: null,
        upper_value: null,
    }) as *mut Pattern;
}

func p_inner_pattern(self: *mut Parser): *mut Pattern {
    if (at(self, Tok_LParen)) {
        return p_grouped_pattern(self);
    } else if (at(self, Tok_DotDotDot) || (at_pattern_const_tok(self) && next_is(self, Tok_DotDotDot))) {
        return p_range_pattern(self);
    } else if (at_literal_tok(self)) {
        return p_literal_pattern(self);
    } else if (at(self, Tok_Ident) && next_is(self, Tok_At)) {
        return p_var_pattern(self);
    } else if (at(self, Tok_Ident)) {
        return p_name_pattern(self);
    } else if (at(self, Tok_Underscore)) {
        return p_wildcard_pattern(self);
    } else {
        die_at(&self.tok.pos, "Unexpected start of pattern.");
    }
}

func p_or_pattern(self: *mut Parser, left: *mut Pattern): *mut Pattern {
    var patterns = list_new();
    list_push(patterns, left);
    while (eat(self, Tok_Bar)) {
        var pattern = p_inner_pattern(self);
        list_push(patterns, pattern);
    }

    return box(sizeof(OrPattern), &OrPattern {
        pos: left.pos,
        type: null,
        patterns,
    }) as *mut Pattern;
}

func p_pattern(self: *mut Parser): *mut Pattern {
    var result = p_inner_pattern(self);
    if (at(self, Tok_Bar)) {
        result = p_or_pattern(self, result);
    }
    return result;
}

//==============================================================================
//== Expressions

enum {
    Prec_Assign,
    Prec_Cond,
    Prec_Or,
    Prec_And,
    Prec_Is,
    Prec_BitOr,
    Prec_BitXor,
    Prec_BitAnd,
    Prec_Cmp,
    Prec_Shift,
    Prec_Add,
    Prec_Mul,
    Prec_Cast,
    Prec_Unary,
    Prec_Postfix,
    Prec_Primary,
}

func p_grouped_expr(self: *mut Parser): *mut Expr {
    expect(self, Tok_LParen);
    var expr = p_expr(self);
    expect(self, Tok_RParen);
    return expr;
}

func p_name_expr(self: *mut Parser): *mut Expr {
    var pos = self.tok.pos;
    var name = p_ident(self);

    return box(sizeof(IdentExpr), &IdentExpr {
        pos,
        type: null,
        const_value: null,
        name,
        sym: null,
    }) as *mut Expr;
}

func p_literal_expr(self: *mut Parser): *mut Expr {
    var pos = self.tok.pos;
    var literal = p_literal(self);

    return box(sizeof(LiteralExpr), &LiteralExpr {
        pos,
        type: null,
        const_value: null,
        literal,
    }) as *mut Expr;
}

func p_sizeof_expr(self: *mut Parser): *mut Expr {
    var pos = self.tok.pos;
    expect(self, Tok_Sizeof);
    expect(self, Tok_LParen);
    var type = p_type(self);
    expect(self, Tok_RParen);

    return box(sizeof(SizeofExpr), &SizeofExpr {
        pos,
        type_expr: type,
        type: null,
        const_value: null,
        size: -1,
    }) as *mut Expr;
}

func p_array_expr(self: *mut Parser): *mut Expr {
    var pos = self.tok.pos;

    expect(self, Tok_LBracket);
    var elems = list_new();
    while (!at_eof(self) && !at(self, Tok_RBracket)) {
        var element = p_expr(self);
        list_push(elems, element);
        if (!at(self, Tok_RBracket)) {
            expect(self, Tok_Comma);
        }
    }
    expect(self, Tok_RBracket);

    return box(sizeof(ArrayExpr), &ArrayExpr {
        pos,
        type: null,
        const_value: null,
        elems,
    }) as *mut Expr;
}

func p_index_expr(self: *mut Parser, indexee: *mut Expr): *mut Expr {
    var pos = self.tok.pos;
    expect(self, Tok_LBracket);
    var index = p_expr(self);
    expect(self, Tok_RBracket);

    return box(sizeof(IndexExpr), &IndexExpr {
        pos,
        type: null,
        const_value: null,
        indexee,
        index,
    }) as *mut Expr;
}

func p_call_arg(self: *mut Parser, max_prec: Int32): *mut CallArg {
    var label: *Char = null;
    if (at(self, Tok_Ident) && next_is(self, Tok_Colon)) {
        label = p_ident(self);
        expect(self, Tok_Colon);
    }
    var expr = p_expr(self, max_prec);

    return box(sizeof(CallArg), &CallArg {
        label,
        expr,
        positional_index: -1,
    }) as *mut CallArg;
}

func p_call_expr(self: *mut Parser, callee: *mut Expr): *mut Expr {
    var pos = self.tok.pos;
    expect(self, Tok_LParen);
    var args = list_new();
    while (!at_eof(self) && !at(self, Tok_RParen)) {
        var arg = p_call_arg(self, 0);
        list_push(args, arg);
        if (!at(self, Tok_RParen)) {
            expect(self, Tok_Comma);
        }
    }
    expect(self, Tok_RParen);

    return box(sizeof(CallExpr), &CallExpr {
        pos,
        type: null,
        const_value: null,
        callee,
        args,
        resolved_callee: null,
    }) as *mut Expr;
}

func p_member_expr(self: *mut Parser, left: *mut Expr): *mut Expr {
    var pos = self.tok.pos;
    expect(self, Tok_Dot);
    var name = p_ident(self);

    return box(sizeof(MemberExpr), &MemberExpr {
        pos,
        type: null,
        const_value: null,
        left,
        name,
        resolved_field: null,
    }) as *mut Expr;
}

func p_unary_expr(self: *mut Parser, op: TokKind): *mut Expr {
    var pos = self.tok.pos;
    var right = p_expr(self, Prec_Unary);

    return box(sizeof(UnaryExpr), &UnaryExpr {
        pos,
        type: null,
        const_value: null,
        op,
        right,
    }) as *mut Expr;
}

func p_cast_expr(self: *mut Parser, expr: *mut Expr): *mut Expr {
    var pos = self.tok.pos;
    var type = p_type(self);

    return box(sizeof(CastExpr), &CastExpr {
        pos,
        type: null,
        const_value: null,
        expr,
        type_expr: type,
    }) as *mut Expr;
}

func p_binary_expr(self: *mut Parser, left: *mut Expr, op: TokKind, prec: Int32): *mut Expr {
    var pos = self.tok.pos;
    var right = p_expr(self, prec);

    return box(sizeof(BinaryExpr), &BinaryExpr {
        pos,
        type: null,
        const_value: null,
        op,
        left,
        right,
    }) as *mut Expr;
}

func p_ternary_expr(self: *mut Parser, cond: *mut Expr): *mut Expr {
    var pos = self.tok.pos;
    expect(self, Tok_Question);
    var then_expr = p_expr(self, Prec_Cond);
    expect(self, Tok_Colon);
    var else_expr = p_expr(self, Prec_Cond);

    return box(sizeof(TernaryExpr), &TernaryExpr {
        pos,
        type: null,
        const_value: null,
        cond,
        then_expr,
        else_expr,
    }) as *mut Expr;
}

func p_is_expr(self: *mut Parser, left: *mut Expr): *mut Expr {
    var pattern = p_inner_pattern(self);

    return box(sizeof(IsExpr), &IsExpr {
        pos: left.pos,
        type: null,
        const_value: null,
        left,
        pattern,
    }) as *mut Expr;
}

func p_field_initializer(self: *mut Parser): *mut FieldInitializer {
    var pos = self.tok.pos;

    if (!at(self, Tok_Ident)) {
        die_at(&self.tok.pos, "Field name expected.");
    }
    var name = self.tok.lexeme;

    if (next_is(self, Tok_Colon)) {
        expect(self, Tok_Ident);
        expect(self, Tok_Colon);
    }

    var expr = p_expr(self);

    return box(sizeof(FieldInitializer), &FieldInitializer {
        pos,
        name,
        expr,
    }) as *mut FieldInitializer;
}

func p_record_expr(self: *mut Parser): *mut Expr {
    var pos = self.tok.pos;
    var name = p_ident(self);
    var field_initializers = list_new();
    expect(self, Tok_LBrace);
    while (!at_eof(self) && !at(self, Tok_RBrace)) {
        var field_initializer = p_field_initializer(self);
        list_push(field_initializers, field_initializer);
        if (!at(self, Tok_RBrace)) {
            expect(self, Tok_Comma);
        }
    }
    expect(self, Tok_RBrace);

    return box(sizeof(RecordExpr), &RecordExpr {
        pos: pos,
        type: null,
        const_value: null,
        name: name,
        fields: field_initializers,
    }) as *mut Expr;
}

func p_ident_expr(self: *mut Parser): *mut Expr {
    if (next_is(self, Tok_LBrace)) {
        return p_record_expr(self);
    } else {
        return p_name_expr(self);
    }
}

func p_expr(self: *mut Parser, max_prec: Int32 = 0): *mut Expr {
    var lhs: *mut Expr;

    if (at(self, Tok_LParen)) {
        lhs = p_grouped_expr(self);
    } else if (at(self, Tok_Ident)) {
        lhs = p_ident_expr(self);
    } else if (at(self, Tok_Null) || at(self, Tok_True) || at(self, Tok_False) || at(self, Tok_Int) || at(self, Tok_Char) || at(self, Tok_String)) {
        lhs = p_literal_expr(self);
    } else if (at(self, Tok_LBracket)) {
        lhs = p_array_expr(self);
    } else if (at(self, Tok_Sizeof)) {
        lhs = p_sizeof_expr(self);
    } else if (max_prec <= Prec_Unary && eat(self, Tok_Minus)) {
        lhs = p_unary_expr(self, Tok_Minus);
    } else if (max_prec <= Prec_Unary && eat(self, Tok_Bang)) {
        lhs = p_unary_expr(self, Tok_Bang);
    } else if (max_prec <= Prec_Unary && eat(self, Tok_Tilde)) {
        lhs = p_unary_expr(self, Tok_Tilde);
    } else if (max_prec <= Prec_Unary && eat(self, Tok_Star)) {
        lhs = p_unary_expr(self, Tok_Star);
    } else if (max_prec <= Prec_Unary && eat(self, Tok_Amp)) {
        lhs = p_unary_expr(self, Tok_Amp);
    } else {
        die_at(&self.tok.pos, "Unexpected start of expression.");
    }

    while (true) {
        if (max_prec <= Prec_Assign && eat(self, Tok_Eq)) {
            lhs = p_binary_expr(self, lhs, Tok_Eq, Prec_Assign);
        } else if (max_prec <= Prec_Assign && eat(self, Tok_PlusEq)) {
            lhs = p_binary_expr(self, lhs, Tok_PlusEq, Prec_Assign);
        } else if (max_prec <= Prec_Assign && eat(self, Tok_MinusEq)) {
            lhs = p_binary_expr(self, lhs, Tok_MinusEq, Prec_Assign);
        } else if (max_prec <= Prec_Assign && eat(self, Tok_StarEq)) {
            lhs = p_binary_expr(self, lhs, Tok_StarEq, Prec_Assign);
        } else if (max_prec <= Prec_Assign && eat(self, Tok_SlashEq)) {
            lhs = p_binary_expr(self, lhs, Tok_SlashEq, Prec_Assign);
        } else if (max_prec <= Prec_Assign && eat(self, Tok_PercentEq)) {
            lhs = p_binary_expr(self, lhs, Tok_PercentEq, Prec_Assign);
        } else if (max_prec <= Prec_Assign && eat(self, Tok_AmpEq)) {
            lhs = p_binary_expr(self, lhs, Tok_AmpEq, Prec_Assign);
        } else if (max_prec <= Prec_Assign && eat(self, Tok_BarEq)) {
            lhs = p_binary_expr(self, lhs, Tok_BarEq, Prec_Assign);
        } else if (max_prec <= Prec_Assign && eat(self, Tok_CaretEq)) {
            lhs = p_binary_expr(self, lhs, Tok_CaretEq, Prec_Assign);
        } else if (max_prec <= Prec_Assign && eat(self, Tok_LtLtEq)) {
            lhs = p_binary_expr(self, lhs, Tok_LtLtEq, Prec_Assign);
        } else if (max_prec <= Prec_Assign && eat(self, Tok_GtGtEq)) {
            lhs = p_binary_expr(self, lhs, Tok_GtGtEq, Prec_Assign);
        } else if (max_prec <= Prec_Cond && at(self, Tok_Question)) {
            lhs = p_ternary_expr(self, lhs);
        } else if (max_prec <= Prec_Or && eat(self, Tok_BarBar)) {
            lhs = p_binary_expr(self, lhs, Tok_BarBar, Prec_Or + 1);
        } else if (max_prec <= Prec_And && eat(self, Tok_AmpAmp)) {
            lhs = p_binary_expr(self, lhs, Tok_AmpAmp, Prec_And + 1);
        } else if (max_prec <= Prec_Is && eat(self, Tok_Is)) {
            lhs = p_is_expr(self, lhs);
        } else if (max_prec <= Prec_BitOr && eat(self, Tok_Bar)) {
            lhs = p_binary_expr(self, lhs, Tok_Bar, Prec_BitOr + 1);
        } else if (max_prec <= Prec_BitXor && eat(self, Tok_Caret)) {
            lhs = p_binary_expr(self, lhs, Tok_Caret, Prec_BitXor + 1);
        } else if (max_prec <= Prec_BitAnd && eat(self, Tok_Amp)) {
            lhs = p_binary_expr(self, lhs, Tok_Amp, Prec_BitAnd + 1);
        } else if (max_prec <= Prec_Cmp && eat(self, Tok_Gt)) {
            lhs = p_binary_expr(self, lhs, Tok_Gt, Prec_Cmp + 1);
        } else if (max_prec <= Prec_Cmp && eat(self, Tok_GtEq)) {
            lhs = p_binary_expr(self, lhs, Tok_GtEq, Prec_Cmp + 1);
        } else if (max_prec <= Prec_Cmp && eat(self, Tok_Lt)) {
            lhs = p_binary_expr(self, lhs, Tok_Lt, Prec_Cmp + 1);
        } else if (max_prec <= Prec_Cmp && eat(self, Tok_LtEq)) {
            lhs = p_binary_expr(self, lhs, Tok_LtEq, Prec_Cmp + 1);
        } else if (max_prec <= Prec_Cmp && eat(self, Tok_BangEq)) {
            lhs = p_binary_expr(self, lhs, Tok_BangEq, Prec_Cmp + 1);
        } else if (max_prec <= Prec_Cmp && eat(self, Tok_EqEq)) {
            lhs = p_binary_expr(self, lhs, Tok_EqEq, Prec_Cmp + 1);
        } else if (max_prec <= Prec_Shift && eat(self, Tok_GtGt)) {
            lhs = p_binary_expr(self, lhs, Tok_GtGt, Prec_Shift + 1);
        } else if (max_prec <= Prec_Shift && eat(self, Tok_LtLt)) {
            lhs = p_binary_expr(self, lhs, Tok_LtLt, Prec_Shift + 1);
        } else if (max_prec <= Prec_Add && eat(self, Tok_Minus)) {
            lhs = p_binary_expr(self, lhs, Tok_Minus, Prec_Add + 1);
        } else if (max_prec <= Prec_Add && eat(self, Tok_Plus)) {
            lhs = p_binary_expr(self, lhs, Tok_Plus, Prec_Add + 1);
        } else if (max_prec <= Prec_Mul && eat(self, Tok_Percent)) {
            lhs = p_binary_expr(self, lhs, Tok_Percent, Prec_Mul + 1);
        } else if (max_prec <= Prec_Mul && eat(self, Tok_Slash)) {
            lhs = p_binary_expr(self, lhs, Tok_Slash, Prec_Mul + 1);
        } else if (max_prec <= Prec_Mul && eat(self, Tok_Star)) {
            lhs = p_binary_expr(self, lhs, Tok_Star, Prec_Mul + 1);
        } else if (max_prec <= Prec_Cast && eat(self, Tok_As)) {
            lhs = p_cast_expr(self, lhs);
        } else if (max_prec <= Prec_Postfix && at(self, Tok_LBracket)) {
            lhs = p_index_expr(self, lhs);
        } else if (max_prec <= Prec_Postfix && at(self, Tok_LParen)) {
            lhs = p_call_expr(self, lhs);
        } else if (max_prec <= Prec_Postfix && at(self, Tok_Dot)) {
            lhs = p_member_expr(self, lhs);
        } else {
            break;
        }
    }
    return lhs;
}

//==============================================================================
//== Statements

func p_block(self: *mut Parser): *mut Stmt {
    var pos = self.tok.pos;
    expect(self, Tok_LBrace);
    var stmts = list_new();
    while (!at_eof(self) && !at(self, Tok_RBrace)) {
        var stmt = p_stmt(self);
        list_push(stmts, stmt);
    }
    expect(self, Tok_RBrace);

    return box(sizeof(BlockStmt), &BlockStmt {
        pos,
        stmts,
    }) as *mut Stmt;
}

func p_const_stmt(self: *mut Parser): *mut Stmt {
    var pos = self.tok.pos;
    var decl = p_const_decl(self) as *mut ConstDecl;

    return box(sizeof(ConstStmt), &ConstStmt {
        pos,
        decl,
    }) as *mut Stmt;
}

func p_local_stmt(self: *mut Parser): *mut Stmt {
    var pos = self.tok.pos;
    expect(self, Tok_Var);
    var name = p_ident(self);
    var type: *mut TypeExpr = null;
    if (eat(self, Tok_Colon)) {
        type = p_type(self);
    }
    var init: *mut Expr = null;
    if (eat(self, Tok_Eq)) {
        init = p_expr(self);
    }
    expect(self, Tok_Semicolon);

    return box(sizeof(LocalStmt), &LocalStmt {
        pos,
        name,
        type,
        init,
        sym: null,
    }) as *mut Stmt;
}

func p_if_stmt(self: *mut Parser): *mut Stmt {
    var pos = self.tok.pos;
    expect(self, Tok_If);
    expect(self, Tok_LParen);
    var cond = p_expr(self);
    expect(self, Tok_RParen);
    var then_stmt = p_stmt(self);
    var else_stmt: *mut Stmt = null;
    if (eat(self, Tok_Else)) {
        else_stmt = p_stmt(self);
    }

    return box(sizeof(IfStmt), &IfStmt {
        pos,
        cond,
        then_stmt,
        else_stmt,
    }) as *mut Stmt;
}

func p_match_case(self: *mut Parser): *mut MatchCase {
    expect(self, Tok_Case);
    var pattern = p_pattern(self);
    var guard: *mut Expr = null;
    if (eat(self, Tok_If)) {
        guard = p_expr(self);
    }
    expect(self, Tok_Colon);
    var body = p_stmt(self);

    return box(sizeof(MatchCase), &MatchCase {
        pattern,
        guard,
        body,
    }) as *mut MatchCase;
}

func p_match_stmt(self: *mut Parser): *mut Stmt {
    var pos = self.tok.pos;
    expect(self, Tok_Match);
    expect(self, Tok_LParen);
    var scrutinee = p_expr(self);
    expect(self, Tok_RParen);
    expect(self, Tok_LBrace);
    var cases = list_new();
    while (!eat(self, Tok_RBrace)) {
        var match_case = p_match_case(self);
        list_push(cases, match_case);
    }

    return box(sizeof(MatchStmt), &MatchStmt {
        pos,
        scrutinee,
        cases,
    }) as *mut Stmt;
}

func p_while_stmt(self: *mut Parser): *mut Stmt {
    var pos = self.tok.pos;
    expect(self, Tok_While);
    expect(self, Tok_LParen);
    var cond = p_expr(self);
    expect(self, Tok_RParen);
    var body = p_stmt(self);

    return box(sizeof(WhileStmt), &WhileStmt {
        pos,
        cond,
        body,
    }) as *mut Stmt;
}

func p_for_stmt(self: *mut Parser): *mut Stmt {
    var pos = self.tok.pos;
    expect(self, Tok_For);
    expect(self, Tok_LParen);
    var init: *mut Stmt = null;
    if (!eat(self, Tok_Semicolon)) {
        if (at(self, Tok_Var)) {
            init = p_local_stmt(self);
        } else {
            init = p_expr_stmt(self);
        }
    }
    var cond: *mut Expr = null;
    if (!at(self, Tok_Semicolon)) {
        cond = p_expr(self);
    }
    expect(self, Tok_Semicolon);
    var step: *mut Expr = null;
    if (!at(self, Tok_RParen)) {
        step = p_expr(self);
    }
    expect(self, Tok_RParen);
    var body = p_stmt(self);

    return box(sizeof(ForStmt), &ForStmt {
        pos,
        init,
        cond,
        step,
        body,
    }) as *mut Stmt;
}

func p_return_stmt(self: *mut Parser): *mut Stmt {
    var pos = self.tok.pos;
    expect(self, Tok_Return);
    var expr: *mut Expr = null;
    if (!eat(self, Tok_Semicolon)) {
        expr = p_expr(self);
        expect(self, Tok_Semicolon);
    }

    return box(sizeof(ReturnStmt), &ReturnStmt {
        pos,
        expr,
    }) as *mut Stmt;
}

func p_break_stmt(self: *mut Parser): *mut Stmt {
    var pos = self.tok.pos;
    expect(self, Tok_Break);
    expect(self, Tok_Semicolon);

    return box(sizeof(BreakStmt), &BreakStmt {
        pos,
    }) as *mut Stmt;
}

func p_continue_stmt(self: *mut Parser): *mut Stmt {
    var pos = self.tok.pos;
    expect(self, Tok_Continue);
    expect(self, Tok_Semicolon);

    return box(sizeof(ContinueStmt), &ContinueStmt {
        pos,
    }) as *mut Stmt;
}

func p_expr_stmt(self: *mut Parser): *mut Stmt {
    var pos = self.tok.pos;
    var expr = p_expr(self);
    expect(self, Tok_Semicolon);

    return box(sizeof(ExprStmt), &ExprStmt {
        pos,
        expr,
    }) as *mut Stmt;
}

func p_stmt(self: *mut Parser): *mut Stmt {
    if (at(self, Tok_LBrace)) {
        return p_block(self);
    } else if (at(self, Tok_Const)) {
        return p_const_stmt(self);
    } else if (at(self, Tok_Var)) {
        return p_local_stmt(self);
    } else if (at(self, Tok_If)) {
        return p_if_stmt(self);
    } else if (at(self, Tok_Match)) {
        return p_match_stmt(self);
    } else if (at(self, Tok_While)) {
        return p_while_stmt(self);
    } else if (at(self, Tok_For)) {
        return p_for_stmt(self);
    } else if (at(self, Tok_Return)) {
        return p_return_stmt(self);
    } else if (at(self, Tok_Break)) {
        return p_break_stmt(self);
    } else if (at(self, Tok_Continue)) {
        return p_continue_stmt(self);
    } else {
        return p_expr_stmt(self);
    }
}

//==============================================================================
//== Declarations

func p_module_name_decl(self: *mut Parser): *mut Decl {
    var pos = self.tok.pos;
    expect(self, Tok_Module);
    var name = p_ident(self);
    expect(self, Tok_Semicolon);

    return box(sizeof(ModuleNameDecl), &ModuleNameDecl {
        pos,
        name,
    }) as *mut Decl;
}

func p_import_decl(self: *mut Parser): *mut Decl {
    var pos = self.tok.pos;
    expect(self, Tok_Import);
    var string_literal = expect_with_lexeme(self, Tok_String);
    expect(self, Tok_Semicolon);

    var path = parse_string(string_literal);
    return box(sizeof(ImportDecl), &ImportDecl {
        pos,
        path,
        resolved_mod: null,
    }) as *mut Decl;
}

func p_record_field(self: *mut Parser): *mut RecordFieldDecl {
    var pos = self.tok.pos;
    var name = p_ident(self);
    var type: *mut TypeExpr = null;
    if (eat(self, Tok_Colon)) {
        type = p_type(self);
    }
    var default_value: *mut Expr = null;
    if (eat(self, Tok_Eq)) {
        default_value = p_expr(self);
    }

    return box(sizeof(RecordFieldDecl), &RecordFieldDecl {
        pos,
        name,
        default_value,
        type,
    }) as *mut RecordFieldDecl;
}

func p_record_decl(self: *mut Parser): *mut Decl {
    var pos = self.tok.pos;
    var is_union = at(self, Tok_Union);
    if (!is_union) {
        expect(self, Tok_Struct);
    } else {
        expect(self, Tok_Union);
    }
    var name = p_ident(self);
    var base: *mut TypeExpr = null;
    if (eat(self, Tok_Colon)) {
        base = p_type(self);
    }
    var body: *mut List;
    if (eat(self, Tok_LBrace)) {
        body = list_new();
        while (!at_eof(self) && !at(self, Tok_RBrace)) {
            var field = p_record_field(self);
            list_push(body, field);
            if (!at(self, Tok_RBrace)) {
                expect(self, Tok_Comma);
            }
        }
        expect(self, Tok_RBrace);
    } else {
        body = null;
        expect(self, Tok_Semicolon);
    }

    return box(sizeof(RecordDecl), &RecordDecl {
        pos,
        is_union,
        name,
        base,
        fields: body,
        sym: null,
    }) as *mut Decl;
}

func p_param(self: *mut Parser): *mut FuncParamDecl {
    var pos = self.tok.pos;
    var name = p_ident(self);
    expect(self, Tok_Colon);
    var type = p_type(self);
    var default_value: *mut Expr = null;
    if (eat(self, Tok_Eq)) {
        default_value = p_expr(self);
    }

    return box(sizeof(FuncParamDecl), &FuncParamDecl {
        pos,
        name,
        type,
        default_value,
    }) as *mut FuncParamDecl;
}

func p_rest_param(self: *mut Parser): *mut RestParamDecl {
    var pos = self.tok.pos;
    expect(self, Tok_DotDotDot);
    var name: *Char = null;
    if (at(self, Tok_Ident)) {
        name = p_ident(self);
    }

    return box(sizeof(RestParamDecl), &RestParamDecl {
        pos,
        name,
    }) as *mut RestParamDecl;
}

func p_func_decl(self: *mut Parser, is_extern: Bool): *mut Decl {
    var pos = self.tok.pos;
    expect(self, Tok_Func);
    var name = p_ident(self);
    var params = list_new();
    expect(self, Tok_LParen);
    while (!at_eof(self) && !at(self, Tok_RParen) && !at(self, Tok_DotDotDot)) {
        var param = p_param(self);
        list_push(params, param);
        if (!at(self, Tok_RParen)) {
            expect(self, Tok_Comma);
        }
    }
    var rest_param: *mut RestParamDecl = null;
    if (at(self, Tok_DotDotDot)) {
        rest_param = p_rest_param(self);
    }
    expect(self, Tok_RParen);
    var return_type: *mut TypeExpr = null;
    if (eat(self, Tok_Colon)) {
        return_type = p_type(self);
    }
    var body: *mut Stmt = null;
    if (at(self, Tok_LBrace)) {
        body = p_stmt(self);
    } else {
        expect(self, Tok_Semicolon);
    }

    return box(sizeof(FuncDecl), &FuncDecl {
        pos,
        is_extern,
        name,
        params,
        rest_param,
        return_type,
        body,
        sym: null,
    }) as *mut Decl;
}

func p_enum_member(self: *mut Parser): *mut EnumMember {
    var pos = self.tok.pos;
    var name = p_ident(self);
    var value: *mut Expr = null;
    if (eat(self, Tok_Eq)) {
        value = p_expr(self);
    }

    return box(sizeof(EnumMember), &EnumMember {
        pos,
        name,
        value,
        sym: null,
    }) as *mut EnumMember;
}

func p_enum_decl(self: *mut Parser): *mut Decl {
    var pos = self.tok.pos;
    expect(self, Tok_Enum);
    var name: *Char = null;
    if (at(self, Tok_Ident)) {
        name = p_ident(self);
    }
    expect(self, Tok_LBrace);
    var members = list_new();
    while (!at_eof(self) && !at(self, Tok_RBrace)) {
        var member = p_enum_member(self);
        list_push(members, member);
        if (!at(self, Tok_RBrace)) {
            expect(self, Tok_Comma);
        }
    }
    expect(self, Tok_RBrace);

    return box(sizeof(EnumDecl), &EnumDecl {
        pos,
        name,
        members,
        sym: null,
    }) as *mut Decl;
}

func p_const_decl(self: *mut Parser): *mut Decl {
    var pos = self.tok.pos;
    expect(self, Tok_Const);
    var name = p_ident(self);
    var type: *mut TypeExpr = null;
    if (eat(self, Tok_Colon)) {
        type = p_type(self);
    }
    expect(self, Tok_Eq);
    var value = p_expr(self);
    expect(self, Tok_Semicolon);

    return box(sizeof(ConstDecl), &ConstDecl {
        pos,
        name,
        type,
        value,
        sym: null,
    }) as *mut Decl;
}

func p_global_decl(self: *mut Parser, is_extern: Bool): *mut Decl {
    var pos = self.tok.pos;
    expect(self, Tok_Var);
    var name = p_ident(self);
    expect(self, Tok_Colon);
    var type = p_type(self);
    expect(self, Tok_Semicolon);

    return box(sizeof(GlobalDecl), &GlobalDecl {
        pos,
        is_extern,
        name,
        type,
        sym: null,
    }) as *mut Decl;
}

func p_decl_decl(self: *mut Parser): *mut Decl {
    match (self.tok.kind) {
        case Tok_Module: {
            return p_module_name_decl(self);
        }
        case Tok_Import: {
            return p_import_decl(self);
        }
        case Tok_Struct | Tok_Union: {
            return p_record_decl(self);
        }
        case Tok_Func: {
            return p_func_decl(self, false);
        }
        case Tok_Enum: {
            return p_enum_decl(self);
        }
        case Tok_Const: {
            return p_const_decl(self);
        }
        case Tok_Var: {
            return p_global_decl(self, false);
        }
        case Tok_Extern: {
            advance(self);
            if (at(self, Tok_Func)) {
                return p_func_decl(self, true);
            } else if (at(self, Tok_Var)) {
                return p_global_decl(self, true);
            } else {
                die_at(&self.tok.pos, "Expected extern function or variable declaration.");
            }
        }
        case _: {
            die_at(&self.tok.pos, "Unexpected token.");
        }
    }
}

func parse_file(self: *mut Parser, decls: *mut List) {
    while (!at_eof(self)) {
        list_push(decls, p_decl_decl(self));
    }
}

func parser_run(self: *mut Parser): *mut Ast {
    var decls = list_new();
    parse_file(self, decls);
    return box(sizeof(Ast), &Ast {
        file: self.tok.pos.file,
        decls,
    }) as *mut Ast;
}

func parse(file_name: *Char): *mut Ast {
    var file = fopen(file_name, "r");
    if (!file) {
        perror("fopen");
        exit(1);
    }
    var text = read_file(file);
    var lexer = lexer_new(file_name, text);
    var parser = parser_new(lexer);
    return parser_run(parser);
}
