module asm;

import "../support/libc";
import "../support/utils";

/// Note: [Frame layout]
/// ~~~~~~~~~~~~~~~~~~~~
/// The code generator organizes the stack frame as follows:
/// ```
/// +-------------------+
/// |                   |
/// | spills            |
/// |                   |
/// +-------------------+ <- FP
/// | saved x8          |
/// +-------------------+
/// |                   |
/// | saved varargs     |
/// |                   |
/// +-------------------+
/// |                   |
/// | slots             |
/// |                   |
/// +-------------------+
/// |                   |
/// | scratch           |
/// |                   |
/// +-------------------+
/// |                   |
/// | outgoing args     |
/// |                   |
/// +-------------------+ <- SP
/// ```

enum Reg {
    Reg_X0, Reg_X1, Reg_X2, Reg_X3, Reg_X4, Reg_X5, Reg_X6, Reg_X7, Reg_X8,
    Reg_X9, Reg_X10, Reg_X11, Reg_X12, Reg_X13, Reg_X14, Reg_X15,
    Reg_X16, Reg_X17, Reg_X18, Reg_X19, Reg_X20, Reg_X21, Reg_X22, Reg_X23, Reg_X24,
    Reg_X25, Reg_X26, Reg_X27, Reg_X28, Reg_X29, Reg_X30, Reg_X31,
    FP = Reg_X29, LR = Reg_X30, SP = Reg_X31,
}

const N_REGS = 32;
const N_CALLEE_SAVED_REGS = Reg_X28 - Reg_X19 + 1;

struct FrameLayout {
    total_size: Int,
    spills_size: Int,
    varargs_offset: Int,
    varargs_size: Int,
    slots_offset: Int,
    slots_size: Int,
    scratch_offset: Int,
    scratch_size: Int,
}

struct AsmInstrBuilder;

struct AsmFunc {
    name: *Char,
    builder: *mut AsmInstrBuilder,
    frame_layout: FrameLayout,
    n_spills: Int,
    spills: [Reg; N_REGS],
}

enum FrameOffsetKind {
    FrameStartOffset,
    FpOffset,
    SlotsOffset,
    ScratchOffset,
    SpOffset,
}

enum AsmOperandKind {
    AsmOperand_Reg,
    AsmOperand_Mem,
    AsmOperand_Int,
    AsmOperand_Label,
    AsmOperand_Global,
    AsmOperand_FpFromPoint,
    AsmOperand_SpFromPoint,
    AsmOperand_Raw,
}

struct AsmOperandBase {
    kind: AsmOperandKind,
}

// e.g. x0
struct AsmRegOperand: AsmOperandBase {
    kind = AsmOperand_Reg,
    width: Int,
    reg: Reg,
    shift: Int = 0,
}

// e.g. [x0]
// e.g. [x0, #42]
struct AsmMemOperand: AsmOperandBase {
    kind = AsmOperand_Mem,
    n_args: Int,
    args: *mut AsmOperand,
}

// e.g. #42
// e.g. #1, lsl 16
struct AsmIntOperand: AsmOperandBase {
    kind = AsmOperand_Int,
    value: Int,
    shift: Int = 0,
}

// e.g. .L0
struct AsmLabelOperand: AsmOperandBase {
    kind = AsmOperand_Label,
    counter: Int, // Only used for auto-generated labels
    suffix: *Char,
}

// e.g. :got:my_global
// e.g. str3
struct AsmGlobalOperand: AsmOperandBase {
    kind = AsmOperand_Global,
    relocation_spec: *Char, // :lo12, :got, :got_lo12
    prefix: *Char,
    counter: Int, // Only used for strings
}

struct AsmFpFromPointOperand: AsmOperandBase {
    kind = AsmOperand_FpFromPoint,
    offset_kind: FrameOffsetKind,
    offset: Int,
}

struct AsmSpFromPointOperand: AsmOperandBase {
    kind = AsmOperand_SpFromPoint,
    offset_kind: FrameOffsetKind,
    offset: Int,
}

struct AsmRawOperand: AsmOperandBase {
    kind = AsmOperand_Raw,
    op: *Char,
}

union AsmOperand: AsmOperandBase {
    Reg: AsmRegOperand,
    Mem: AsmMemOperand,
    Int: AsmIntOperand,
    Label: AsmLabelOperand,
    Global: AsmGlobalOperand,
    FpFromPoint: AsmFpFromPointOperand,
    SpFromPoint: AsmSpFromPointOperand,
    Raw: AsmRawOperand,
}

struct AsmInstr {
    op: *Char,
    n_args: Int,
    args: *mut AsmOperand,
    comment: *Char = null,
}

struct AsmInstrBuilder {
    instrs: *mut List,
}

func reg_width_from_size(size: Int): Int {
    return size < 8 ? 4 : 8;
}

func asm_mk_reg_operand(width: Int, reg: Reg, shift: Int = 0): AsmRegOperand {
    return AsmRegOperand {
        width: width,
        reg: reg,
        shift: shift,
    };
}

func asm_mk_int_operand(value: Int): AsmIntOperand {
    return AsmIntOperand {
        value: value,
    };
}

func asm_mk_label_operand(counter: Int, suffix: *Char): AsmLabelOperand {
    return AsmLabelOperand {
        counter: counter,
        suffix: suffix,
    };
}

func asm_mk_global_operand(relocation_spec: *Char, prefix: *Char, suffix: Int): AsmGlobalOperand {
    return AsmGlobalOperand {
        relocation_spec: relocation_spec,
        prefix: prefix,
        counter: suffix,
    };
}

func asm_mk_fp_from_point_operand(offset_kind: FrameOffsetKind, offset: Int): AsmFpFromPointOperand {
    return AsmFpFromPointOperand {
        offset_kind: offset_kind,
        offset: offset,
    };
}

func asm_mk_sp_from_point_operand(offset_kind: FrameOffsetKind, offset: Int): AsmSpFromPointOperand {
    return AsmSpFromPointOperand {
        offset_kind: offset_kind,
        offset: offset,
    };
}

func asm_mk_raw_operand(op: *Char): AsmRawOperand {
    return AsmRawOperand {
        op: op,
    };
}

func asm_mk_mem_operand(n_args: Int): AsmMemOperand {
    return AsmMemOperand {
        n_args: n_args,
        args: calloc(n_args, sizeof(AsmOperand)) as *mut AsmOperand,
    };
}

func asm_mk_reg_mem_operand(reg: Reg, offset: Int): AsmMemOperand {
    var operand = asm_mk_mem_operand(offset != 0 ? 2 : 1);
    operand.args[0] = asm_mk_reg_operand(8, reg);
    if (offset != 0) {
        operand.args[1] = asm_mk_int_operand(offset);
    }
    return operand;
}

func asm_mk_fp_from_point_mem_operand(offset_kind: FrameOffsetKind, offset: Int): AsmMemOperand {
    var operand = asm_mk_mem_operand(2);
    operand.args[0] = asm_mk_reg_operand(8, FP);
    operand.args[1] = asm_mk_fp_from_point_operand(offset_kind, offset);
    return operand;
}

func asm_mk_sp_from_point_mem_operand(offset_kind: FrameOffsetKind, offset: Int): AsmMemOperand {
    var operand = asm_mk_mem_operand(2);
    operand.args[0] = asm_mk_reg_operand(8, SP);
    operand.args[1] = asm_mk_sp_from_point_operand(offset_kind, offset);
    return operand;
}

func asm_mk_instr(op: *Char, n_args: Int): *mut AsmInstr {
    return box(sizeof(AsmInstr), &AsmInstr {
        op: op,
        n_args: n_args,
        args: calloc(n_args, sizeof(AsmOperand)) as *mut AsmOperand,
    }) as *mut AsmInstr;
}

//==============================================================================
//== Instruction building

// Creates a new assembly instruction builder
func asm_builder_new(): *mut AsmInstrBuilder {
    return box(sizeof(AsmInstrBuilder), &AsmInstrBuilder {
        instrs: list_new(),
    }) as *mut AsmInstrBuilder;
}

// Writes an instruction to the builder with the specified operation and number of arguments
func asm_write_instr(builder: *mut AsmInstrBuilder, op: *Char, n_args: Int): *mut AsmInstr {
    var instr = asm_mk_instr(op, n_args);
    list_push(builder.instrs, instr);
    return instr;
}

// Data Movement

// Returns the appropriate load operation based on width
func asm_get_load_op(width: Int): *Char {
    match (width) {
        case 1: return "ldrsb";
        case 2: return "ldrsh";
        case 4: return "ldrsw";
        case _: return "ldr";
    }
}

// Returns the appropriate store operation based on width
func asm_get_store_op(width: Int): *Char {
    match (width) {
        case 1: return "strb";
        case 2: return "strh";
        case _: return "str";
    }
}

// mov {xd}, {x1}
func asm_write_mov_r(builder: *mut AsmInstrBuilder, width: Int, xd: Reg, x1: Reg) {
    var instr = asm_write_instr(builder, "mov", n_args: 2);
    instr.args[0] = asm_mk_reg_operand(width, xd);
    instr.args[1] = asm_mk_reg_operand(width, x1);
}

// mov {xd}, #{value}
// movz {xd}, #{value & 0xffff}
// ...
// movk {xd}, #{value >> 48}, lsl 48
func asm_write_mov_i(builder: *mut AsmInstrBuilder, width: Int, xd: Reg, value: Int) {
    if (value == 0) {
        var instr = asm_write_instr(builder, "mov", n_args: 2);
        instr.args[0] = asm_mk_reg_operand(width, xd);
        instr.args[1] = asm_mk_int_operand(0);
        return;
    }

    var MASK_16 = (1 << 16) - 1;

    var n_gen = 0;
    for (var i = 0; i < 4; i += 1) {
        var lo16 = value & MASK_16;

        if (lo16 != 0 || i == 3 && n_gen == 0) {
            var op = n_gen == 0 ? "movz" : "movk";

            var instr = asm_write_instr(builder, op, n_args: 2);
            instr.args[0] = asm_mk_reg_operand(8, xd);
            instr.args[1] = asm_mk_int_operand(lo16);
            instr.args[1].Int.shift = i * 16;

            n_gen += 1;
        }

        value >>= 16;
    }

    assert(n_gen > 0, "asm_write_mov_i: should generate at least one instruction.");
}

// Helper function for load instructions
func asm_write_ldrs(builder: *mut AsmInstrBuilder, width: Int, dst: AsmOperand, src: AsmOperand) {
    var op = asm_get_load_op(width);
    var instr = asm_write_instr(builder, op, n_args: 2);
    instr.args[0] = dst;
    instr.args[1] = src;
}

// ldr {xd}, [{xs}, #{offset}]
func asm_write_ldrs_ri(builder: *mut AsmInstrBuilder, width: Int, xd: Reg, xs: Reg, offset: Int) {
    var dst_operand = asm_mk_reg_operand(8, xd);
    var src_operand = asm_mk_reg_mem_operand(xs, offset);
    asm_write_ldrs(builder, width, dst_operand, src_operand);
}

// ldr {xd}, [{xs}]
func asm_write_ldrs_r(builder: *mut AsmInstrBuilder, width: Int, xd: Reg, xs: Reg) {
    asm_write_ldrs_ri(builder, width, xd, xs, 0);
}

// ldr {xd}, [fp, #{???}]
func asm_write_ldrs_r_fp_from_point(builder: *mut AsmInstrBuilder, offset_kind: FrameOffsetKind, width: Int, xd: Reg, offset: Int) {
    var dst_operand = asm_mk_reg_operand(8, xd);
    var src_operand = asm_mk_fp_from_point_mem_operand(offset_kind, offset);
    asm_write_ldrs(builder, width, dst_operand, src_operand);
}

// ldr {xd}, [sp, #{???}]
func asm_write_ldrs_r_sp_from_point(builder: *mut AsmInstrBuilder, offset_kind: FrameOffsetKind, width: Int, xd: Reg, offset: Int) {
    var dst_operand = asm_mk_reg_operand(8, xd);
    var src_operand = asm_mk_sp_from_point_mem_operand(offset_kind, offset);
    asm_write_ldrs(builder, width, dst_operand, src_operand);
}

// Helper function for store instructions
func asm_write_str(builder: *mut AsmInstrBuilder, width: Int, src: AsmOperand, dst: AsmOperand) {
    var op = asm_get_store_op(width);
    var instr = asm_write_instr(builder, op, n_args: 2);
    instr.args[0] = src;
    instr.args[1] = dst;
}

// str {xs}, [{xd}, #{offset}]
func asm_write_str_ri(builder: *mut AsmInstrBuilder, width: Int, xs: Reg, xd: Reg, offset: Int) {
    var src_width = reg_width_from_size(width);
    var src_operand = asm_mk_reg_operand(src_width, xs);
    var dst_operand = asm_mk_reg_mem_operand(xd, offset);
    asm_write_str(builder, width, src_operand, dst_operand);
}

// str {xs}, [{xd}]
func asm_write_str_r(builder: *mut AsmInstrBuilder, width: Int, xs: Reg, xd: Reg) {
    asm_write_str_ri(builder, width, xs, xd, 0);
}

// str {xs}, [sp, #{???}]
func asm_write_str_r_sp_from_point(builder: *mut AsmInstrBuilder, offset_kind: FrameOffsetKind, width: Int, xs: Reg, offset: Int) {
    var src_width = reg_width_from_size(width);
    var src_operand = asm_mk_reg_operand(src_width, xs);
    var dst_operand = asm_mk_sp_from_point_mem_operand(offset_kind, offset);
    asm_write_str(builder, width, src_operand, dst_operand);
}

// str {xs}, [fp, #{???}]
func asm_write_str_r_fp_from_point(builder: *mut AsmInstrBuilder, offset_kind: FrameOffsetKind, width: Int, xs: Reg, offset: Int) {
    var src_width = reg_width_from_size(width);
    var src_operand = asm_mk_reg_operand(src_width, xs);
    var dst_operand = asm_mk_fp_from_point_mem_operand(offset_kind, offset);
    asm_write_str(builder, width, src_operand, dst_operand);
}

// Arithmetic, Logic and Comparison

// sxt {xd}, {x1}
func asm_write_sxt(builder: *mut AsmInstrBuilder, dst_size: Int, src_size: Int, xd: Reg, x1: Reg) {
    var op =
        src_size == 1 ? "sxtb" :
        src_size == 2 ? "sxth" :
        "sxtw";

    var dst_width = reg_width_from_size(dst_size);
    var src_width = reg_width_from_size(src_size);

    var instr = asm_write_instr(builder, op, n_args: 2);
    instr.args[0] = asm_mk_reg_operand(dst_width, xd);
    instr.args[1] = asm_mk_reg_operand(src_width, x1);
}

// {op} {xd}, {x1}, {x2}
func asm_write_binary_op_rr(builder: *mut AsmInstrBuilder, op: *Char, xd: Reg, x1: Reg, x2: Reg) {
    var instr = asm_write_instr(builder, op, n_args: 3);
    instr.args[0] = asm_mk_reg_operand(8, xd);
    instr.args[1] = asm_mk_reg_operand(8, x1);
    instr.args[2] = asm_mk_reg_operand(8, x2);
}

// {op} {xd}, {x1}, #{imm}
func asm_write_binary_op_ri(builder: *mut AsmInstrBuilder, op: *Char, xd: Reg, x1: Reg, imm: Int) {
    var instr = asm_write_instr(builder, op, n_args: 3);
    instr.args[0] = asm_mk_reg_operand(8, xd);
    instr.args[1] = asm_mk_reg_operand(8, x1);
    instr.args[2] = asm_mk_int_operand(imm);
}

// {op} {xd}, {x1}, {x2}, {x3}
func asm_write_binary_op_rrr(builder: *mut AsmInstrBuilder, op: *Char, xd: Reg, x1: Reg, x2: Reg, x3: Reg) {
    var instr = asm_write_instr(builder, op, n_args: 4);
    instr.args[0] = asm_mk_reg_operand(8, xd);
    instr.args[1] = asm_mk_reg_operand(8, x1);
    instr.args[2] = asm_mk_reg_operand(8, x2);
    instr.args[3] = asm_mk_reg_operand(8, x3);
}

// add {xd}, {x1}, #{imm}
func asm_write_add_ri(builder: *mut AsmInstrBuilder, width: Int, xd: Reg, x1: Reg, imm: Int) {
    asm_write_binary_op_ri(builder, "add", xd, x1, imm);
}

// add {xd}, fp, #{???}
func asm_write_add_r_fp_from_point(builder: *mut AsmInstrBuilder, offset_kind: FrameOffsetKind, width: Int, xd: Reg, offset: Int) {
    var instr = asm_write_instr(builder, "add", n_args: 3);
    instr.args[0] = asm_mk_reg_operand(8, xd);
    instr.args[1] = asm_mk_reg_operand(8, FP);
    instr.args[2] = asm_mk_fp_from_point_operand(offset_kind, offset);
}

// add {xd}, {x1}, {x2}
func asm_write_add_rr(builder: *mut AsmInstrBuilder, width: Int, xd: Reg, x1: Reg, x2: Reg) {
    asm_write_binary_op_rr(builder, "add", xd, x1, x2);
}

// cmp {xd}, {x1}
func asm_write_cmp_rr(builder: *mut AsmInstrBuilder, width: Int, xd: Reg, x1: Reg) {
    var instr = asm_write_instr(builder, "cmp", n_args: 2);
    instr.args[0] = asm_mk_reg_operand(8, xd);
    instr.args[1] = asm_mk_reg_operand(8, x1);
}

// cset {xd}, {op}
func asm_write_cset(builder: *mut AsmInstrBuilder, width: Int, xd: Reg, op: *Char) {
    var instr = asm_write_instr(builder, "cset", n_args: 2);
    instr.args[0] = asm_mk_reg_operand(8, xd);
    instr.args[1] = asm_mk_raw_operand(op);
}

// Control Flow

// cbz {xd}, {label}
func asm_write_cbz(builder: *mut AsmInstrBuilder, xd: Reg, counter: Int, label_suffix: *Char) {
    var instr = asm_write_instr(builder, "cbz", n_args: 2);
    instr.args[0] = asm_mk_reg_operand(8, xd);
    instr.args[1] = asm_mk_label_operand(counter, label_suffix);
}

// b {label}
func asm_write_b(builder: *mut AsmInstrBuilder, counter: Int, suffix: *Char) {
    var instr = asm_write_instr(builder, "b", n_args: 1);
    instr.args[0] = asm_mk_label_operand(counter, suffix);
}

// bl {name}
func asm_write_bl(builder: *mut AsmInstrBuilder, name: *Char) {
    var instr = asm_write_instr(builder, "bl", n_args: 1);
    instr.args[0] = asm_mk_global_operand("", name, -1);
}

// Addressing

// addrp {xd}, {name}
// add {xd}, {xd}, :lo12:{name}
func asm_write_global_addr(builder: *mut AsmInstrBuilder, xd: Reg, name: *Char) {
    var addrp_instr = asm_write_instr(builder, "adrp", n_args: 2);
    addrp_instr.args[0] = asm_mk_reg_operand(8, xd);
    addrp_instr.args[1] = asm_mk_global_operand("", name, -1);

    var instr = asm_write_instr(builder, "add", n_args: 3);
    instr.args[0] = asm_mk_reg_operand(8, xd);
    instr.args[1] = asm_mk_reg_operand(8, xd);
    instr.args[2] = asm_mk_global_operand(":lo12:", name, -1);
}

// addrp {xd}, :got:{name}
// ldr {xd}, [{xd}, :got_lo12:{name}]
func asm_write_got_global_addr(builder: *mut AsmInstrBuilder, xd: Reg, name: *Char) {
    var addrp_instr = asm_write_instr(builder, "adrp", n_args: 2);
    addrp_instr.args[0] = asm_mk_reg_operand(8, xd);
    addrp_instr.args[1] = asm_mk_global_operand(":got:", name, -1);

    var mem_operand = asm_mk_mem_operand(2);
    mem_operand.args[0] = asm_mk_reg_operand(8, xd);
    mem_operand.args[1] = asm_mk_global_operand(":got_lo12:", name, -1);

    var ldr_instr = asm_write_instr(builder, "ldr", n_args: 2);
    ldr_instr.args[0] = asm_mk_reg_operand(8, xd);
    ldr_instr.args[1] = mem_operand;
}

// addrp {xd}, str{id}
// add {xd}, {xd}, :lo12:str{id}
func asm_write_string_addr(builder: *mut AsmInstrBuilder, xd: Reg, id: Int) {
    var addrp_instr = asm_write_instr(builder, "adrp", n_args: 2);
    addrp_instr.args[0] = asm_mk_reg_operand(8, xd);
    addrp_instr.args[1] = asm_mk_global_operand("", ".L.str.", id);

    var add_instr = asm_write_instr(builder, "add", n_args: 3);
    add_instr.args[0] = asm_mk_reg_operand(8, xd);
    add_instr.args[1] = asm_mk_reg_operand(8, xd);
    add_instr.args[2] = asm_mk_global_operand(":lo12:", ".L.str.", id);
}

// Miscellaneous

// .L{counter}.{suffix}:
func asm_write_label(builder: *mut AsmInstrBuilder, counter: Int, suffix: *Char) {
    var instr = asm_write_instr(builder, op: null, n_args: 1);
    instr.args[0] = asm_mk_label_operand(counter, suffix);
}

// {raw}
func asm_write_raw(builder: *mut AsmInstrBuilder, raw: *Char) {
    asm_write_instr(builder, raw, n_args: 0);
}

// // {comment}
func asm_write_comment(builder: *mut AsmInstrBuilder, fmt: *Char, ...args) {
    var sb = sb_new();
    sb_printf(sb, "// ");
    sb_vprintf(sb, fmt, args);
    var text = sb_finish(sb);
    asm_write_raw(builder, text);
}

// \b // {comment}
func asm_add_comment_to_last(builder: *mut AsmInstrBuilder, fmt: *Char, ...args) {
    var sb = sb_new();
    sb_printf(sb, "// ");
    sb_vprintf(sb, fmt, args);
    var text = sb_finish(sb);

    var list = builder.instrs;
    var instr = list_get(list, list_len(list) - 1) as *mut AsmInstr;
    instr.comment = text;
}

//==============================================================================
//== Printing Assembly

func asm_print_reg(out: *mut File, reg: Reg, width: Int) {
    if (reg == SP) {
        fprintf(out, "sp");
    } else {
        if (width == 4) {
            fprintf(out, "w%d", reg);
        } else {
            fprintf(out, "x%d", reg);
        }
    }
}

func asm_print_operand(out: *mut File, fun: *AsmFunc, operand: *mut AsmOperand) {
    match (operand.kind) {
        case AsmOperand_Reg: {
            var operand = &operand.Reg;
            asm_print_reg(out, operand.reg, operand.width);
            if (operand.shift != 0) {
                fprintf(out, ", lsl #%d", operand.shift);
            }
        }
        case AsmOperand_Mem: {
            var operand = &operand.Mem;
            fprintf(out, "[");
            for (var i = 0; i < operand.n_args; i += 1) {
                asm_print_operand(out, fun, &operand.args[i]);
                if (i < operand.n_args - 1) {
                    fprintf(out, ", ");
                }
            }
            fprintf(out, "]");
        }
        case AsmOperand_Int: {
            var operand = &operand.Int;
            fprintf(out, "#%d", operand.value);
            if (operand.shift != 0) {
                fprintf(out, ", lsl #%d", operand.shift);
            }
        }
        case AsmOperand_Label: {
            var operand = &operand.Label;
            fprintf(out, ".L%d", operand.counter);
            if (operand.suffix != null) {
                fprintf(out, ".%s", operand.suffix);
            }
        }
        case AsmOperand_Global: {
            var operand = &operand.Global;
            fprintf(out, "%s%s", operand.relocation_spec, operand.prefix);
            if (operand.counter != -1) {
                fprintf(out, "%d", operand.counter);
            }
        }
        case AsmOperand_FpFromPoint: {
            var operand = &operand.FpFromPoint;
            var layout = &fun.frame_layout;
            var sp_from_fp_offset = -layout.total_size + layout.spills_size;
            match (operand.offset_kind) {
                case FrameStartOffset: {
                    fprintf(out, "#%d", layout.spills_size + operand.offset);
                }
                case FpOffset: {
                    fprintf(out, "#%d", operand.offset);
                }
                case SlotsOffset: {
                    fprintf(out, "#%d", layout.slots_offset + operand.offset);
                }
                case ScratchOffset: {
                    fprintf(out, "#%d", layout.scratch_offset + operand.offset);
                }
                case SpOffset: {
                    fprintf(out, "#%d", sp_from_fp_offset + operand.offset);
                }
            }
        }
        case AsmOperand_SpFromPoint: {
            var operand = &operand.SpFromPoint;
            var layout = &fun.frame_layout;
            var fp_from_sp_offset = layout.total_size - layout.spills_size;
            match (operand.offset_kind) {
                case FrameStartOffset: {
                    fprintf(out, "#%d", fp_from_sp_offset + layout.spills_size + operand.offset);
                }
                case FpOffset: {
                    fprintf(out, "#%d", fp_from_sp_offset + operand.offset);
                }
                case SlotsOffset: {
                    fprintf(out, "#%d", fp_from_sp_offset + layout.slots_offset + operand.offset);
                }
                case ScratchOffset: {
                    fprintf(out, "#%d", fp_from_sp_offset + layout.scratch_offset + operand.offset);
                }
                case SpOffset: {
                    fprintf(out, "#%d", operand.offset);
                }
            }
        }
        case AsmOperand_Raw: {
            var operand = &operand.Raw;
            fprintf(out, "%s", operand.op);
        }
    }
}

func asm_print_instr(out: *mut File, fun: *AsmFunc, instr: *mut AsmInstr) {
    // special case for labels:
    if (instr.op == null) {
        asm_print_operand(out, fun, &instr.args[0]);
        fprintf(out, ":\n");
        return;
    }

    fprintf(out, "  %s", instr.op);

    for (var i = 0; i < instr.n_args; i += 1) {
        if (i == 0) {
            fprintf(out, " ");
        } else {
            fprintf(out, ", ");
        }
        asm_print_operand(out, fun, &instr.args[i]);
    }

    if (instr.comment != null) {
        fprintf(out, "  %s", instr.comment);
    }

    fprintf(out, "\n");
}

func asm_print_func(out: *mut File, fun: *AsmFunc) {
    var n_spills = fun.n_spills;
    var spills = fun.spills;
    var spills_size = fun.frame_layout.spills_size;

    fprintf(out, "  .text\n");
    fprintf(out, "  .align 2\n");
    fprintf(out, "  .global %s\n", fun.name);
    fprintf(out, "%s:\n", fun.name);

    // prologue
    fprintf(out, "  // prologue\n");
    fprintf(out, "  sub  sp, sp, #%d\n", spills_size);
    for (var i = 0; i < n_spills; i += 2) {
        if (i + 1 < n_spills) {
            fprintf(out, "  stp  x%d, x%d, [sp, #%d]\n", spills[i], spills[i + 1], i * 8);
        } else {
            fprintf(out, "  str  x%d, [sp, #%d]\n", spills[i], i * 8);
        }
    }
    fprintf(out, "  mov  x29, sp\n");
    fprintf(out, "  sub  sp, sp, #%d\n", fun.frame_layout.total_size - spills_size);

    var instrs = fun.builder.instrs;
    var n_instrs = list_len(instrs);
    for (var i = 0; i < n_instrs; i += 1) {
        var instr = list_get(instrs, i) as *mut AsmInstr;
        asm_print_instr(out, fun, instr);
    }

    // epilogue
    fprintf(out, "  // epilogue\n");
    fprintf(out, "  add  sp, sp, #%d\n", fun.frame_layout.total_size - spills_size);
    for (var i = 0; i < n_spills; i += 2) {
        if (i + 1 < n_spills) {
            fprintf(out, "  ldp  x%d, x%d, [sp, #%d]\n", spills[i], spills[i + 1], i * 8);
        } else {
            fprintf(out, "  ldr  x%d, [sp, #%d]\n", spills[i], i * 8);
        }
    }
    fprintf(out, "  add  sp, sp, #%d\n", spills_size);
    fprintf(out, "  ret\n");
}

func asm_print_global(out: *mut File, name: *Char, size: Int, align: Int) {
    fprintf(out, "  .global %s\n", name);
    fprintf(out, "  .bss\n");
    fprintf(out, "  .align %d\n", align);
    fprintf(out, "%s:\n", name);
    fprintf(out, "  .zero %d\n", size);
}

func asm_print_string(out: *mut File, id: Int, str: *StringBuffer) {
    fprintf(out, "  .text\n");
    fprintf(out, "  .section .rodata\n");
    fprintf(out, "  .align 3\n");
    fprintf(out, ".L.str.%d:\n", id);
    fprintf(out, "  .string \"");
    var i = 0;
    for (var i = 0; i < sb_len(str); i += 1) {
        var c = sb_get(str, i);
        if (!is_print(c) || c is ('\"' | '\\')) {
            fprintf(out, "\\%03o", c);
        } else {
            fprintf(out, "%c", c);
        }
    }
    fprintf(out, "\"\n");
}
