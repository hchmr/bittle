include "bittle.btls";

func pretty_tok_kind(kind: TokKind): *Char {
    match (kind) {
        case Tok_Eof: return "<eof>";
        // Identifier
        case Tok_Ident: return "identifier";
        // Literals
        case Tok_Int: return "integer";
        case Tok_String: return "string";
        case Tok_Char: return "character";
        // Keywords
        case Tok_As: return "'as'";
        case Tok_Break: return "'break'";
        case Tok_Case: return "'case'";
        case Tok_Const: return "'const'";
        case Tok_Continue: return "'continue'";
        case Tok_Else: return "'else'";
        case Tok_Enum: return "'enum'";
        case Tok_Extern: return "'extern'";
        case Tok_False: return "'false'";
        case Tok_For: return "'for'";
        case Tok_Func: return "'func'";
        case Tok_If: return "'if'";
        case Tok_Is: return "'is'";
        case Tok_Include: return "'include'";
        case Tok_Match: return "'match'";
        case Tok_Null: return "'null'";
        case Tok_Return: return "'return'";
        case Tok_Sizeof: return "'sizeof'";
        case Tok_Struct: return "'struct'";
        case Tok_True: return "'true'";
        case Tok_Typeof: return "'typeof'";
        case Tok_Union: return "'union'";
        case Tok_Var: return "'var'";
        case Tok_While: return "'while'";
        case Tok_Underscore: return "'_'";
        // Symbols
        case Tok_LParen: return "'('";
        case Tok_RParen: return "')'";
        case Tok_LBrace: return "'{'";
        case Tok_RBrace: return "'}'";
        case Tok_LBracket: return "'['";
        case Tok_RBracket: return "']'";
        case Tok_Comma: return "','";
        case Tok_Semicolon: return "';'";
        case Tok_Dot: return "'.'";
        case Tok_DotDot: return "'..'";
        case Tok_DotDotDot: return "'...'";
        case Tok_Colon: return "':'";
        case Tok_ColonColon: return "'::'";
        case Tok_At: return "'@'";
        case Tok_Arrow: return "'->'";
        case Tok_Plus: return "'+'";
        case Tok_PlusEq: return "'+='";
        case Tok_Minus: return "'-'";
        case Tok_MinusEq: return "'-='";
        case Tok_Star: return "'*'";
        case Tok_StarEq: return "'*='";
        case Tok_Slash: return "'/'";
        case Tok_SlashEq: return "'/='";
        case Tok_Percent: return "'%'";
        case Tok_PercentEq: return "'%='";
        case Tok_Amp: return "'&'";
        case Tok_AmpEq: return "'&='";
        case Tok_AmpAmp: return "'&&'";
        case Tok_Bar: return "'|'";
        case Tok_BarEq: return "'|='";
        case Tok_BarBar: return "'||'";
        case Tok_Caret: return "'^'";
        case Tok_CaretEq: return "'^='";
        case Tok_Bang: return "'!'";
        case Tok_Tilde: return "'~'";
        case Tok_Question: return "'?'";
        case Tok_Lt: return "'<'";
        case Tok_LtLtEq: return "'<<='";
        case Tok_LtLt: return "'<<'";
        case Tok_LtEq: return "'<='";
        case Tok_Gt: return "'>'";
        case Tok_GtEq: return "'>='";
        case Tok_GtGt: return "'>>'";
        case Tok_GtGtEq: return "'>>='";
        case Tok_Eq: return "'='";
        case Tok_EqEq: return "'=='";
        case Tok_BangEq: return "'!='";
        case _: {
            unreachable("pretty_tok_kind");
        }
    }
}
