include "bittle.btls";

//==============================================================================
//== Parser core

struct Parser {
    lexer: *Lexer,
    tok: Tok,
    lookahead: Tok,
    includes: *List, // List<*Char>
}

func try_add_include(self: *Parser, file_path: *Char): Bool {
    var n_includes = list_len(self.includes);
    for (var i = 0; i < n_includes; i += 1) {
        if (str_eq(file_path, list_get(self.includes, i))) {
            return false;
        }
    }

    list_push(self.includes, file_path);
    return true;
}

func advance(self: *Parser) {
    self.tok = self.lookahead;
    self.lookahead = lexer_next(self.lexer);
}

func peek(self: *Parser): *Tok {
    return &self.lookahead;
}

func parser_new(lexer: *Lexer): *Parser {
    var self: *Parser = calloc(1, sizeof(Parser));
    self.lexer = lexer;
    self.includes = list_new();
    advance(self);
    advance(self);
    return self;
}

func at(self: *Parser, kind: Int32): Bool {
    return self.tok.kind == kind;
}

func at_eof(self: *Parser): Bool {
    return at(self, Tok_Eof);
}

func at_literal_tok(self: *Parser): Bool {
    return at(self, Tok_Null) || at(self, Tok_True) || at(self, Tok_False) || at(self, Tok_Int) || at(self, Tok_Char) || at(self, Tok_String);
}

func at_pattern_const_tok(self: *Parser): Bool {
    return at_literal_tok(self) || at(self, Tok_Ident);
}

func next_is(self: *Parser, kind: Int32): Bool {
    return self.lookahead.kind == kind;
}

func eat(self: *Parser, kind: Int32): Bool {
    if (at(self, kind)) {
        advance(self);
        return true;
    }
    return false;
}

func expect(self: *Parser, kind: Int32) {
    if (!eat(self, kind)) {
        die_at(&self.tok.pos, "Unexpected token. Expected %s, but got %s.", pretty_tok_kind(kind), pretty_tok_kind(self.tok.kind));
    }
}

func expect_with_lexeme(self: *Parser, kind: Int32): *Char {
    var tok = self.tok;
    expect(self, kind);
    return tok.lexeme;
}

func p_ident(self: *Parser): *Char {
    return expect_with_lexeme(self, Tok_Ident);
}

//==============================================================================
//== Types

func p_expr(self: *Parser, max_prec: Int32): *Expr;

func p_type(self: *Parser): *TypeExpr;

func p_named_type(self: *Parser): *TypeExpr {
    var pos = self.tok.pos;
    var name = p_ident(self);
    var result: *NamedTypeExpr = calloc(1, sizeof(NamedTypeExpr));
    *result = NamedTypeExpr {
        kind: TypeExpr_Named,
        pos,
        name,
    };
    return result;
}

func p_grouped_type(self: *Parser): *TypeExpr {
    expect(self, Tok_LParen);
    var result = p_type(self);
    expect(self, Tok_RParen);
    return result;
}

func p_ptr_type(self: *Parser): *TypeExpr {
    var pos = self.tok.pos;
    expect(self, Tok_Star);
    var pointee = p_type(self);

    var result: *PtrTypeExpr = calloc(1, sizeof(PtrTypeExpr));
    *result = PtrTypeExpr {
        kind: TypeExpr_Ptr,
        pos,
        pointee,
    };
    return result;
}

func p_arr_type(self: *Parser): *TypeExpr {
    var pos = self.tok.pos;
    expect(self, Tok_LBracket);
    var elem = p_type(self);
    expect(self, Tok_Semicolon);
    var size = p_expr(self, 0);
    expect(self, Tok_RBracket);

    var result: *ArrTypeExpr = calloc(1, sizeof(ArrTypeExpr));
    *result = ArrTypeExpr {
        kind: TypeExpr_Arr,
        pos,
        elem,
        size,
    };
    return result;
}

func p_never_type(self: *Parser): *TypeExpr {
    var pos = self.tok.pos;
    expect(self, Tok_Bang);

    var result: *TypeExpr = calloc(1, sizeof(TypeExpr));
    *result = TypeExpr {
        kind: TypeExpr_Never,
        pos,
    };
    return result;
}

func p_typeof_type(self: *Parser): *TypeExpr {
    var pos = self.tok.pos;
    expect(self, Tok_Typeof);
    expect(self, Tok_LParen);
    var expr = p_expr(self, 0);
    expect(self, Tok_RParen);

    var result: *TypeofTypeExpr = calloc(1, sizeof(TypeofTypeExpr));
    *result = TypeofTypeExpr {
        kind: TypeExpr_Typeof,
        pos,
        expr,
    };
    return result;
}

func p_rest_param_type(self: *Parser): *TypeExpr {
    var pos = self.tok.pos;
    expect(self, Tok_DotDotDot);

    var result: *TypeExpr = calloc(1, sizeof(TypeExpr));
    *result = TypeExpr {
        kind: TypeExpr_RestParam,
        pos,
    };
    return result;
}

func p_type(self: *Parser): *TypeExpr {
    if (at(self, Tok_Ident)) {
        return p_named_type(self);
    } else if (at(self, Tok_LParen)) {
        return p_grouped_type(self);
    } else if (at(self, Tok_Star)) {
        return p_ptr_type(self);
    } else if (at(self, Tok_LBracket)) {
        return p_arr_type(self);
    } else if (at(self, Tok_Typeof)) {
        return p_typeof_type(self);
    } else if (at(self, Tok_Bang)) {
        return p_never_type(self);
    } else if (at(self, Tok_DotDotDot)) {
        return p_rest_param_type(self);
    } else {
        die_at(&self.tok.pos, "Unexpected start of type.");
    }
}

//==============================================================================
//== Literals

func parse_int_lexeme(lexeme: *Char): Int64 {
    if (lexeme[0] == '0') {
        var prefix = lexeme[1] | 32;
        if (prefix == 'b') {
            return strtol(&lexeme[2], null, 2);
        } else if (prefix == 'o') {
            return strtol(&lexeme[2], null, 8);
        } else if (prefix == 'x') {
            return strtol(&lexeme[2], null, 16);
        }
    }
    return strtol(lexeme, null, 10);
}

func p_literal(self: *Parser): *Literal {
    var result: *Literal;

    if (at(self, Tok_Null)) {
        var literal: *Literal = calloc(1, sizeof(Literal));
        *literal = Literal { kind: Literal_Null };
        result = literal;
    } else if (at(self, Tok_True)) {
        var literal: *BoolLiteral = calloc(1, sizeof(BoolLiteral));
        *literal = BoolLiteral { kind: Literal_Bool, value: true };
        result = literal;
    } else if (at(self, Tok_False)) {
        var literal: *BoolLiteral = calloc(1, sizeof(BoolLiteral));
        *literal = BoolLiteral { kind: Literal_Bool, value: false };
        result = literal;
    } else if (at(self, Tok_Int)) {
        var value = parse_int_lexeme(self.tok.lexeme);
        var literal: *IntLiteral = calloc(1, sizeof(IntLiteral));
        *literal = IntLiteral { kind: Literal_Int, value };
        result = literal;
    } else if (at(self, Tok_Char)) {
        var value = parse_char(self.tok.lexeme);
        var literal: *CharLiteral = calloc(1, sizeof(CharLiteral));
        *literal = CharLiteral { kind: Literal_Char, value };
        result = literal;
    } else if (at(self, Tok_String)) {
        var value = parse_string(self.tok.lexeme);
        var literal: *StringLiteral = calloc(1, sizeof(StringLiteral));
        *literal = StringLiteral { kind: Literal_String, value };
        result = literal;
    } else {
        die_at(&self.tok.pos, "Unexpected start of literal.");
    }

    advance(self);
    return result;
}

//==============================================================================
//== Patterns

func p_literal_expr(self: *Parser): *Expr;
func p_name_expr(self: *Parser): *Expr;
func p_pattern(self: *Parser): *Pattern;

//==============================================================================
//== Patterns

func p_pattern_const(self: *Parser): *Expr {
    if (at_literal_tok(self)) {
        return p_literal_expr(self);
    } else {
        return p_name_expr(self);
    }
}

func p_grouped_pattern(self: *Parser): *Pattern {
    var pos = self.tok.pos;
    expect(self, Tok_LParen);
    var pattern = p_pattern(self);
    expect(self, Tok_RParen);

    var result: *GroupedPattern = calloc(1, sizeof(GroupedPattern));
    *result = GroupedPattern {
        kind: Pattern_Grouped,
        pos,
        type: null,
        pattern,
    };
    return result;
}

func p_literal_pattern(self: *Parser): *Pattern {
    var pos = self.tok.pos;
    var literal = p_literal(self);

    var result: *LiteralPattern = calloc(1, sizeof(LiteralPattern));
    *result = LiteralPattern {
        kind: Pattern_Literal,
        pos,
        type: null,
        literal,
        value: null,
    };
    return result;
}

func p_name_pattern(self: *Parser): *Pattern {
    var pos = self.tok.pos;
    var name = p_ident(self);

    var result: *NamePattern = calloc(1, sizeof(NamePattern));
    *result = NamePattern {
        kind: Pattern_Name,
        pos,
        type: null,
        name,
        sym: null,
    };
    return result;
}

func p_wildcard_pattern(self: *Parser): *Pattern {
    var pos = self.tok.pos;
    expect(self, Tok_Underscore);

    var result: *Pattern = calloc(1, sizeof(Pattern));
    *result = Pattern {
        kind: Pattern_Wildcard,
        pos,
        type: null,
    };
    return result;
}

func p_var_pattern(self: *Parser): *Pattern {
    var pos = self.tok.pos;
    var name = p_ident(self);
    expect(self, Tok_At);
    var pattern = p_pattern(self);

    var result: *VarPattern = calloc(1, sizeof(VarPattern));
    *result = VarPattern {
        kind: Pattern_Var,
        pos,
        type: null,
        name,
        pattern,
        sym: null,
    };
    return result;
}

func p_range_pattern(self: *Parser): *Pattern {
    var pos = self.tok.pos;
    var lower: *Expr = null;

    if (!at(self, Tok_DotDotDot)) {
        lower = p_pattern_const(self);
    }

    expect(self, Tok_DotDotDot);

    var upper: *Expr = null;
    if (at_pattern_const_tok(self)) {
        upper = p_pattern_const(self);
    }

    var result: *RangePattern = calloc(1, sizeof(RangePattern));
    *result = RangePattern {
        kind: Pattern_Range,
        pos,
        type: null,
        lower,
        upper,
        lower_value: null,
        upper_value: null,
    };
    return result;
}

func p_pattern(self: *Parser): *Pattern {
    if (at(self, Tok_LParen)) {
        return p_grouped_pattern(self);
    } else if (at(self, Tok_DotDotDot) || (at_pattern_const_tok(self) && next_is(self, Tok_DotDotDot))) {
        return p_range_pattern(self);
    } else if (at_literal_tok(self)) {
        return p_literal_pattern(self);
    } else if (at(self, Tok_Ident) && next_is(self, Tok_At)) {
        return p_var_pattern(self);
    } else if (at(self, Tok_Ident)) {
        return p_name_pattern(self);
    } else if (at(self, Tok_Underscore)) {
        return p_wildcard_pattern(self);
    } else {
        die_at(&self.tok.pos, "Unexpected start of pattern.");
    }
}

//==============================================================================
//== Expressions

enum {
    Prec_Assign,
    Prec_Cond,
    Prec_Or,
    Prec_And,
    Prec_BitOr,
    Prec_BitXor,
    Prec_BitAnd,
    Prec_Cmp,
    Prec_Shift,
    Prec_Add,
    Prec_Mul,
    Prec_Cast,
    Prec_Unary,
    Prec_Postfix,
    Prec_Primary,
}

func p_expr(self: *Parser, max_prec: Int32): *Expr;

func p_grouped_expr(self: *Parser): *Expr {
    expect(self, Tok_LParen);
    var expr = p_expr(self, 0);
    expect(self, Tok_RParen);
    return expr;
}

func p_name_expr(self: *Parser): *Expr {
    var pos = self.tok.pos;
    var name = p_ident(self);

    var result: *IdentExpr = calloc(1, sizeof(IdentExpr));
    *result = IdentExpr {
        kind: Expr_Ident,
        pos,
        type: null,
        const_value: null,
        name,
        sym: null,
    };
    return result;
}

func p_literal_expr(self: *Parser): *Expr {
    var pos = self.tok.pos;
    var literal = p_literal(self);

    var result: *LiteralExpr = calloc(1, sizeof(LiteralExpr));
    *result = LiteralExpr {
        kind: Expr_Literal,
        pos,
        type: null,
        const_value: null,
        literal,
    };
    return result;
}

func p_sizeof_expr(self: *Parser): *Expr {
    var pos = self.tok.pos;
    expect(self, Tok_Sizeof);
    expect(self, Tok_LParen);
    var type = p_type(self);
    expect(self, Tok_RParen);

    var result: *SizeofExpr = calloc(1, sizeof(SizeofExpr));
    *result = SizeofExpr {
        kind: Expr_Sizeof,
        pos,
        type_expr: type,
        type: null,
        const_value: null,
        size: -1,
    };
    return result;
}

func p_array_expr(self: *Parser): *Expr {
    var pos = self.tok.pos;

    expect(self, Tok_LBracket);
    var elems: *List = list_new();
    while (!at_eof(self) && !at(self, Tok_RBracket)) {
        var element = p_expr(self, 0);
        list_push(elems, element);
        if (!at(self, Tok_RBracket)) {
            expect(self, Tok_Comma);
        }
    }
    expect(self, Tok_RBracket);

    var result: *ArrayExpr = calloc(1, sizeof(ArrayExpr));
    *result = ArrayExpr {
        kind: Expr_Array,
        pos,
        type: null,
        const_value: null,
        elems,
    };
    return result;
}

func p_index_expr(self: *Parser, indexee: *Expr): *Expr {
    var pos = self.tok.pos;
    expect(self, Tok_LBracket);
    var index = p_expr(self, 0);
    expect(self, Tok_RBracket);

    var result: *IndexExpr = calloc(1, sizeof(IndexExpr));
    *result = IndexExpr {
        kind: Expr_Index,
        pos,
        type: null,
        const_value: null,
        indexee,
        index,
    };
    return result;
}

func p_call_arg(self: *Parser, max_prec: Int32): *CallArg {
    var label: *Char = null;
    if (at(self, Tok_Ident) && next_is(self, Tok_Colon)) {
        label = p_ident(self);
        expect(self, Tok_Colon);
    }
    var expr = p_expr(self, max_prec);

    var result: *CallArg = calloc(1, sizeof(CallArg));
    *result = CallArg {
        label,
        expr,
        positional_index: -1,
    };
    return result;
}

func p_call_expr(self: *Parser, callee: *Expr): *Expr {
    var pos = self.tok.pos;
    expect(self, Tok_LParen);
    var args: *List = list_new();
    while (!at_eof(self) && !at(self, Tok_RParen)) {
        var arg = p_call_arg(self, 0);
        list_push(args, arg);
        if (!at(self, Tok_RParen)) {
            expect(self, Tok_Comma);
        }
    }
    expect(self, Tok_RParen);

    var result: *CallExpr = calloc(1, sizeof(CallExpr));
    *result = CallExpr {
        kind: Expr_Call,
        pos,
        type: null,
        const_value: null,
        callee,
        args,
        resolved_callee: null,
    };
    return result;
}

func p_member_expr(self: *Parser, left: *Expr): *Expr {
    var pos = self.tok.pos;
    expect(self, Tok_Dot);
    var name = p_ident(self);

    var result: *MemberExpr = calloc(1, sizeof(MemberExpr));
    *result = MemberExpr {
        kind: Expr_Member,
        pos,
        type: null,
        const_value: null,
        left,
        name,
        resolved_field: -1,
    };
    return result;
}

func p_unary_expr(self: *Parser, op: Int32): *Expr {
    var pos = self.tok.pos;
    var right = p_expr(self, Prec_Unary);

    var result: *UnaryExpr = calloc(1, sizeof(UnaryExpr));
    *result = UnaryExpr {
        kind: Expr_Unary,
        pos,
        type: null,
        const_value: null,
        op,
        right,
    };
    return result;
}

func p_cast_expr(self: *Parser, expr: *Expr): *Expr {
    var pos = self.tok.pos;
    var type = p_type(self);

    var result: *CastExpr = calloc(1, sizeof(CastExpr));
    *result = CastExpr {
        kind: Expr_Cast,
        pos,
        type: null,
        const_value: null,
        expr,
        type_expr: type,
    };
    return result;
}

func p_binary_expr(self: *Parser, left: *Expr, op: Int32, prec: Int32): *Expr {
    var pos = self.tok.pos;
    var right = p_expr(self, prec);

    var result: *BinaryExpr = calloc(1, sizeof(BinaryExpr));
    *result = BinaryExpr {
        kind: Expr_Binary,
        pos,
        type: null,
        const_value: null,
        op,
        left,
        right,
    };
    return result;
}

func p_ternary_expr(self: *Parser, cond: *Expr): *Expr {
    var pos = self.tok.pos;
    expect(self, Tok_Question);
    var then_expr = p_expr(self, Prec_Cond);
    expect(self, Tok_Colon);
    var else_expr = p_expr(self, Prec_Cond);

    var result: *TernaryExpr = calloc(1, sizeof(TernaryExpr));
    *result = TernaryExpr {
        kind: Expr_Ternary,
        pos,
        type: null,
        const_value: null,
        cond,
        then_expr,
        else_expr,
    };
    return result;
}

func p_field_initializer(self: *Parser): *FieldInitializer {
    var pos = self.tok.pos;

    if (!at(self, Tok_Ident)) {
        die_at(&self.tok.pos, "Field name expected.");
    }
    var name = self.tok.lexeme;

    if (next_is(self, Tok_Colon)) {
        expect(self, Tok_Ident);
        expect(self, Tok_Colon);
    }

    var expr = p_expr(self, 0);

    var result: *FieldInitializer = calloc(1, sizeof(FieldInitializer));
    *result = FieldInitializer {
        pos,
        name,
        expr,
    };
    return result;
}

func p_record_expr(self: *Parser): *Expr {
    var pos = self.tok.pos;
    var name = p_ident(self);
    var field_initializers: *List = list_new();
    expect(self, Tok_LBrace);
    while (!at_eof(self) && !at(self, Tok_RBrace)) {
        var field_initializer = p_field_initializer(self);
        list_push(field_initializers, field_initializer);
        if (!at(self, Tok_RBrace)) {
            expect(self, Tok_Comma);
        }
    }
    expect(self, Tok_RBrace);

    var result: *RecordExpr = calloc(1, sizeof(RecordExpr));
    *result = RecordExpr {
        kind: Expr_Record,
        pos: pos,
        type: null,
        const_value: null,
        name: name,
        fields: field_initializers,
    };
    return result;
}

func p_ident_expr(self: *Parser): *Expr {
    if (next_is(self, Tok_LBrace)) {
        return p_record_expr(self);
    } else {
        return p_name_expr(self);
    }
}

func p_expr(self: *Parser, max_prec: Int32): *Expr {
    var lhs: *Expr;

    if (at(self, Tok_LParen)) {
        lhs = p_grouped_expr(self);
    } else if (at(self, Tok_Ident)) {
        lhs = p_ident_expr(self);
    } else if (at(self, Tok_Null) || at(self, Tok_True) || at(self, Tok_False) || at(self, Tok_Int) || at(self, Tok_Char) || at(self, Tok_String)) {
        lhs = p_literal_expr(self);
    } else if (at(self, Tok_LBracket)) {
        lhs = p_array_expr(self);
    } else if (at(self, Tok_Sizeof)) {
        lhs = p_sizeof_expr(self);
    } else if (max_prec <= Prec_Unary && eat(self, Tok_Minus)) {
        lhs = p_unary_expr(self, Tok_Minus);
    } else if (max_prec <= Prec_Unary && eat(self, Tok_Bang)) {
        lhs = p_unary_expr(self, Tok_Bang);
    } else if (max_prec <= Prec_Unary && eat(self, Tok_Tilde)) {
        lhs = p_unary_expr(self, Tok_Tilde);
    } else if (max_prec <= Prec_Unary && eat(self, Tok_Star)) {
        lhs = p_unary_expr(self, Tok_Star);
    } else if (max_prec <= Prec_Unary && eat(self, Tok_Amp)) {
        lhs = p_unary_expr(self, Tok_Amp);
    } else {
        die_at(&self.tok.pos, "Unexpected start of expression.");
    }

    while (true) {
        if (max_prec <= Prec_Assign && eat(self, Tok_Eq)) {
            lhs = p_binary_expr(self, lhs, Tok_Eq, Prec_Assign);
        } else if (max_prec <= Prec_Assign && eat(self, Tok_PlusEq)) {
            lhs = p_binary_expr(self, lhs, Tok_PlusEq, Prec_Assign);
        } else if (max_prec <= Prec_Assign && eat(self, Tok_MinusEq)) {
            lhs = p_binary_expr(self, lhs, Tok_MinusEq, Prec_Assign);
        } else if (max_prec <= Prec_Assign && eat(self, Tok_StarEq)) {
            lhs = p_binary_expr(self, lhs, Tok_StarEq, Prec_Assign);
        } else if (max_prec <= Prec_Assign && eat(self, Tok_SlashEq)) {
            lhs = p_binary_expr(self, lhs, Tok_SlashEq, Prec_Assign);
        } else if (max_prec <= Prec_Assign && eat(self, Tok_PercentEq)) {
            lhs = p_binary_expr(self, lhs, Tok_PercentEq, Prec_Assign);
        } else if (max_prec <= Prec_Assign && eat(self, Tok_AmpEq)) {
            lhs = p_binary_expr(self, lhs, Tok_AmpEq, Prec_Assign);
        } else if (max_prec <= Prec_Assign && eat(self, Tok_BarEq)) {
            lhs = p_binary_expr(self, lhs, Tok_BarEq, Prec_Assign);
        } else if (max_prec <= Prec_Assign && eat(self, Tok_CaretEq)) {
            lhs = p_binary_expr(self, lhs, Tok_CaretEq, Prec_Assign);
        } else if (max_prec <= Prec_Assign && eat(self, Tok_LtLtEq)) {
            lhs = p_binary_expr(self, lhs, Tok_LtLtEq, Prec_Assign);
        } else if (max_prec <= Prec_Assign && eat(self, Tok_GtGtEq)) {
            lhs = p_binary_expr(self, lhs, Tok_GtGtEq, Prec_Assign);
        } else if (max_prec <= Prec_Cond && at(self, Tok_Question)) {
            lhs = p_ternary_expr(self, lhs);
        } else if (max_prec <= Prec_Or && eat(self, Tok_BarBar)) {
            lhs = p_binary_expr(self, lhs, Tok_BarBar, Prec_Or + 1);
        } else if (max_prec <= Prec_And && eat(self, Tok_AmpAmp)) {
            lhs = p_binary_expr(self, lhs, Tok_AmpAmp, Prec_And + 1);
        } else if (max_prec <= Prec_BitOr && eat(self, Tok_Bar)) {
            lhs = p_binary_expr(self, lhs, Tok_Bar, Prec_BitOr + 1);
        } else if (max_prec <= Prec_BitXor && eat(self, Tok_Caret)) {
            lhs = p_binary_expr(self, lhs, Tok_Caret, Prec_BitXor + 1);
        } else if (max_prec <= Prec_BitAnd && eat(self, Tok_Amp)) {
            lhs = p_binary_expr(self, lhs, Tok_Amp, Prec_BitAnd + 1);
        } else if (max_prec <= Prec_Cmp && eat(self, Tok_Gt)) {
            lhs = p_binary_expr(self, lhs, Tok_Gt, Prec_Cmp + 1);
        } else if (max_prec <= Prec_Cmp && eat(self, Tok_GtEq)) {
            lhs = p_binary_expr(self, lhs, Tok_GtEq, Prec_Cmp + 1);
        } else if (max_prec <= Prec_Cmp && eat(self, Tok_Lt)) {
            lhs = p_binary_expr(self, lhs, Tok_Lt, Prec_Cmp + 1);
        } else if (max_prec <= Prec_Cmp && eat(self, Tok_LtEq)) {
            lhs = p_binary_expr(self, lhs, Tok_LtEq, Prec_Cmp + 1);
        } else if (max_prec <= Prec_Cmp && eat(self, Tok_BangEq)) {
            lhs = p_binary_expr(self, lhs, Tok_BangEq, Prec_Cmp + 1);
        } else if (max_prec <= Prec_Cmp && eat(self, Tok_EqEq)) {
            lhs = p_binary_expr(self, lhs, Tok_EqEq, Prec_Cmp + 1);
        } else if (max_prec <= Prec_Shift && eat(self, Tok_GtGt)) {
            lhs = p_binary_expr(self, lhs, Tok_GtGt, Prec_Shift + 1);
        } else if (max_prec <= Prec_Shift && eat(self, Tok_LtLt)) {
            lhs = p_binary_expr(self, lhs, Tok_LtLt, Prec_Shift + 1);
        } else if (max_prec <= Prec_Add && eat(self, Tok_Minus)) {
            lhs = p_binary_expr(self, lhs, Tok_Minus, Prec_Add + 1);
        } else if (max_prec <= Prec_Add && eat(self, Tok_Plus)) {
            lhs = p_binary_expr(self, lhs, Tok_Plus, Prec_Add + 1);
        } else if (max_prec <= Prec_Mul && eat(self, Tok_Percent)) {
            lhs = p_binary_expr(self, lhs, Tok_Percent, Prec_Mul + 1);
        } else if (max_prec <= Prec_Mul && eat(self, Tok_Slash)) {
            lhs = p_binary_expr(self, lhs, Tok_Slash, Prec_Mul + 1);
        } else if (max_prec <= Prec_Mul && eat(self, Tok_Star)) {
            lhs = p_binary_expr(self, lhs, Tok_Star, Prec_Mul + 1);
        } else if (max_prec <= Prec_Cast && eat(self, Tok_As)) {
            lhs = p_cast_expr(self, lhs);
        } else if (max_prec <= Prec_Postfix && at(self, Tok_LBracket)) {
            lhs = p_index_expr(self, lhs);
        } else if (max_prec <= Prec_Postfix && at(self, Tok_LParen)) {
            lhs = p_call_expr(self, lhs);
        } else if (max_prec <= Prec_Postfix && at(self, Tok_Dot)) {
            lhs = p_member_expr(self, lhs);
        } else {
            break;
        }
    }
    return lhs;
}

//==============================================================================
//== Statements

func p_stmt(self: *Parser): *Stmt;
func p_const_decl(self: *Parser): *ConstDecl;
func p_expr_stmt(self: *Parser): *Stmt;

func p_block(self: *Parser): *Stmt {
    var pos = self.tok.pos;
    expect(self, Tok_LBrace);
    var stmts: *List = list_new();
    while (!at_eof(self) && !at(self, Tok_RBrace)) {
        var stmt = p_stmt(self);
        list_push(stmts, stmt);
    }
    expect(self, Tok_RBrace);

    var result: *BlockStmt = calloc(1, sizeof(BlockStmt));
    *result = BlockStmt {
        kind: Stmt_Block,
        pos,
        stmts,
    };
    return result;
}

func p_const_stmt(self: *Parser): *Stmt {
    var pos = self.tok.pos;
    var decl = p_const_decl(self);

    var result: *ConstStmt = calloc(1, sizeof(ConstStmt));
    *result = ConstStmt {
        kind: Stmt_Const,
        pos,
        decl,
    };
    return result;
}

func p_local_stmt(self: *Parser): *Stmt {
    var pos = self.tok.pos;
    expect(self, Tok_Var);
    var name = p_ident(self);
    var type: *TypeExpr = null;
    if (eat(self, Tok_Colon)) {
        type = p_type(self);
    }
    var init: *Expr = null;
    if (eat(self, Tok_Eq)) {
        init = p_expr(self, 0);
    }
    expect(self, Tok_Semicolon);

    var result: *LocalStmt = calloc(1, sizeof(LocalStmt));
    *result = LocalStmt {
        kind: Stmt_Local,
        pos,
        name,
        type,
        init,
        sym: null,
    };
    return result;
}

func p_if_stmt(self: *Parser): *Stmt {
    var pos = self.tok.pos;
    expect(self, Tok_If);
    expect(self, Tok_LParen);
    var cond = p_expr(self, 0);
    expect(self, Tok_RParen);
    var then_stmt = p_stmt(self);
    var else_stmt: *Stmt = null;
    if (eat(self, Tok_Else)) {
        else_stmt = p_stmt(self);
    }

    var result: *IfStmt = calloc(1, sizeof(IfStmt));
    *result = IfStmt {
        kind: Stmt_If,
        pos,
        cond,
        then_stmt,
        else_stmt,
    };
    return result;
}

func p_match_case(self: *Parser): *MatchCase {
    expect(self, Tok_Case);
    var pattern = p_pattern(self);
    expect(self, Tok_Colon);
    var body = p_stmt(self);

    var result: *MatchCase = calloc(1, sizeof(MatchCase));
    *result = MatchCase {
        pattern,
        body,
    };
    return result;
}

func p_match_stmt(self: *Parser): *Stmt {
    var pos = self.tok.pos;
    expect(self, Tok_Match);
    expect(self, Tok_LParen);
    var scrutinee = p_expr(self, 0);
    expect(self, Tok_RParen);
    expect(self, Tok_LBrace);
    var cases: *List = list_new();
    while (!eat(self, Tok_RBrace)) {
        var match_case = p_match_case(self);
        list_push(cases, match_case);
    }

    var result: *MatchStmt = calloc(1, sizeof(MatchStmt));
    *result = MatchStmt {
        kind: Stmt_Match,
        pos,
        scrutinee,
        cases,
    };
    return result;
}

func p_while_stmt(self: *Parser): *Stmt {
    var pos = self.tok.pos;
    expect(self, Tok_While);
    expect(self, Tok_LParen);
    var cond = p_expr(self, 0);
    expect(self, Tok_RParen);
    var body = p_stmt(self);

    var result: *WhileStmt = calloc(1, sizeof(WhileStmt));
    *result = WhileStmt {
        kind: Stmt_While,
        pos,
        cond,
        body,
    };
    return result;
}

func p_for_stmt(self: *Parser): *Stmt {
    var pos = self.tok.pos;
    expect(self, Tok_For);
    expect(self, Tok_LParen);
    var init: *Stmt = null;
    if (!eat(self, Tok_Semicolon)) {
        if (at(self, Tok_Var)) {
            init = p_local_stmt(self);
        } else {
            init = p_expr_stmt(self);
        }
    }
    var cond: *Expr = null;
    if (!at(self, Tok_Semicolon)) {
        cond = p_expr(self, 0);
    }
    expect(self, Tok_Semicolon);
    var step: *Expr = null;
    if (!at(self, Tok_RParen)) {
        step = p_expr(self, 0);
    }
    expect(self, Tok_RParen);
    var body = p_stmt(self);

    var result: *ForStmt = calloc(1, sizeof(ForStmt));
    *result = ForStmt {
        kind: Stmt_For,
        pos,
        init,
        cond,
        step,
        body,
    };
    return result;
}


func p_return_stmt(self: *Parser): *Stmt {
    var pos = self.tok.pos;
    expect(self, Tok_Return);
    var expr: *Expr = null;
    if (!eat(self, Tok_Semicolon)) {
        expr = p_expr(self, 0);
        expect(self, Tok_Semicolon);
    }

    var result: *ReturnStmt = calloc(1, sizeof(ReturnStmt));
    *result = ReturnStmt {
        kind: Stmt_Return,
        pos,
        expr,
    };
    return result;
}

func p_break_stmt(self: *Parser): *Stmt {
    var pos = self.tok.pos;
    expect(self, Tok_Break);
    expect(self, Tok_Semicolon);

    var result: *Stmt = calloc(1, sizeof(Stmt));
    *result = Stmt {
        kind: Stmt_Break,
        pos,
    };
    return result;
}

func p_continue_stmt(self: *Parser): *Stmt {
    var pos = self.tok.pos;
    expect(self, Tok_Continue);
    expect(self, Tok_Semicolon);

    var result: *Stmt = calloc(1, sizeof(Stmt));
    *result = Stmt {
        kind: Stmt_Continue,
        pos,
    };
    return result;
}

func p_expr_stmt(self: *Parser): *Stmt {
    var pos = self.tok.pos;
    var expr = p_expr(self, 0);
    expect(self, Tok_Semicolon);

    var result: *ExprStmt = calloc(1, sizeof(ExprStmt));
    *result = ExprStmt {
        kind: Stmt_Expr,
        pos,
        expr,
    };
    return result;
}

func p_stmt(self: *Parser): *Stmt {
    if (at(self, Tok_LBrace)) {
        return p_block(self);
    } else if (at(self, Tok_Const)) {
        return p_const_stmt(self);
    } else if (at(self, Tok_Var)) {
        return p_local_stmt(self);
    } else if (at(self, Tok_If)) {
        return p_if_stmt(self);
    } else if (at(self, Tok_Match)) {
        return p_match_stmt(self);
    } else if (at(self, Tok_While)) {
        return p_while_stmt(self);
    } else if (at(self, Tok_For)) {
        return p_for_stmt(self);
    } else if (at(self, Tok_Return)) {
        return p_return_stmt(self);
    } else if (at(self, Tok_Break)) {
        return p_break_stmt(self);
    } else if (at(self, Tok_Continue)) {
        return p_continue_stmt(self);
    } else {
        return p_expr_stmt(self);
    }
}

//==============================================================================
//== Declarations

func p_record_field(self: *Parser): *RecordFieldDecl {
    var pos = self.tok.pos;
    var name = p_ident(self);
    var type: *TypeExpr = null;
    if (eat(self, Tok_Colon)) {
        type = p_type(self);
    }
    var default_value: *Expr = null;
    if (eat(self, Tok_Eq)) {
        default_value = p_expr(self, 0);
    }

    var result: *RecordFieldDecl = calloc(1, sizeof(RecordFieldDecl));
    *result = RecordFieldDecl {
        pos,
        name,
        default_value,
        type,
    };
    return result;
}

func p_record_decl(self: *Parser): *Decl {
    var pos = self.tok.pos;
    var is_union = at(self, Tok_Union);
    if (!is_union) {
        expect(self, Tok_Struct);
    } else {
        expect(self, Tok_Union);
    }
    var name = p_ident(self);
    var base: *TypeExpr = null;
    if (eat(self, Tok_Colon)) {
        base = p_type(self);
    }
    var body: *List;
    if (eat(self, Tok_LBrace)) {
        body = list_new();
        while (!at_eof(self) && !at(self, Tok_RBrace)) {
            var field = p_record_field(self);
            list_push(body, field);
            if (!at(self, Tok_RBrace)) {
                expect(self, Tok_Comma);
            }
        }
        expect(self, Tok_RBrace);
    } else {
        body = null;
        expect(self, Tok_Semicolon);
    }

    var result: *RecordDecl = calloc(1, sizeof(RecordDecl));
    *result = RecordDecl {
        kind: Decl_Record,
        pos,
        is_union,
        name,
        base,
        fields: body,
        sym: null,
    };
    return result;
}

func p_param(self: *Parser): *FuncParamDecl {
    var pos = self.tok.pos;
    var name = p_ident(self);
    expect(self, Tok_Colon);
    var type = p_type(self);
    var default_value: *Expr = null;
    if (eat(self, Tok_Eq)) {
        default_value = p_expr(self, 0);
    }

    var result: *FuncParamDecl = calloc(1, sizeof(FuncParamDecl));
    *result = FuncParamDecl {
        pos,
        name,
        type,
        default_value,
    };
    return result;
}

func p_rest_param(self: *Parser): *RestParamDecl {
    var pos = self.tok.pos;
    expect(self, Tok_DotDotDot);
    var name: *Char = null;
    if (at(self, Tok_Ident)) {
        name = p_ident(self);
    }

    var result: *RestParamDecl = calloc(1, sizeof(RestParamDecl));
    *result = RestParamDecl {
        pos,
        name,
    };
    return result;
}

func p_func_decl(self: *Parser, is_extern: Bool): *Decl {
    var pos = self.tok.pos;
    expect(self, Tok_Func);
    var name = p_ident(self);
    var params: *List = list_new();
    expect(self, Tok_LParen);
    while (!at_eof(self) && !at(self, Tok_RParen) && !at(self, Tok_DotDotDot)) {
        var param = p_param(self);
        list_push(params, param);
        if (!at(self, Tok_RParen)) {
            expect(self, Tok_Comma);
        }
    }
    var rest_param: *RestParamDecl = null;
    if (at(self, Tok_DotDotDot)) {
        rest_param = p_rest_param(self);
    }
    expect(self, Tok_RParen);
    var return_type: *TypeExpr = null;
    if (eat(self, Tok_Colon)) {
        return_type = p_type(self);
    }
    var body: *Stmt = null;
    if (at(self, Tok_LBrace)) {
        body = p_stmt(self);
    } else {
        expect(self, Tok_Semicolon);
    }

    var result: *FuncDecl = calloc(1, sizeof(FuncDecl));
    *result = FuncDecl {
        kind: Decl_Func,
        pos,
        is_extern,
        name,
        params,
        rest_param,
        return_type,
        body,
        sym: null,
    };
    return result;
}

func p_enum_member(self: *Parser): *EnumMember {
    var pos = self.tok.pos;
    var name = p_ident(self);
    var value: *Expr = null;
    if (eat(self, Tok_Eq)) {
        value = p_expr(self, 0);
    }

    var result: *EnumMember = calloc(1, sizeof(EnumMember));
    *result = EnumMember {
        pos,
        name,
        value,
        sym: null,
    };
    return result;
}

func p_enum_decl(self: *Parser): *Decl {
    var pos = self.tok.pos;
    expect(self, Tok_Enum);
    var name: *Char = null;
    if (at(self, Tok_Ident)) {
        name = p_ident(self);
    }
    expect(self, Tok_LBrace);
    var members = list_new();
    while (!at_eof(self) && !at(self, Tok_RBrace)) {
        var member = p_enum_member(self);
        list_push(members, member);
        if (!at(self, Tok_RBrace)) {
            expect(self, Tok_Comma);
        }
    }
    expect(self, Tok_RBrace);

    var result: *EnumDecl = calloc(1, sizeof(EnumDecl));
    *result = EnumDecl {
        kind: Decl_Enum,
        pos,
        name,
        members,
        sym: null,
    };
    return result;
}

func p_const_decl(self: *Parser): *ConstDecl {
    var pos = self.tok.pos;
    expect(self, Tok_Const);
    var name = p_ident(self);
    var type: *TypeExpr = null;
    if (eat(self, Tok_Colon)) {
        type = p_type(self);
    }
    expect(self, Tok_Eq);
    var value = p_expr(self, 0);
    expect(self, Tok_Semicolon);

    var result: *ConstDecl = calloc(1, sizeof(ConstDecl));
    *result = ConstDecl {
        kind: Decl_Const,
        pos,
        name,
        type,
        value,
        sym: null,
    };
    return result;
}

func p_global_decl(self: *Parser, is_extern: Bool): *Decl {
    var pos = self.tok.pos;
    expect(self, Tok_Var);
    var name = p_ident(self);
    expect(self, Tok_Colon);
    var type = p_type(self);
    expect(self, Tok_Semicolon);

    var result: *GlobalDecl = calloc(1, sizeof(GlobalDecl));
    *result = GlobalDecl {
        kind: Decl_Global,
        pos,
        is_extern,
        name,
        type,
        sym: null,
    };
    return result;
}

func p_decl_decl(self: *Parser): *Decl {
    if (at(self, Tok_Struct) || at(self, Tok_Union)) {
        return p_record_decl(self);
    } else if (at(self, Tok_Func)) {
        return p_func_decl(self, false);
    } else if (at(self, Tok_Enum)) {
        return p_enum_decl(self);
    } else if (at(self, Tok_Const)) {
        return p_const_decl(self);
    } else if (at(self, Tok_Var)) {
        return p_global_decl(self, false);
    } else if (eat(self, Tok_Extern)) {
        if (at(self, Tok_Func)) {
            return p_func_decl(self, true);
        } else if (at(self, Tok_Var)) {
            return p_global_decl(self, true);
        } else {
            die_at(&self.tok.pos, "Expected extern function or variable declaration.");
        }
    } else {
        die_at(&self.tok.pos, "Unexpected token.");
    }
}

//==============================================================================
//== Top-level

func parse_file(self: *Parser, decls: *List);

func p_include(self: *Parser, decls: *List) {
    var pos = self.tok.pos;
    var string_literal = expect_with_lexeme(self, Tok_String);
    var file_name = parse_string(string_literal);
    expect(self, Tok_Semicolon);

    var file_dir = get_directory(pos.file);
    var file_path = join_paths(file_dir, sb_cstr(file_name));
    var file_path = realpath(file_path, null);

    if (!try_add_include(self, file_path)) {
        return; // Already included.
    }

    var file = fopen(file_path, "r");
    if (!file) {
        die_at(&pos, "Cannot open file.");
    }
    var file_input = read_file(file);
    var file_lexer = lexer_new(file_path, file_input);
    var file_parser = parser_new(file_lexer);
    file_parser.includes = self.includes;
    parse_file(file_parser, decls);
}

func parse_file(self: *Parser, decls: *List) {
    while (!at_eof(self)) {
        if (eat(self, Tok_Include)) {
            p_include(self, decls);
        } else {
            list_push(decls, p_decl_decl(self));
        }
    }
}

func parser_run(self: *Parser): *Ast {
    var decls: *List = list_new();
    parse_file(self, decls);
    var result: *Ast = calloc(1, sizeof(Ast));
    *result = Ast {
        decls,
    };
    return result;
}
