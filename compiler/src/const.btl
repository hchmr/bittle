include "bittle.btls";

func mk_bool_const_value(value: Bool): *BoolConstValue {
    return box(sizeof(BoolConstValue), &BoolConstValue {
        type: mk_bool_type(),
        bool: value,
    }) as *BoolConstValue;
}

func mk_int_const_value(value: Int, type: *Type): *IntConstValue {
    return box(sizeof(IntConstValue), &IntConstValue {
        type: type,
        int: value,
    }) as *IntConstValue;
}

func mk_null_const_value(type: *Type): *NullConstValue {
    return box(sizeof(NullConstValue), &NullConstValue {
        type: type,
    }) as *NullConstValue;
}

func mk_string_const_value(value: *StringBuffer): *StringConstValue {
    return box(sizeof(StringConstValue), &StringConstValue {
        type: mk_ptr_type(mk_int_type(1), is_mut: false),
        string: value,
    }) as *StringConstValue;
}

func is_cmp_op(op: TokKind): Bool {
    return op is (
        Tok_EqEq
        | Tok_BangEq
        | Tok_Lt
        | Tok_LtEq
        | Tok_Gt
        | Tok_GtEq
    );
}

func signed_cmp(op: TokKind, a: Int, b: Int): Bool {
    match (op) {
        case Tok_EqEq: return a == b;
        case Tok_BangEq: return a != b;
        case Tok_Lt: return a < b;
        case Tok_LtEq: return a <= b;
        case Tok_Gt: return a > b;
        case Tok_GtEq: return a >= b;
        case _: unreachable("Invalid comparison operator");
    }
}

func const_value_unop(op: TokKind, a: *ConstValue): *ConstValue {
    match (a.kind) {
        case ConstValue_Bool: {
            var a = a as *BoolConstValue;
            if (op == Tok_Bang) {
                return mk_bool_const_value(!a.bool);
            }
        }
        case ConstValue_Int: {
            var a = a as *IntConstValue;
            if (op == Tok_Minus) {
                return mk_int_const_value(-a.int, a.type);
            }
        }
    }
    return null;
}

func const_value_binop(op: TokKind, a: *ConstValue, b: *ConstValue): *ConstValue {
    assert(type_eq(a.type, b.type), "const_value_binop: Types should match");

    if (a.kind == ConstValue_Bool && b.kind == ConstValue_Bool) {
        var a = a as *BoolConstValue;
        var b = b as *BoolConstValue;
        match (op) {
            case Tok_AmpAmp: {
                return mk_bool_const_value(a.bool && b.bool);
            }
            case Tok_BarBar: {
                return mk_bool_const_value(a.bool || b.bool);
            }
            case _ if (is_cmp_op(op)): {
                return mk_bool_const_value(signed_cmp(op, a.bool as Int, b.bool as Int));
            }
        }
    } else if (a.kind == ConstValue_Int && b.kind == ConstValue_Int) {
        var a = a as *IntConstValue;
        var b = b as *IntConstValue;
        match (op) {
            case Tok_Plus: {
                return mk_int_const_value(a.int + b.int, a.type);
            }
            case Tok_Minus: {
                return mk_int_const_value(a.int - b.int, a.type);
            }
            case Tok_Star: {
                return mk_int_const_value(a.int * b.int, a.type);
            }
            case Tok_Slash: {
                if (b.int == 0) {
                    return null;
                }
                return mk_int_const_value(a.int / b.int, a.type);
            }
            case Tok_Percent: {
                if (b.int == 0) {
                    return null;
                }
                return mk_int_const_value(a.int % b.int, a.type);
            }
            case _ if (is_cmp_op(op)): {
                return mk_bool_const_value(signed_cmp(op, a.int, b.int));
            }
        }
    } else if (a.kind == ConstValue_Null || b.kind == ConstValue_Null) {
        if (op == Tok_Eq || op == Tok_BangEq) {
            // Equal if both are null
            return mk_bool_const_value(signed_cmp(op, a.kind, b.kind));
        }
    }
    return null;
}

func const_value_ternop(a: *ConstValue, b: *ConstValue, c: *ConstValue): *ConstValue {
    if (a.kind == ConstValue_Bool && b.kind == ConstValue_Bool && c.kind == ConstValue_Bool) {
        var a = a as *BoolConstValue;
        var b = b as *BoolConstValue;
        var c = c as *BoolConstValue;
        return mk_bool_const_value(a.bool ? b.bool : c.bool);
    }
    return null;
}

func const_value_cast(value: *ConstValue, target: *Type): *ConstValue {
    if (type_eq(value.type, target)) {
        return value;
    }
    match (value.kind) {
        case ConstValue_Bool: {
            var value = value as *BoolConstValue;
            if (target.kind == Type_Int) {
                return mk_int_const_value(value.bool as Int, target);
            }
        }
        case ConstValue_Int: {
            var value = value as *IntConstValue;
            match (target.kind) {
                case Type_Bool: {
                    return mk_bool_const_value(value.int);
                }
                case Type_Int | Type_Enum: {
                    return mk_int_const_value(value.int, target);
                }
            }
        }
        case ConstValue_Null: {
            match (target.kind) {
                case Type_Bool: {
                    return mk_bool_const_value(false);
                }
                case Type_Int: {
                    return mk_int_const_value(0, target);
                }
                case Type_Ptr: {
                    return mk_null_const_value(target);
                }
            }
        }
        case ConstValue_String: {
            var value = value as *StringConstValue;
            if (target.kind == Type_Bool) {
                return mk_bool_const_value(true);
            }
        }
    }
    return null;
}
