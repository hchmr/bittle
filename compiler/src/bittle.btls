include "libc.btls";

//==============================================================================
//== misc.btl

struct Pos {
    file: *Char,
    row: Int32,
    col: Int32,
}

struct StringBuffer;

struct List;

func assert(cond: Bool, because: *Char);
func unreachable(function: *Char): !;

func error_at(pos: *Pos);
func die(msg: *Char): !;
func die_at(pos: *Pos, msg: *Char, ...args): !;

func sb_new(): *StringBuffer;
func sb_free(self: *StringBuffer);
func sb_len(self: *StringBuffer): Int;
func sb_get(self: *StringBuffer, i: Int): Char;
func sb_cstr(self: *StringBuffer): *Char;
func sb_ensure_cap(self: *StringBuffer, cap: Int);
func sb_shrink_to_fit(self: *StringBuffer);
func sb_vprintf(self: *StringBuffer, fmt: *Char, args: ...);
func sb_printf(self: *StringBuffer, fmt: *Char, ...args);
func sb_push(self: *StringBuffer, c: Char);
func sb_append(self: *StringBuffer, s: *Char);
func sb_finish(self: *StringBuffer): *Char;

func list_new(): *List;
func list_new_with_cap(cap: Int): *List;
func list_len(self: *List): Int;
func list_get(self: *List, i: Int): *Void;
func list_set(self: *List, i: Int, elem: *Void);
func list_push(self: *List, elem: *Void);
func list_pop(self: *List): *Void;

func str_eq(a: *Char, b: *Char): Bool;

func align_up(size: Int , align: Int): Int;
func ilog2(n: Int): Int;
func iabs(n: Int): Int;
func int_min(a: Int, b: Int): Int;
func int_max(a: Int, b: Int): Int;

func read_file(file: *File): *Char;
func get_directory(path: *Char): *Char;
func join_paths(dir: *Char, file: *Char): *Char;

func is_whitespace(c: Int32): Bool;
func is_digit(c: Int32, base: Int): Bool;
func is_word_start(c: Int32): Bool;
func is_word_part(c: Int32): Bool;
func is_print(c: Int32): Bool;

func parse_char(s: *Char): Char;
func parse_string(s: *Char): *StringBuffer;

//==============================================================================
//== type.btl

enum TypeKind {
    Type_Void,
    Type_Bool,
    Type_Int,
    Type_Ptr,
    Type_Arr,
    Type_Enum,
    Type_Record,
    Type_Never,
    Type_RestParam,
}

struct Type {
    kind: TypeKind,
}

struct VoidType: Type {
    kind = Type_Void,
}

struct BoolType: Type {
    kind = Type_Bool,
}

struct IntType: Type {
    kind = Type_Int,
    size: Int,
}

struct PtrType: Type {
    kind = Type_Ptr,
    pointee: *Type,
}

struct ArrType: Type {
    kind = Type_Arr,
    elem: *Type,
    size: Int,
}

struct EnumType: Type {
    kind = Type_Enum,
    sym: *EnumSym,
}

struct RecordType: Type {
    kind = Type_Record,
    sym: *RecordSym,
}

struct NeverType: Type {
    kind = Type_Never,
}

struct RestParamType: Type {
    kind = Type_RestParam,
}

func mk_type(kind: Int32): *Type;
func mk_void_type(): *VoidType;
func mk_never_type(): *NeverType;
func mk_bool_type(): *BoolType;
func mk_int_type(size: Int): *IntType;
func mk_ptr_type(pointee: *Type): *PtrType;
func mk_array_type(elem: *Type, size: Int): *ArrType;
func mk_enum_type(sym: *EnumSym): *EnumType;
func mk_record_type(sym: *RecordSym): *RecordType;
func mk_rest_param_type(): *Type;

func type_eq(t1: *Type, t2: *Type): Bool;
func type_implicitly_convertible(src: *Type, dst: *Type): Bool;
func type_convertible(src: *Type, dst: *Type): Bool;
func type_size(type: *Type): Int;
func type_align(type: *Type): Int;
func is_scalar(type: *Type): Bool;
func is_composite(type: *Type): Bool;
func is_pass_by_ptr(type: *Type): Bool;
func is_sized(type: *Type): Bool;

func sb_pretty_type(sb: *StringBuffer, type: *Type);
func pretty_type(type: *Type): *Char;

//==============================================================================
//== const.btl

enum ValueKind {
    ConstValue_Bool,
    ConstValue_Int,
    ConstValue_Null,
    ConstValue_String,
}

struct ConstValue {
    kind: ValueKind,
    type: *Type,
}

struct BoolConstValue: ConstValue {
    kind = ConstValue_Bool,
    bool: Bool,
}

struct IntConstValue: ConstValue {
    kind = ConstValue_Int,
    int: Int,
}

struct NullConstValue: ConstValue {
    kind = ConstValue_Null,
}

struct StringConstValue: ConstValue {
    kind = ConstValue_String,
    string: *StringBuffer,
}

func const_value_unop(op: TokKind, a: *ConstValue): *ConstValue;
func const_value_binop(op: TokKind, a: *ConstValue, b: *ConstValue): *ConstValue;
func const_value_ternop(a: *ConstValue, b: *ConstValue, c: *ConstValue): *ConstValue;
func const_value_cast(value: *ConstValue, target: *Type): *ConstValue;

func mk_bool_const_value(value: Bool): *BoolConstValue;
func mk_int_const_value(value: Int, type: *Type): *IntConstValue;
func mk_null_const_value(type: *Type): *NullConstValue;
func mk_string_const_value(value: *StringBuffer): *StringConstValue;

//==============================================================================
//== sym.btl

enum SymKind {
    Sym_Enum,
    Sym_Record,
    Sym_Global,
    Sym_Const,
    Sym_Func,
    Sym_Local,
}

struct Sym {
    kind: SymKind,
    name: *Char,
    is_defined: Bool,
}

struct RecordField {
    name: *Char,
    type: *Type,
    default_value: *ConstValue,
    offset: Int,
}

struct EnumSym: Sym {
    kind = Sym_Enum,
    size: Int,
}

struct RecordSym: Sym {
    kind = Sym_Record,
    is_union: Bool,
    base: *RecordSym,
    fields: *List, // List<RecordField>
    unpadded_size: Int,
    align: Int,
}

struct GlobalSym: Sym {
    kind = Sym_Global,
    type: *Type,
}

struct ConstSym: Sym {
    kind = Sym_Const,
    value: *ConstValue,
}

struct FuncParam {
    name: *Char,
    type: *Type,
    default_value: *ConstValue,
}

struct FuncSym: Sym {
    kind = Sym_Func,
    params: *List, // List<FuncParam>
    return_type: *Type,
    is_variadic: Bool,
    rest_param_name: *Char,
    locals: *List, // List<Sym>
    temps: *List, // List<HirTemp>
    body: *Stmt,
}

struct LocalSym: Sym {
    kind = Sym_Local,
    type: *Type,
    slot_id: Int,
    is_indirect: Bool,
}

func find_record_field_by_name(sym: *Sym, name: *Char): Int;
func find_record_field_by_type(sym: *Sym, type: *Type): Int;
func find_param_by_name(sym: *FuncSym, name: *Char): Int;

//==============================================================================
//== tok.btl

// NOTE: When updating this declaration, remember to also update `pretty_tok_kind` and `lookup_keyword`.
enum TokKind {
    Tok_Eof = 1,
    // Identifier
    Tok_Ident,
    // Literals
    Tok_Int,
    Tok_String,
    Tok_Char,
    // Keywords
    Tok_As,
    Tok_Break,
    Tok_Case,
    Tok_Const,
    Tok_Continue,
    Tok_Else,
    Tok_Enum,
    Tok_Extern,
    Tok_False,
    Tok_For,
    Tok_Func,
    Tok_If,
    Tok_Include,
    Tok_Is,
    Tok_Match,
    Tok_Null,
    Tok_Return,
    Tok_Sizeof,
    Tok_Struct,
    Tok_True,
    Tok_Typeof,
    Tok_Underscore,
    Tok_Union,
    Tok_Var,
    Tok_While,
    // Symbols
    Tok_LParen,
    Tok_RParen,
    Tok_LBrace,
    Tok_RBrace,
    Tok_LBracket,
    Tok_RBracket,
    Tok_Comma,
    Tok_Semicolon,
    Tok_Dot,
    Tok_DotDot,
    Tok_DotDotDot,
    Tok_Colon,
    Tok_ColonColon,
    Tok_At,
    Tok_Arrow,
    Tok_Plus,
    Tok_PlusEq,
    Tok_Minus,
    Tok_MinusEq,
    Tok_Star,
    Tok_StarEq,
    Tok_Slash,
    Tok_SlashEq,
    Tok_Percent,
    Tok_PercentEq,
    Tok_Amp,
    Tok_AmpEq,
    Tok_AmpAmp,
    Tok_Bar,
    Tok_BarEq,
    Tok_BarBar,
    Tok_Caret,
    Tok_CaretEq,
    Tok_Bang,
    Tok_Tilde,
    Tok_Question,
    Tok_Lt,
    Tok_LtLtEq,
    Tok_LtLt,
    Tok_LtEq,
    Tok_Gt,
    Tok_GtEq,
    Tok_GtGt,
    Tok_GtGtEq,
    Tok_Eq,
    Tok_EqEq,
    Tok_BangEq,
}

struct Tok {
    kind: TokKind,
    pos: Pos,
    lexeme: *Char,
}

func pretty_tok_kind(kind: TokKind): *Char;

//==============================================================================
//== ast.btl

// Type

enum TypeExprKind {
    TypeExpr_Named,
    TypeExpr_Ptr,
    TypeExpr_Arr,
    TypeExpr_Never,
    TypeExpr_Typeof,
    TypeExpr_RestParam,
}

struct TypeExpr {
    kind: TypeExprKind,
    pos: Pos,
}

struct NamedTypeExpr: TypeExpr {
    kind = TypeExpr_Named,
    name: *Char,
}

struct PtrTypeExpr: TypeExpr {
    kind = TypeExpr_Ptr,
    pointee: *TypeExpr,
}

struct ArrTypeExpr: TypeExpr {
    kind = TypeExpr_Arr,
    elem: *TypeExpr,
    size: *Expr,
}

struct NeverTypeExpr: TypeExpr {
    kind = TypeExpr_Never,
}

struct TypeofTypeExpr: TypeExpr {
    kind = TypeExpr_Typeof,
    expr: *Expr,
}

struct RestParamTypeExpr: TypeExpr {
    kind = TypeExpr_RestParam,
}

// Literal

enum LiteralKind {
    Literal_Null,
    Literal_Bool,
    Literal_Int,
    Literal_Char,
    Literal_String,
}

struct Literal {
    kind: LiteralKind,
}

struct NullLiteral: Literal {
    kind = Literal_Null,
}

struct BoolLiteral: Literal {
    kind = Literal_Bool,
    value: Bool,
}
struct IntLiteral: Literal {
    kind = Literal_Int,
    value: Int,
}
struct CharLiteral: Literal {
    kind = Literal_Char,
    value: Char,
}
struct StringLiteral: Literal {
    kind = Literal_String,
    value: *StringBuffer,
}

// Pattern

enum PatternKind {
    Pattern_Grouped,
    Pattern_Literal,
    Pattern_Name,
    Pattern_Wildcard,
    Pattern_Var,
    Pattern_Range,
    Pattern_Or,
}

struct Pattern {
    kind: PatternKind,
    pos: Pos,
    type: *Type,
}

struct GroupedPattern: Pattern {
    kind = Pattern_Grouped,
    pattern: *Pattern,
}

struct LiteralPattern: Pattern {
    kind = Pattern_Literal,
    literal: *Literal,
    value: *ConstValue,
}

struct NamePattern: Pattern {
    kind = Pattern_Name,
    name: *Char,
    sym: *ConstSym,
}

struct WildcardPattern: Pattern {
    kind = Pattern_Wildcard,
}

struct VarPattern: Pattern {
    kind = Pattern_Var,
    name: *Char,
    pattern: *Pattern,
    sym: *LocalSym,
}

struct RangePattern: Pattern {
    kind = Pattern_Range,
    lower: *Expr,
    upper: *Expr,
    lower_value: *ConstValue,
    upper_value: *ConstValue,
}

struct OrPattern: Pattern {
    kind = Pattern_Or,
    patterns: *List, // List<Pattern>
}

// Expr

enum ExprKind {
    Expr_Ident,
    Expr_Literal,
    Expr_Array,
    Expr_Call,
    Expr_Index,
    Expr_Member,
    Expr_Sizeof,
    Expr_Unary,
    Expr_Binary,
    Expr_Ternary,
    Expr_Is,
    Expr_Cast,
    Expr_Record,
}

struct Expr {
    kind: ExprKind,
    pos: Pos,
    type: *Type,
    const_value: *ConstValue,
}

struct IdentExpr: Expr {
    kind = Expr_Ident,
    name: *Char,
    sym: *Sym,
}

struct LiteralExpr: Expr {
    kind = Expr_Literal,
    literal: *Literal,
}

struct ArrayExpr: Expr {
    kind = Expr_Array,
    elems: *List, // List<Expr>
}

struct CallExpr: Expr {
    kind = Expr_Call,
    callee: *Expr,
    args: *List, // List<CallArg>
    resolved_callee: *FuncSym,
}

struct CallArg {
    label: *Char,
    expr: *Expr,
    positional_index: Int,
}

struct IndexExpr: Expr {
    kind = Expr_Index,
    indexee: *Expr,
    index: *Expr,
}

struct MemberExpr: Expr {
    kind = Expr_Member,
    left: *Expr,
    name: *Char,
    resolved_field: *RecordField,
}

struct SizeofExpr: Expr {
    kind = Expr_Sizeof,
    type_expr: *TypeExpr,
    size: Int,
}

struct UnaryExpr: Expr {
    kind = Expr_Unary,
    op: TokKind,
    right: *Expr,
}

struct BinaryExpr: Expr {
    kind = Expr_Binary,
    op: TokKind,
    left: *Expr,
    right: *Expr,
}

struct TernaryExpr: Expr {
    kind = Expr_Ternary,
    cond: *Expr,
    then_expr: *Expr,
    else_expr: *Expr,
}

struct IsExpr: Expr {
    kind = Expr_Is,
    left: *Expr,
    pattern: *Pattern,
}

struct CastExpr: Expr {
    kind = Expr_Cast,
    expr: *Expr,
    type_expr: *TypeExpr,
}

struct FieldInitializer {
    pos: Pos,
    name: *Char,
    expr: *Expr,
}

struct RecordExpr: Expr {
    kind = Expr_Record,
    name: *Char,
    fields: *List, // List<FieldInit>
}

// Stmt

enum StmtKind {
    Stmt_Block,
    Stmt_Const,
    Stmt_Local,
    Stmt_If,
    Stmt_Match,
    Stmt_While,
    Stmt_For,
    Stmt_Return,
    Stmt_Break,
    Stmt_Continue,
    Stmt_Expr,
}

struct Stmt {
    kind: StmtKind,
    pos: Pos,
}

struct BlockStmt: Stmt {
    kind = Stmt_Block,
    stmts: *List, // List<Stmt>
}

struct ConstStmt: Stmt {
    kind = Stmt_Const,
    decl: *ConstDecl,
}

struct LocalStmt: Stmt {
    kind = Stmt_Local,
    name: *Char,
    type: *TypeExpr,
    init: *Expr,
    sym: *LocalSym,
}

struct IfStmt: Stmt {
    kind = Stmt_If,
    cond: *Expr,
    then_stmt: *Stmt,
    else_stmt: *Stmt,
}

struct MatchCase {
    pattern: *Pattern,
    guard: *Expr,
    body: *Stmt,
}

struct MatchStmt: Stmt {
    kind = Stmt_Match,
    scrutinee: *Expr,
    cases: *List, // List<MatchCase>
}

struct WhileStmt: Stmt {
    kind = Stmt_While,
    cond: *Expr,
    body: *Stmt,
}

struct ForStmt: Stmt {
    kind = Stmt_For,
    init: *Stmt,
    cond: *Expr,
    step: *Expr,
    body: *Stmt,
}

struct ReturnStmt: Stmt {
    kind = Stmt_Return,
    expr: *Expr,
}

struct BreakStmt: Stmt {
    kind = Stmt_Break,
}

struct ContinueStmt: Stmt {
    kind = Stmt_Continue,
}

struct ExprStmt: Stmt {
    kind = Stmt_Expr,
    expr: *Expr,
}

// Decl

enum DeclKind {
    Decl_Record,
    Decl_Func,
    Decl_Enum,
    Decl_Const,
    Decl_Global,
}

struct Decl {
    kind: DeclKind,
    pos: Pos,
}

struct RecordFieldDecl {
    pos: Pos,
    name: *Char,
    default_value: *Expr,
    type: *TypeExpr,
}

struct RecordDecl: Decl {
    kind = Decl_Record,
    is_union: Bool,
    name: *Char,
    base: *TypeExpr,
    fields: *List, // List<RecordFieldDecl>
    sym: *RecordSym,
}

struct FuncParamDecl {
    pos: Pos,
    name: *Char,
    type: *TypeExpr,
    default_value: *Expr,
}

struct RestParamDecl {
    pos: Pos,
    name: *Char,
}

struct FuncDecl: Decl {
    kind = Decl_Func,
    is_extern: Bool,
    name: *Char,
    params: *List, // List<FuncParam>
    rest_param: *RestParamDecl,
    return_type: *TypeExpr,
    body: *Stmt,
    sym: *FuncSym,
}

struct EnumMember {
    pos: Pos,
    name: *Char,
    value: *Expr,
    sym: *ConstSym,
}

struct EnumDecl: Decl {
    kind = Decl_Enum,
    name: *Char,
    members: *List, // List<EnumMember>
    sym: *EnumSym,
}

struct ConstDecl: Decl {
    kind = Decl_Const,
    name: *Char,
    type: *TypeExpr,
    value: *Expr,
    sym: *ConstSym,
}

struct GlobalDecl: Decl {
    kind = Decl_Global,
    is_extern: Bool,
    name: *Char,
    type: *TypeExpr,
    sym: *GlobalSym,
}

struct Ast {
    decls: *List, // List<Decl>
}

func is_lvalue(expr: *Expr): Bool;

//==============================================================================
//== hir.btl

struct HirTemp {
    type: *Type,
    slot_id: Int,
}

enum HirOpKind {
    HirOp_Or,
    HirOp_Xor,
    HirOp_And,
    HirOp_Shl,
    HirOp_Shr,
    HirOp_Eq,
    HirOp_Ne,
    HirOp_Lt,
    HirOp_Le,
    HirOp_Gt,
    HirOp_Ge,
    HirOp_Add,
    HirOp_Sub,
    HirOp_Mul,
    HirOp_Div,
    HirOp_Rem,
}

enum HirExprKind {
    // Composition primitives
    HirExpr_Skip,
    HirExpr_Seq,

    // Constants
    HirExpr_Int,
    HirExpr_Str,

    // Variables
    HirExpr_Var,
    HirExpr_Temp,

    // Control flow
    HirExpr_Cond,
    HirExpr_Loop,
    HirExpr_Jump,
    HirExpr_Return,

    // Expressions
    HirExpr_BinaryOp,
    HirExpr_Call,
    HirExpr_Member,
    HirExpr_Index,
    HirExpr_Deref,
    HirExpr_Addr,
    HirExpr_Assign,
    HirExpr_Cast,

    // Special
    HirExpr_Unreachable,
}

struct HirExpr {
    kind: HirExprKind,
    type: *Type,
    pos: Pos,
}

struct HirSkipExpr: HirExpr {
    kind = HirExpr_Skip,
}

struct HirSeqExpr: HirExpr {
    kind = HirExpr_Seq,
    first: *HirExpr,
    second: *HirExpr,
}

struct HirIntExpr: HirExpr {
    kind = HirExpr_Int,
    value: Int,
}

struct HirStrExpr: HirExpr {
    kind = HirExpr_Str,
    value: *StringBuffer,
}

struct HirVarExpr: HirExpr {
    kind = HirExpr_Var,
    sym: *Sym,
}

struct HirTempExpr: HirExpr {
    kind = HirExpr_Temp,
    temp: *HirTemp,
}

struct HirCondExpr: HirExpr {
    kind = HirExpr_Cond,
    cond: *HirExpr,
    then_expr: *HirExpr,
    else_expr: *HirExpr,
}

struct HirLoopExpr: HirExpr {
    kind = HirExpr_Loop,
    cond: *HirExpr,
    body: *HirExpr,
    step: *HirExpr,
}

struct HirReturnExpr: HirExpr {
    kind = HirExpr_Return,
    expr: *HirExpr,
}

struct HirJumpExpr: HirExpr {
    kind = HirExpr_Jump,
    is_break: Bool,
}

struct HirAssignExpr: HirExpr {
    kind = HirExpr_Assign,
    dst: *HirExpr,
    src: *HirExpr,
}

struct HirBinaryOpExpr: HirExpr {
    kind = HirExpr_BinaryOp,
    op: HirOpKind,
    left: *HirExpr,
    right: *HirExpr,
}

struct HirCallExpr: HirExpr {
    kind = HirExpr_Call,
    callee: *FuncSym,
    args: **HirExpr,
    n_args: Int,
}

struct HirMemberExpr: HirExpr {
    kind = HirExpr_Member,
    left: *HirExpr,
    name: *Char,
    field: *RecordField,
}

struct HirIndexExpr: HirExpr {
    kind = HirExpr_Index,
    indexee: *HirExpr,
    index: *HirExpr,
}

struct HirDerefExpr: HirExpr {
    kind = HirExpr_Deref,
    expr: *HirExpr,
}

struct HirAddrExpr: HirExpr {
    kind = HirExpr_Addr,
    expr: *HirExpr,
}

struct HirCastExpr: HirExpr {
    kind = HirExpr_Cast,
    expr: *HirExpr,
}

struct HirUnreachableExpr: HirExpr {
    kind = HirExpr_Unreachable,
}

func hir_is_lvalue(e: *HirExpr): Bool;
func hir_dump(e: *HirExpr);

//==============================================================================
//== lexer.btl

struct Lexer;

func lexer_new(file_name: *Char, input: *Char): *Lexer;
func lexer_next(self: *Lexer): Tok;

//==============================================================================
//== parser.btl

struct Parser;

func parser_new(lexer: *Lexer): *Parser;
func parser_run(self: *Parser): *Ast;

//==============================================================================
//== elab.btl

func elab(ast: *Ast): *List; // *List<*Sym>

//==============================================================================
//== hir_lower.btl

func hir_lower(func_: *FuncSym, body: *Stmt): *HirExpr;

//==============================================================================
//== call_layout.btl

enum ArgLocationKind {
    ArgLocation_Reg,
    ArgLocation_Stack,
}

struct ArgLocationBase {
    kind: ArgLocationKind,
}

struct RegArgLocation: ArgLocationBase {
    kind = ArgLocation_Reg,
    reg: Int,
    n_regs: Int,
}

struct StackArgLocation: ArgLocationBase {
    kind = ArgLocation_Stack,
    offset: Int,
}

union ArgLocation: ArgLocationBase {
    Reg: RegArgLocation,
    Stack: StackArgLocation,
}

struct RetLocation {
    is_reg: Bool,
    is_indirect: Bool,
// if is_reg:
    n_regs: Int,
}

struct CallLayout {
    n_args: Int,
    arg_locs: *ArgLocation,
    ret_loc: RetLocation,
    stack_space: Int,
    next_gpr: Int,
}

func call_layout_drop(self: *CallLayout);
func get_call_layout(n_args: Int, arg_types: **Type, ret_type: *Type): CallLayout;
func get_call_layout_for_call(e: *HirCallExpr): CallLayout;
func get_call_layout_for_func(f: *FuncSym): CallLayout;

//==============================================================================
//== asm.btl

enum Reg {
    Reg_X0, Reg_X1, Reg_X2, Reg_X3, Reg_X4, Reg_X5, Reg_X6, Reg_X7, Reg_X8,
    Reg_X9, Reg_X10, Reg_X11, Reg_X12, Reg_X13, Reg_X14, Reg_X15,
    Reg_X16, Reg_X17, Reg_X18, Reg_X19, Reg_X20, Reg_X21, Reg_X22, Reg_X23, Reg_X24,
    Reg_X25, Reg_X26, Reg_X27, Reg_X28, Reg_X29, Reg_X30, Reg_X31,
    FP = Reg_X29, LR = Reg_X30, SP = Reg_X31,
}

const N_REGS = 32;
const N_CALLEE_SAVED_REGS = Reg_X28 - Reg_X19 + 1;

struct AsmInstrBuilder;

struct AsmFunc {
    name: *Char,
    builder: *AsmInstrBuilder,
    frame_size: Int,
    n_spills: Int,
    spills: [Reg; N_REGS],
    spills_size: Int,
}


//== Instruction building


func asm_builder_new(): *AsmInstrBuilder;


// Data Movement


// mov {xd}, {x1}
func asm_write_mov_r(builder: *AsmInstrBuilder, width: Int, xd: Reg, x1: Reg);

// mov {xd}, #{value}
//
// movz {xd}, #{value & 0xffff}
// ...
// movk {xd}, #{value >> 48}, lsl 48
func asm_write_mov_i(builder: *AsmInstrBuilder, width: Int, xd: Reg, value: Int);

// ldr {xd}, [{xs}, #{offset}]
func asm_write_ldrs_ri(builder: *AsmInstrBuilder, width: Int, xd: Reg, xs: Reg, offset: Int);

// ldr {xd}, [{xs}]
func asm_write_ldrs_r(builder: *AsmInstrBuilder, width: Int, xd: Reg, xs: Reg);

// ldr {xd}, [fp, #{frame_start_from_fp + offset}]
func asm_write_ldrs_r_fp_from_frame_start(builder: *AsmInstrBuilder, width: Int, xd: Reg, offset: Int);

// ldr {xd}, [sp, #{stack_size + fp_offset}]
func asm_write_ldrs_r_sp_from_fp(builder: *AsmInstrBuilder, width: Int, xd: Reg, fp_offset: Int);

// str {xs}, [{xd}, #{offset}]
func asm_write_str_ri(builder: *AsmInstrBuilder, width: Int, xs: Reg, xd: Reg, offset: Int);

// str {xs}, [{xd}]
func asm_write_str_r(builder: *AsmInstrBuilder, width: Int, xs: Reg, xd: Reg);

// str {xs}, [sp, #{stack_size + fp_offset}]
func asm_write_str_r_sp_from_fp(builder: *AsmInstrBuilder, width: Int, xs: Reg, fp_offset: Int);


// Arithmetic, Logic and Comparison


// sxt {xd}, {x1}
func asm_write_sxt(builder: *AsmInstrBuilder, dst_size: Int, src_size: Int, xd: Reg, x1: Reg);

// {op} {xd}, {x1}, {x2}
func asm_write_binary_op_rr(builder: *AsmInstrBuilder, op: *Char, xd: Reg, x1: Reg, x2: Reg);

// {op} {xd}, {x1}, #{imm}
func asm_write_binary_op_ri(builder: *AsmInstrBuilder, op: *Char, xd: Reg, x1: Reg, imm: Int);

// {op} {xd}, {x1}, {x2}, {x3}
func asm_write_binary_op_rrr(builder: *AsmInstrBuilder, op: *Char, xd: Reg, x1: Reg, x2: Reg, x3: Reg);

// add {xd}, {x1}, #{imm}
func asm_write_add_ri(builder: *AsmInstrBuilder, width: Int, xd: Reg, x1: Reg, imm: Int);

// add {xd}, fp, #{frame_start_from_fp + offset}
func asm_write_add_r_fp_from_frame_start(builder: *AsmInstrBuilder, width: Int, xd: Reg, offset: Int);

// add {xd}, {x1}, {x2}
func asm_write_add_rr(builder: *AsmInstrBuilder, width: Int, xd: Reg, x1: Reg, x2: Reg);

// cmp {xd}, {x1}
func asm_write_cmp_rr(builder: *AsmInstrBuilder, width: Int, xd: Reg, x1: Reg);

// cset {xd}, {op}
func asm_write_cset(builder: *AsmInstrBuilder, width: Int, xd: Reg, op: *Char);


// Control Flow

// cbz {xd}, {label}
func asm_write_cbz(builder: *AsmInstrBuilder, xd: Reg, counter: Int, label_suffix: *Char);

// b {label}
func asm_write_b(builder: *AsmInstrBuilder, counter: Int, suffix: *Char);

// bl {name}
func asm_write_bl(builder: *AsmInstrBuilder, name: *Char);


// Addressing


// addrp {xd}, {name}
// add {xd}, {xd}, :lo12:{name}
func asm_write_global_addr(builder: *AsmInstrBuilder, xd: Reg, name: *Char);

// addrp {xd}, :got:{name}
// ldr {xd}, [{xd}, :got_lo12:{name}]
func asm_write_got_global_addr(builder: *AsmInstrBuilder, xd: Reg, name: *Char);

// addrp {xd}, str{id}
// add {xd}, {xd}, :lo12:str{id}
func asm_write_string_addr(builder: *AsmInstrBuilder, xd: Reg, id: Int);


// Miscellaneous


// .L{counter}.{suffix}:
func asm_write_label(builder: *AsmInstrBuilder, counter: Int, suffix: *Char);

// {raw}
func asm_write_raw(builder: *AsmInstrBuilder, raw: *Char);

// // {comment}
func asm_write_comment(builder: *AsmInstrBuilder, fmt: *Char, ...args);

// \b // {comment}
func asm_add_comment_to_last(builder: *AsmInstrBuilder, fmt: *Char, ...args);


//== Printing Assembly


func asm_print_func(fun: *AsmFunc);
func asm_print_global(name: *Char, size: Int, align: Int);
func asm_print_string(id: Int, str: *StringBuffer);

//==============================================================================
//== codegen.btl

func emit_program(syms: *List);
