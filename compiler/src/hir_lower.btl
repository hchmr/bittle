include "bittle.btls";

func translate_binary_op(tok_kind: Int32): Int32 {
    return
        tok_kind == Tok_Amp ? HirOp_And :
        tok_kind == Tok_Bar ? HirOp_Or :
        tok_kind == Tok_Caret ? HirOp_Xor :
        tok_kind == Tok_LtLt ? HirOp_Shl :
        tok_kind == Tok_GtGt ? HirOp_Shr :
        tok_kind == Tok_EqEq ? HirOp_Eq :
        tok_kind == Tok_BangEq ? HirOp_Ne :
        tok_kind == Tok_Lt ? HirOp_Lt :
        tok_kind == Tok_LtEq ? HirOp_Le :
        tok_kind == Tok_Gt ? HirOp_Gt :
        tok_kind == Tok_GtEq ? HirOp_Ge :
        tok_kind == Tok_Plus ? HirOp_Add :
        tok_kind == Tok_Minus ? HirOp_Sub :
        tok_kind == Tok_Star ? HirOp_Mul :
        tok_kind == Tok_Slash ? HirOp_Div :
        tok_kind == Tok_Percent ? HirOp_Rem :
        unreachable("translate_binary_op");
}

func translate_assign_op(tok_kind: Int32): Int32 {
    return
        tok_kind == Tok_AmpEq ? HirOp_And :
        tok_kind == Tok_BarEq ? HirOp_Or :
        tok_kind == Tok_CaretEq ? HirOp_Xor :
        tok_kind == Tok_LtLtEq ? HirOp_Shl :
        tok_kind == Tok_GtGtEq ? HirOp_Shr :
        tok_kind == Tok_PlusEq ? HirOp_Add :
        tok_kind == Tok_MinusEq ? HirOp_Sub :
        tok_kind == Tok_StarEq ? HirOp_Mul :
        tok_kind == Tok_SlashEq ? HirOp_Div :
        tok_kind == Tok_PercentEq ? HirOp_Rem :
        unreachable("translate_assign_op");
}

func mk_skip_stmt(pos: *Pos): *HirExpr {
    var result: *HirExpr = calloc(1, sizeof(HirExpr));
    *result = HirExpr {
        kind: HirExpr_Skip,
        type: mk_void_type(),
        pos: *pos,
    };
    return result;
}

func hir_mk_seq_expr(first: *HirExpr, second: *HirExpr): *HirSeqExpr {
    var result: *HirSeqExpr = calloc(1, sizeof(HirSeqExpr));
    *result = HirSeqExpr {
        kind: HirExpr_Seq,
        type: second.type,
        pos: first.pos,
        first,
        second,
    };
    return result;
}

func hir_mk_int_expr(value: Int, type: *Type, pos: *Pos): *HirIntExpr {
    var result: *HirIntExpr = calloc(1, sizeof(HirIntExpr));
    *result = HirIntExpr {
        kind: HirExpr_Int,
        type,
        pos: *pos,
        value,
    };
    return result;
}

func hir_mk_str_expr(value: *StringBuffer, pos: *Pos): *HirStrExpr {
    var result: *HirStrExpr = calloc(1, sizeof(HirStrExpr));
    *result = HirStrExpr {
        kind: HirExpr_Str,
        type: mk_ptr_type(mk_int_type(1)),
        pos: *pos,
        value,
    };
    return result;
}

func hir_mk_var_expr(sym: *Sym, type: *Type, pos: *Pos): *HirVarExpr {
    var result: *HirVarExpr = calloc(1, sizeof(HirVarExpr));
    *result = HirVarExpr {
        kind: HirExpr_Var,
        type,
        pos: *pos,
        sym,
    };
    return result;
}

func hir_mk_temp_expr(temp: *HirTemp, pos: *Pos): *HirTempExpr {
    var result: *HirTempExpr = calloc(1, sizeof(HirTempExpr));
    *result = HirTempExpr {
        kind: HirExpr_Temp,
        type: temp.type,
        pos: *pos,
        temp,
    };
    return result;
}

func hir_mk_cond_expr(cond: *HirExpr, then_expr: *HirExpr, else_expr: *HirExpr, pos: *Pos): *HirCondExpr {
    var result: *HirCondExpr = calloc(1, sizeof(HirCondExpr));
    *result = HirCondExpr {
        kind: HirExpr_Cond,
        type: then_expr.type,
        pos: *pos,
        cond,
        then_expr,
        else_expr,
    };
    return result;
}

func hir_mk_loop_expr(cond: *HirExpr, body: *HirExpr, step: *HirExpr, pos: *Pos): *HirLoopExpr {
    var result: *HirLoopExpr = calloc(1, sizeof(HirLoopExpr));
    *result = HirLoopExpr {
        kind: HirExpr_Loop,
        type: body.type,
        pos: *pos,
        cond,
        body,
        step,
    };
    return result;
}

func hir_mk_return_expr(expr: *HirExpr, pos: *Pos): *HirReturnExpr {
    var result: *HirReturnExpr = calloc(1, sizeof(HirReturnExpr));
    *result = HirReturnExpr {
        kind: HirExpr_Return,
        type: mk_void_type(),
        pos: *pos,
        expr,
    };
    return result;
}

func hir_mk_jump_expr(is_break: Bool, pos: *Pos): *HirJumpExpr {
    var result: *HirJumpExpr = calloc(1, sizeof(HirJumpExpr));
    *result = HirJumpExpr {
        kind: HirExpr_Jump,
        type: mk_void_type(),
        pos: *pos,
        is_break,
    };
    return result;
}

func hir_mk_assign_expr(dst: *HirExpr, src: *HirExpr): *HirAssignExpr {
    var result: *HirAssignExpr = calloc(1, sizeof(HirAssignExpr));
    *result = HirAssignExpr {
        kind: HirExpr_Assign,
        type: mk_void_type(),
        pos: dst.pos,
        dst,
        src,
    };
    return result;
}

func hir_mk_binary_op_expr(op: Int32, left: *HirExpr, right: *HirExpr, type: *Type): *HirBinaryOpExpr {
    var result: *HirBinaryOpExpr = calloc(1, sizeof(HirBinaryOpExpr));
    *result = HirBinaryOpExpr {
        kind: HirExpr_BinaryOp,
        type,
        pos: left.pos,
        op,
        left,
        right,
    };
    return result;
}

func hir_mk_neg_expr(expr: *HirExpr): *HirExpr {
    var zero = hir_mk_int_expr(0, expr.type, &expr.pos);
    return hir_mk_binary_op_expr(HirOp_Sub, zero, expr, expr.type);
}

func hir_mk_not_expr(expr: *HirExpr): *HirExpr {
    var one = hir_mk_int_expr(1, expr.type, &expr.pos);
    return hir_mk_binary_op_expr(HirOp_Xor, expr, one, expr.type);
}

func hir_mk_bit_not_expr(expr: *HirExpr): *HirExpr {
    var minus_one = hir_mk_int_expr(-1, expr.type, &expr.pos);
    return hir_mk_binary_op_expr(HirOp_Xor, expr, minus_one, expr.type);
}

func hir_mk_call_expr(callee: *FuncSym, args: **HirExpr, n_args: Int, pos: *Pos): *HirCallExpr {
    var result: *HirCallExpr = calloc(1, sizeof(HirCallExpr));
    *result = HirCallExpr {
        kind: HirExpr_Call,
        type: callee.return_type,
        pos: *pos,
        callee,
        args,
        n_args,
    };
    return result;
}

func hir_mk_member_expr(left: *HirExpr, name: *Char, field_index: Int, field_type: *Type): *HirMemberExpr {
    var result: *HirMemberExpr = calloc(1, sizeof(HirMemberExpr));
    *result = HirMemberExpr {
        kind: HirExpr_Member,
        type: field_type,
        pos: left.pos,
        left,
        name,
        field_index,
    };
    return result;
}

func hir_mk_index_expr(indexee: *HirExpr, index: *HirExpr): *HirIndexExpr {
    assert(
        indexee.type.kind == Type_Ptr || indexee.type.kind == Type_Arr,
        "hir_mk_index_expr: indexee should have a pointer or array type"
    );
    var result_type = indexee.type.kind == Type_Ptr
        ? (indexee.type as *PtrType).pointee
        : (indexee.type as *ArrType).elem;

    var result: *HirIndexExpr = calloc(1, sizeof(HirIndexExpr));
    *result = HirIndexExpr {
        kind: HirExpr_Index,
        type: result_type,
        pos: indexee.pos,
        indexee,
        index,
    };
    return result;
}

func hir_mk_deref_expr(expr: *HirExpr, pos: *Pos): *HirDerefExpr {
    assert(expr.type.kind == Type_Ptr, "hir_mk_deref_expr: expr should have a pointer type");
    var deref_type = (expr.type as *PtrType).pointee;

    var result: *HirDerefExpr = calloc(1, sizeof(HirDerefExpr));
    *result = HirDerefExpr {
        kind: HirExpr_Deref,
        type: deref_type,
        pos: *pos,
        expr,
    };
    return result;
}

func hir_mk_addr_expr(expr: *HirExpr, pos: *Pos): *HirAddrExpr {
    var result: *HirAddrExpr = calloc(1, sizeof(HirAddrExpr));
    *result = HirAddrExpr {
        kind: HirExpr_Addr,
        type: mk_ptr_type(expr.type),
        pos: *pos,
        expr,
    };
    return result;
}

func hir_mk_cast_expr(expr: *HirExpr, type: *Type): *HirCastExpr {
    var result: *HirCastExpr = calloc(1, sizeof(HirCastExpr));
    *result = HirCastExpr {
        kind: HirExpr_Cast,
        type,
        pos: expr.pos,
        expr,
    };
    return result;
}

func hir_mk_unreachable_expr(pos: *Pos, type: *Type): *HirExpr {
    var result: *HirExpr = calloc(1, sizeof(HirExpr));
    *result = HirExpr {
        kind: HirExpr_Unreachable,
        type,
        pos: *pos,
    };
    return result;
}

//==============================================================================
//== Context

struct Context {
    func_: *FuncSym,
}

func mk_temp_var(ctx: *Context, type: *Type): *HirTemp {
    var slot_id = list_len(ctx.func_.locals) + list_len(ctx.func_.temps);

    var temp: *HirTemp = calloc(1, sizeof(HirTemp));
    *temp = HirTemp { type, slot_id: slot_id };

    list_push(ctx.func_.temps, temp);

    return temp;
}

//==============================================================================
//== Constants

func lower_const_value(value: *ConstValue, pos: *Pos): *HirExpr {
    if (value.kind == ConstValue_Bool) {
        var value = value as *BoolConstValue;
        return hir_mk_int_expr(value.bool as Int, value.type, pos);
    } else if (value.kind == ConstValue_Int) {
        var value = value as *IntConstValue;
        return hir_mk_int_expr(value.int, value.type, pos);
    } else if (value.kind == ConstValue_Null) {
        return hir_mk_int_expr(0, value.type, pos);
    } else if (value.kind == ConstValue_String) {
        var value = value as *StringConstValue;
        return hir_mk_str_expr(value.string, pos);
    } else {
        unreachable("elab_ident_expr");
    }
}

//==============================================================================
//== Patterns

func lower_pattern(ctx: *Context, lhs: *HirExpr, pattern: *Pattern): *HirExpr;

func lower_grouped_pattern(ctx: *Context, lhs: *HirExpr, pattern: *GroupedPattern): *HirExpr {
    return lower_pattern(ctx, lhs, pattern.pattern);
}

func lower_literal_pattern(ctx: *Context, lhs: *HirExpr, pattern: *LiteralPattern): *HirExpr {
    /*
        Desugar
            lhs is 1
        to
            1 == lhs
    */
    var rhs = lower_const_value(pattern.value, &pattern.pos);
    return hir_mk_binary_op_expr(HirOp_Eq, lhs, rhs, mk_bool_type());
}

func lower_name_pattern(ctx: *Context, lhs: *HirExpr, pattern: *NamePattern): *HirExpr {
    /*
        Desugar
            lhs is x
        to
            lhs == x
    */
    var rhs = lower_const_value(pattern.sym.value, &pattern.pos);
    return hir_mk_binary_op_expr(HirOp_Eq, lhs, rhs, mk_bool_type());
}

func lower_wildcard_pattern(ctx: *Context, lhs: *HirExpr, pattern: *WildcardPattern): *HirExpr {
    /*
        Desugar
            lhs is _
        to
            1
    */
    return hir_mk_int_expr(1, mk_bool_type(), &pattern.pos);
}

func lower_var_pattern(ctx: *Context, lhs: *HirExpr, pattern: *VarPattern): *HirExpr {
    /*
        Desugar
            lhs is x @ p
        to
            x = lhs;
            x is p
    */
    var var_ = hir_mk_var_expr(pattern.sym, pattern.type, &pattern.pos);
    var assign = hir_mk_assign_expr(var_, lhs);
    var cond = lower_pattern(ctx, var_, pattern.pattern);
    return hir_mk_seq_expr(assign, cond);
}

func lower_range_pattern(ctx: *Context, lhs: *HirExpr, pattern: *RangePattern): *HirExpr {
    /*
        Desugar
            lhs is 1...3  ->  1 <= lhs ? lhs <= 3 : 0
            lhs is 1...   ->  1 <= lhs
            lhs is ...3   ->  lhs <= 3
            lhs is ...    ->  1
    */
    var lower = pattern.lower_value ? lower_const_value(pattern.lower_value, &pattern.pos) : null;
    var upper = pattern.upper_value ? lower_const_value(pattern.upper_value, &pattern.pos) : null;

    var lower_check = lower ? hir_mk_binary_op_expr(HirOp_Le, lower, lhs, mk_bool_type()) : null;
    var upper_check = upper ? hir_mk_binary_op_expr(HirOp_Le, lhs, upper, mk_bool_type()) : null;

    if (lower_check && upper_check) {
        var false_ = hir_mk_int_expr(0, mk_bool_type(), &pattern.pos);
        return hir_mk_cond_expr(lower_check, upper_check, false_, &pattern.pos);
    } else if (lower_check) {
        return lower_check;
    } else if (upper_check) {
        return upper_check;
    } else {
        return hir_mk_int_expr(1, mk_bool_type(), &pattern.pos);
    }
}

func lower_or_pattern(ctx: *Context, lhs: *HirExpr, pattern: *OrPattern): *HirExpr {
    /*
        Desugar
            lhs is p1 | p2 | p3
        to
            lhs is p1 ? 1 : (lhs is p2 ? 1 : lhs is p3)
    */

    var n_patterns = list_len(pattern.patterns);
    if (n_patterns == 0) {
        return hir_mk_int_expr(0, mk_bool_type(), &pattern.pos);
    }

    var last_index = n_patterns - 1;
    var last_pattern: *Pattern = list_get(pattern.patterns, last_index);
    var acc = lower_pattern(ctx, lhs, last_pattern);

    for (var i = last_index - 1; i >= 0; i -= 1) {
        var current_pattern: *Pattern = list_get(pattern.patterns, i);
        var current = lower_pattern(ctx, lhs, current_pattern);

        acc = hir_mk_cond_expr(current, hir_mk_int_expr(1, mk_bool_type(), &pattern.pos), acc, &pattern.pos);
    }

    return acc;
}

func lower_pattern(ctx: *Context, lhs: *HirExpr, pattern: *Pattern): *HirExpr {
    if (pattern.kind == Pattern_Grouped) {
        return lower_grouped_pattern(ctx, lhs, pattern as *GroupedPattern);
    } else if (pattern.kind == Pattern_Literal) {
        return lower_literal_pattern(ctx, lhs, pattern as *LiteralPattern);
    } else if (pattern.kind == Pattern_Name) {
        return lower_name_pattern(ctx, lhs, pattern as *NamePattern);
    } else if (pattern.kind == Pattern_Wildcard) {
        return lower_wildcard_pattern(ctx, lhs, pattern as *WildcardPattern);
    } else if (pattern.kind == Pattern_Var) {
        return lower_var_pattern(ctx, lhs, pattern as *VarPattern);
    } else if (pattern.kind == Pattern_Range) {
        return lower_range_pattern(ctx, lhs, pattern as *RangePattern);
    } else if (pattern.kind == Pattern_Or) {
        return lower_or_pattern(ctx, lhs, (pattern as *OrPattern));
    } else {
        unreachable("lower_pattern_infer");
    }
}

//==============================================================================
//== Expressions

func lower_expr(ctx: *Context, expr: *Expr): *HirExpr;

func lower_assign_expr(ctx: *Context, dst: *HirExpr, ast_src: *Expr, pos: *Pos): *HirExpr;

func lower_ident_expr(ctx: *Context, expr: *IdentExpr): *HirExpr {
    var sym = expr.sym;
    if (sym.kind == Sym_Global || sym.kind == Sym_Local) {
        return hir_mk_var_expr(sym, expr.type, &expr.pos);
    } else if (sym.kind == Sym_Const) {
        var value = (sym as *ConstSym).value;
        return lower_const_value(value, &expr.pos);
    } else {
        unreachable("elab_ident_expr");
    }
}

func lower_literal_expr(ctx: *Context, expr: *LiteralExpr): *HirExpr {
    var literal = expr.literal;

    var result: *HirExpr;
    if (literal.kind == Literal_Null) {
        result = hir_mk_int_expr(0, expr.type, &expr.pos);
    } else if (literal.kind == Literal_Bool) {
        result = hir_mk_int_expr((literal as *BoolLiteral).value as Int, expr.type, &expr.pos);
    } else if (literal.kind == Literal_Int) {
        result = hir_mk_int_expr((literal as *IntLiteral).value, expr.type, &expr.pos);
    } else if (literal.kind == Literal_Char) {
        result = hir_mk_int_expr((literal as *CharLiteral).value, expr.type, &expr.pos);
    } else if (literal.kind == Literal_String) {
        result = hir_mk_str_expr((literal as *StringLiteral).value, &expr.pos);
    } else {
        unreachable("elab_literal_expr");
    }
    return result;
}

func lower_array_expr(ctx: *Context, expr: *ArrayExpr): *HirExpr {
    die_at(&expr.pos, "Array literal outside of an assignment statement");
}

// All arguments are passed by value, but non-scalar rvalues
// are converted to lvalues here make code generation easier.
func lower_arg(ctx: *Context, expr: *Expr): *HirExpr {
    if (is_scalar(expr.type)) {
        return lower_expr(ctx, expr);
    } else if (is_lvalue(expr) && !is_pass_by_ptr(expr.type)) {
        // Already an lvalue. Can be safely passed directly since it's not passed by pointer which risks mutation.
        return lower_expr(ctx, expr);
    } else {
        /*
            Desugar
                e
            to
                temp t1: typeof(e);
                *(t1 = e; &t1)
            -> An lvalue instead of an rvalue
        */
        var temp_var = mk_temp_var(ctx, expr.type);
        var temp = hir_mk_temp_expr(temp_var, &expr.pos);
        var temp_init = lower_assign_expr(ctx, temp, expr, &expr.pos);
        var addr_temp = hir_mk_addr_expr(temp, &expr.pos);
        var sequence = hir_mk_seq_expr(temp_init, addr_temp);
        var deref = hir_mk_deref_expr(sequence, &expr.pos);
        return deref;
    }
}

func lower_call_expr(ctx: *Context, expr: *CallExpr, dest: *HirExpr): *HirExpr {
    var sym = expr.resolved_callee;
    var n_params = list_len(sym.params);

    var ast_args = expr.args;
    var n_ast_args = list_len(ast_args);

    var n_hir_args = int_max(n_params, n_ast_args);
    var hir_args: **HirExpr = calloc(n_hir_args, sizeof(*HirExpr));

    for (var i = 0; i < n_ast_args; i += 1) {
        var ast_arg: *CallArg = list_get(ast_args, i);
        var hir_arg = lower_arg(ctx, ast_arg.expr);

        assert(0 <= ast_arg.positional_index && ast_arg.positional_index < n_hir_args, "lower_call_expr: positional index out of bounds");
        hir_args[ast_arg.positional_index] = hir_arg;
    }


    for (var i = 0; i < n_hir_args; i += 1) {
        if (i >= n_params) {
            assert(hir_args[i], "lower_call_expr: variadic argument should be initialized");
            continue;
        }

        var param: *FuncParam = list_get(sym.params, i);
        if (hir_args[i]) {
            continue;
        }

        var default_value = param.default_value;
        assert(default_value, "lower_call_expr: missing argument should have a default value");

        hir_args[i] = lower_const_value(default_value, &expr.pos);
    }

    var hir_expr = hir_mk_call_expr(sym, hir_args, n_hir_args, &expr.pos);

    if (!dest && is_composite(sym.return_type)) {
        var temp_var = mk_temp_var(ctx, expr.type);
        dest = hir_mk_temp_expr(temp_var, &expr.pos);
    }

    if (dest) {
        return hir_mk_assign_expr(dest, hir_expr);
    } else {
        return hir_expr;
    }
}

func lower_index_expr(ctx: *Context, expr: *IndexExpr): *HirExpr {
    var ast_indexee = expr.indexee;
    var ast_index = expr.index;

    var hir_indexee = lower_expr(ctx, ast_indexee);
    var hir_index = lower_expr(ctx, ast_index);

    return hir_mk_index_expr(hir_indexee, hir_index);
}

func lower_member_expr(ctx: *Context, expr: *MemberExpr): *HirExpr {
    var ast_left = expr.left;
    var name = expr.name;
    var field_index = expr.resolved_field;

    var hir_left = lower_expr(ctx, ast_left);
    if (hir_left.type.kind == Type_Ptr) {
        hir_left = hir_mk_deref_expr(hir_left, &expr.pos);
    }

    return hir_mk_member_expr(hir_left, name, field_index, expr.type);
}

func lower_sizeof_expr(ctx: *Context, expr: *SizeofExpr): *HirExpr {
    var size = expr.size;
    return hir_mk_int_expr(size, expr.type, &expr.pos);
}

func lower_unary_expr(ctx: *Context, expr: *UnaryExpr): *HirExpr {
    var op = expr.op;
    var ast_right = expr.right;

    var result: *HirExpr;
    if (op == Tok_Minus) {
        var right = lower_expr(ctx, ast_right);
        result = hir_mk_neg_expr(right);
    } else if (op == Tok_Tilde) {
        var right = lower_expr(ctx, ast_right);
        result = hir_mk_bit_not_expr(right);
    } else if (op == Tok_Bang) {
        var right = lower_expr(ctx, ast_right);
        result = hir_mk_not_expr(right);
    } else if (op == Tok_Star) {
        var right = lower_expr(ctx, ast_right);
        result = hir_mk_deref_expr(right, &expr.pos);
    } else if (op == Tok_Amp) {
        if (is_lvalue(ast_right)) {
            var right = lower_expr(ctx, ast_right);
            result = hir_mk_addr_expr(right, &expr.pos);
        } else {
            /*
                Desugar
                    &f()
                to
                    temp t1: typeof(f());
                    t1 = f();
                    &t1
            */
            var temp_var = mk_temp_var(ctx, ast_right.type);
            var temp = hir_mk_temp_expr(temp_var, &expr.pos);
            var temp_init = lower_assign_expr(ctx, temp, ast_right, &ast_right.pos);
            var addr_temp = hir_mk_addr_expr(temp, &expr.pos);
            result = hir_mk_seq_expr(temp_init, addr_temp);
        }
    } else {
        unreachable("elab_unary_expr");
    }

    return result;
}

func lower_binary_expr(ctx: *Context, expr: *BinaryExpr): *HirExpr {
    var ast_op = expr.op;
    var ast_left = expr.left;
    var ast_right = expr.right;

    var left = lower_expr(ctx, ast_left);

    var result: *HirExpr;
    if (ast_op == Tok_Eq) {
        result = lower_assign_expr(ctx, left, ast_right, &expr.pos);
    } else if (ast_op == Tok_AmpEq || ast_op == Tok_BarEq || ast_op == Tok_CaretEq || ast_op == Tok_LtLtEq || ast_op == Tok_GtGtEq || ast_op == Tok_PlusEq || ast_op == Tok_MinusEq || ast_op == Tok_StarEq || ast_op == Tok_SlashEq || ast_op == Tok_PercentEq) {
        /*
            Desugar
                left op= right
            to
                temp t1: *typeof(left);
                t1 = &left;
                *t1 = *t1 op right;
        */
        var addr_left = hir_mk_addr_expr(left, &expr.pos);
        var typeof_addr_left = mk_ptr_type(addr_left.type);

        var temp_var = mk_temp_var(ctx, typeof_addr_left);
        var temp = hir_mk_temp_expr(temp_var, &expr.pos);
        var temp_init = hir_mk_assign_expr(temp, addr_left);

        var temp_deref = hir_mk_deref_expr(temp, &expr.pos);
        var right = lower_expr(ctx, ast_right);
        var op = translate_assign_op(ast_op);
        var computation = hir_mk_binary_op_expr(op, temp_deref, right, left.type);
        var assign_temp = hir_mk_assign_expr(temp_deref, computation);

        result = hir_mk_seq_expr(temp_init, assign_temp);
    } else if (ast_op == Tok_AmpAmp || ast_op == Tok_BarBar) {
        var right = lower_expr(ctx, ast_right);
        if (ast_op == Tok_AmpAmp) {
            result = hir_mk_cond_expr(left, right, hir_mk_int_expr(0, expr.type, &right.pos), &expr.pos);
        } else {
            result = hir_mk_cond_expr(left, hir_mk_int_expr(1, expr.type, &right.pos), right, &expr.pos);
        }
    } else if (ast_op == Tok_EqEq || ast_op == Tok_BangEq || ast_op == Tok_Lt || ast_op == Tok_LtEq || ast_op == Tok_Gt || ast_op == Tok_GtEq || ast_op == Tok_Amp || ast_op == Tok_Bar || ast_op == Tok_Caret || ast_op == Tok_LtLt || ast_op == Tok_GtGt || ast_op == Tok_Plus || ast_op == Tok_Minus || ast_op == Tok_Star || ast_op == Tok_Slash || ast_op == Tok_Percent) {
        var right = lower_expr(ctx, ast_right);
        var op = translate_binary_op(ast_op);
        result = hir_mk_binary_op_expr(op, left, right, expr.type);
    } else {
        unreachable("elab_binary_expr");
    }
    return result;
}

func lower_ternary_expr(ctx: *Context, expr: *TernaryExpr): *HirExpr {
    var ast_cond = expr.cond;
    var ast_then_expr = expr.then_expr;
    var ast_else_expr = expr.else_expr;

    var cond = lower_expr(ctx, ast_cond);
    var then_expr = lower_expr(ctx, ast_then_expr);
    var else_expr = lower_expr(ctx, ast_else_expr);

    return hir_mk_cond_expr(cond, then_expr, else_expr, &expr.pos);
}

func lower_cast_expr(ctx: *Context, expr: *CastExpr): *HirExpr {
    var ast_subexpr = expr.expr;
    var subexpr = lower_expr(ctx, ast_subexpr);

    var source_type = subexpr.type;
    var target_type = expr.type;

    // special case
    if (source_type.kind == Type_Never) {
        var unreachable_expr = hir_mk_unreachable_expr(&expr.pos, target_type);
        return hir_mk_seq_expr(subexpr, unreachable_expr);
    }

    if (target_type.kind == Type_Bool) {
        var zero = hir_mk_int_expr(0, source_type, &expr.pos);
        return hir_mk_binary_op_expr(HirOp_Ne, subexpr, zero, target_type);
    }

    return hir_mk_cast_expr(subexpr, target_type);
}

// Evaluate and discard the initializers
func lower_record_expr(ctx: *Context, expr: *RecordExpr): *HirExpr {
    var sequence = mk_skip_stmt(&expr.pos);
    var n_initializers = list_len(expr.fields);
    for (var i = 0; i < n_initializers; i += 1) {
        var field: *FieldInitializer = list_get(expr.fields, i);
        var hir_expr = lower_expr(ctx, field.expr);
        sequence = hir_mk_seq_expr(sequence, hir_expr);
    }
    return sequence;
}

func lower_expr(ctx: *Context, expr: *Expr): *HirExpr {
    if (expr.kind == Expr_Ident) {
        return lower_ident_expr(ctx, expr as *IdentExpr);
    } else if (expr.kind == Expr_Literal) {
        return lower_literal_expr(ctx, expr as *LiteralExpr);
    } else if (expr.kind == Expr_Array) {
        return lower_array_expr(ctx, expr as *ArrayExpr);
    } else if (expr.kind == Expr_Call) {
        return lower_call_expr(ctx, expr as *CallExpr, dest: null);
    } else if (expr.kind == Expr_Index) {
        return lower_index_expr(ctx, expr as *IndexExpr);
    } else if (expr.kind == Expr_Member) {
        return lower_member_expr(ctx, expr as *MemberExpr);
    } else if (expr.kind == Expr_Sizeof) {
        return lower_sizeof_expr(ctx, expr as *SizeofExpr);
    } else if (expr.kind == Expr_Unary) {
        return lower_unary_expr(ctx, expr as *UnaryExpr);
    } else if (expr.kind == Expr_Binary) {
        return lower_binary_expr(ctx, expr as *BinaryExpr);
    } else if (expr.kind == Expr_Ternary) {
        return lower_ternary_expr(ctx, expr as *TernaryExpr);
    } else if (expr.kind == Expr_Cast) {
        return lower_cast_expr(ctx, expr as *CastExpr);
    } else if (expr.kind == Expr_Record) {
        return lower_record_expr(ctx, expr as *RecordExpr);
    } else {
        unreachable("lower_expr");
    }
}

func lower_assign_expr_record(ctx: *Context, dst: *HirExpr, ast_src: *RecordExpr, pos: *Pos): *HirExpr {
    /*
        Desugar
            x = Pair { value: 1, y: List { value: 2, next: null } }
        to
            temp t1: *Pair;
            t1 = &x;
            (*t1).value = 1;
            let t2: *List = &t1.next;
            (*t2).value = 2;
            (*t2).next = null
    */

    assert(ast_src.type.kind == Type_Record, "lower_record_expr: expr should have a record type");
    var record_type = ast_src.type as *RecordType;

    var n_fields = list_len(record_type.sym.fields);

    var initializers = ast_src.fields;
    var n_initializers = list_len(initializers);

    var is_initialized: *Bool = calloc(n_fields, sizeof(Bool));

    var addr_dst = hir_mk_addr_expr(dst, &dst.pos);

    var temp_var = mk_temp_var(ctx, addr_dst.type);
    var temp = hir_mk_temp_expr(temp_var, pos);
    var temp_init = hir_mk_assign_expr(temp, addr_dst);

    var body: *HirExpr = temp_init;
    for (var init_index = 0; init_index < n_initializers; init_index += 1) {
        var initializer: *FieldInitializer = list_get(initializers, init_index);
        var field_index = find_record_field_by_name(record_type.sym, initializer.name);
        var field: *RecordField = list_get(record_type.sym.fields, field_index);

        var temp_deref = hir_mk_deref_expr(temp, pos);
        var field_access = hir_mk_member_expr(temp_deref, field.name, field_index, field.type);
        var assignment = lower_assign_expr(ctx, field_access, initializer.expr, &initializer.expr.pos);
        body = hir_mk_seq_expr(body, assignment);
    }

    for (var field_index = 0; field_index < n_fields; field_index += 1) {
        if (is_initialized[field_index]) {
            continue;
        }
        var field: *RecordField = list_get(record_type.sym.fields, field_index);
        if (!field.default_value) {
            continue;
        }

        var temp_deref = hir_mk_deref_expr(temp, pos);
        var field_access = hir_mk_member_expr(temp_deref, field.name, field_index, field.type);
        var default_value = lower_const_value(field.default_value, pos);
        var assignment = hir_mk_assign_expr(field_access, default_value);
        body = hir_mk_seq_expr(body, assignment);
    }

    return body;
}

func lower_assign_expr_array(ctx: *Context, dst: *HirExpr, ast_src: *ArrayExpr, pos: *Pos): *HirExpr {
    /*
        Desugar
            x = [a, b, c]
        to
            temp t1: *T;
            t1 = &x[0];
            t1[0] = a;
            t1[1] = b;
            t1[2] = c
    */

    var arr_type = dst.type as *ArrType;
    var elem_type = arr_type.elem;
    var arr_size = arr_type.size;

    var elems = ast_src.elems;
    var n_elems = list_len(elems);

    assert(n_elems == arr_size, "lower_assign_expr_array: all elements must be initialized");

    var zero = hir_mk_int_expr(0, mk_int_type(4), pos);
    var zero_index = hir_mk_index_expr(dst, zero);
    var addr_zero_index = hir_mk_addr_expr(zero_index, pos);

    var temp_var = mk_temp_var(ctx, addr_zero_index.type);
    var temp = hir_mk_temp_expr(temp_var, pos);
    var temp_init = hir_mk_assign_expr(temp, addr_zero_index);

    var body: *HirExpr = temp_init;
    for (var i = 0; i < arr_size; i += 1) {
        var ast_elem: *Expr = list_get(elems, i);
        var index = hir_mk_int_expr(i, mk_int_type(4), pos);
        var index_expr = hir_mk_index_expr(temp, index);
        var assignment = lower_assign_expr(ctx, index_expr, ast_elem, &ast_elem.pos);
        body = hir_mk_seq_expr(body, assignment);
    }

    return body;
}

func lower_assign_expr(ctx: *Context, dst: *HirExpr, ast_src: *Expr, pos: *Pos): *HirExpr {
    if (ast_src.kind == Expr_Record) {
        return lower_assign_expr_record(ctx, dst, ast_src as *RecordExpr, pos);
    } else if (ast_src.kind == Expr_Array) {
        return lower_assign_expr_array(ctx, dst, ast_src as *ArrayExpr, pos);
    } else if (ast_src.kind == Expr_Call) {
        return lower_call_expr(ctx, ast_src as *CallExpr, dest: dst);
    } else {
        var src = lower_expr(ctx, ast_src);
        return hir_mk_assign_expr(dst, src);
    }
}

//==============================================================================
//== Statements

func lower_stmt(ctx: *Context, stmt: *Stmt): *HirExpr;

func lower_block_stmt(ctx: *Context, stmt: *BlockStmt): *HirExpr {
    var current = mk_skip_stmt(&stmt.pos);

    for (var i = 0; i < list_len(stmt.stmts); i += 1) {
        var ast_stmt = list_get(stmt.stmts, i);
        var hir_stmt = lower_stmt(ctx, ast_stmt);

        current = hir_mk_seq_expr(current, hir_stmt);
    }

    return current;
}

func lower_local_stmt(ctx: *Context, stmt: *LocalStmt): *HirExpr {
    var sym = stmt.sym;
    var type = sym.type;
    var ast_init = stmt.init;

    if (!ast_init) {
        return mk_skip_stmt(&stmt.pos);
    }

    var var_expr = hir_mk_var_expr(sym, type, &stmt.pos);
    return lower_assign_expr(ctx, var_expr, ast_init, &ast_init.pos);
}

func lower_if_stmt(ctx: *Context, stmt: *IfStmt): *HirExpr {
    var ast_cond = stmt.cond;
    var ast_then_block = stmt.then_stmt;
    var ast_else_block = stmt.else_stmt;

    var cond = lower_expr(ctx, ast_cond);
    var then_block = lower_stmt(ctx, ast_then_block);
    var else_block = ast_else_block
        ? lower_stmt(ctx, ast_else_block)
        : mk_skip_stmt(&stmt.pos);

    return hir_mk_cond_expr(cond, then_block, else_block, &stmt.pos);
}

func lower_match_stmt(ctx: *Context, stmt: *MatchStmt): *HirExpr {
    /*
        Desugar
            match (x) {
                case 1: { ... }
                case 2: { ... }
                case _: { ... }
            }
        to
            temp t1: typeof(x);
            t1 = x;
            if (t1 is 1) {
                ...
            } else if (t1 is 2) {
                ...
            } else if (1) {
                ...
            }
    */
    var ast_scrutinee = stmt.scrutinee;
    var ast_cases = stmt.cases;

    var temp_var = mk_temp_var(ctx, ast_scrutinee.type);
    var temp = hir_mk_temp_expr(temp_var, &stmt.pos);
    var temp_init = lower_assign_expr(ctx, temp, ast_scrutinee, &ast_scrutinee.pos);

    var acc = mk_skip_stmt(&stmt.pos);
    for (var i = list_len(ast_cases) - 1; i >= 0; i -= 1) {
        var ast_case: *MatchCase = list_get(ast_cases, i);
        var ast_pattern = ast_case.pattern;
        var ast_body = ast_case.body;

        var temp = hir_mk_temp_expr(temp_var, &ast_pattern.pos);
        var cond = lower_pattern(ctx, temp, ast_pattern);
        var body = lower_stmt(ctx, ast_body);

        acc = hir_mk_cond_expr(cond, body, acc, &stmt.pos);
    }

    return hir_mk_seq_expr(temp_init, acc);
}

func lower_while_stmt(ctx: *Context, stmt: *WhileStmt): *HirExpr {
    var ast_cond = stmt.cond;
    var ast_body = stmt.body;

    var cond = lower_expr(ctx, ast_cond);
    var body = lower_stmt(ctx, ast_body);
    var step = mk_skip_stmt(&stmt.pos);

    return hir_mk_loop_expr(cond, body, step, &stmt.pos);
}

func lower_for_stmt(ctx: *Context, stmt: *ForStmt): *HirExpr {
    var ast_init = stmt.init;
    var ast_cond = stmt.cond;
    var ast_step = stmt.step;
    var ast_body = stmt.body;

    var init = ast_init ? lower_stmt(ctx, ast_init) : mk_skip_stmt(&stmt.pos);
    var cond = ast_cond ? lower_expr(ctx, ast_cond) : hir_mk_int_expr(1, mk_int_type(4), &stmt.pos);
    var step = ast_step ? lower_expr(ctx, ast_step) : mk_skip_stmt(&stmt.pos);
    var body = lower_stmt(ctx, ast_body);

    return hir_mk_seq_expr(init, hir_mk_loop_expr(cond, body, step, &stmt.pos));
}

func lower_return_stmt(ctx: *Context, stmt: *ReturnStmt): *HirExpr {
    var ast_expr = stmt.expr;

    // All non-scalar rvalued expressions are converted to lvalues here
    // to make code generation easier.
    if (!ast_expr) {
        return hir_mk_return_expr(null, &stmt.pos);
    } else if (is_scalar(ast_expr.type) || is_lvalue(ast_expr)) {
        var expr = lower_expr(ctx, ast_expr);
        return hir_mk_return_expr(expr, &stmt.pos);
    } else {
        /*
            Desugar
                return f()
            to
                temp t1: typeof(f());
                t1 = f();
                return t1
        */
        var temp_var = mk_temp_var(ctx, ast_expr.type);
        var temp = hir_mk_temp_expr(temp_var, &stmt.pos);
        var temp_init = lower_assign_expr(ctx, temp, ast_expr, &ast_expr.pos);
        return hir_mk_seq_expr(temp_init, hir_mk_return_expr(temp, &stmt.pos));
    }
}

func lower_break_stmt(ctx: *Context, stmt: *Stmt): *HirExpr {
    return hir_mk_jump_expr(true, &stmt.pos);
}

func lower_continue_stmt(ctx: *Context, stmt: *Stmt): *HirExpr {
    return hir_mk_jump_expr(false, &stmt.pos);
}

func lower_expr_stmt(ctx: *Context, stmt: *ExprStmt): *HirExpr {
    var ast_expr = stmt.expr;
    return lower_expr(ctx, ast_expr);
}

func lower_stmt(ctx: *Context, stmt: *Stmt): *HirExpr {
    if (stmt.kind == Stmt_Block) {
        return lower_block_stmt(ctx, stmt as *BlockStmt);
    } else if (stmt.kind == Stmt_Const) {
        // Nothing to do for const statements
        return mk_skip_stmt(&stmt.pos);
    } else if (stmt.kind == Stmt_Local) {
        return lower_local_stmt(ctx, stmt as *LocalStmt);
    } else if (stmt.kind == Stmt_If) {
        return lower_if_stmt(ctx, stmt as *IfStmt);
    } else if (stmt.kind == Stmt_Match) {
        return lower_match_stmt(ctx, stmt as *MatchStmt);
    } else if (stmt.kind == Stmt_While) {
        return lower_while_stmt(ctx, stmt as *WhileStmt);
    } else if (stmt.kind == Stmt_For) {
        return lower_for_stmt(ctx, stmt as *ForStmt);
    } else if (stmt.kind == Stmt_Return) {
        return lower_return_stmt(ctx, stmt as *ReturnStmt);
    } else if (stmt.kind == Stmt_Break) {
        return lower_break_stmt(ctx, stmt);
    } else if (stmt.kind == Stmt_Continue) {
        return lower_continue_stmt(ctx, stmt);
    } else if (stmt.kind == Stmt_Expr) {
        return lower_expr_stmt(ctx, stmt as *ExprStmt);
    } else {
        unreachable("lower_stmt");
    }
}

//==============================================================================
//== Top-level declarations

func hir_lower(func_: *FuncSym, body: *Stmt): *HirExpr {
    var ctx: *Context = calloc(1, sizeof(Context));
    ctx.func_ = func_;

    return lower_stmt(ctx, body);
}
