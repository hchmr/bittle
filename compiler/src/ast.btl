include "bittle.btls";

func is_lvalue(expr: *Expr): Bool {
    return expr.kind == Expr_Ident && (expr as *IdentExpr).sym.kind is (Sym_Local | Sym_Global)
        || expr.kind == Expr_Index
        || expr.kind == Expr_Member
        || expr.kind == Expr_Unary && (expr as *UnaryExpr).op == Tok_Star;
}

func is_mutable_lvalue(expr: *Expr): Bool {
    match (expr.kind) {
        case Expr_Ident: {
            var expr = expr as *IdentExpr;
            return expr.sym.kind is (Sym_Local | Sym_Global);
        }
        case Expr_Member: {
            var expr = expr as *MemberExpr;
            if (expr.left.type.kind == Type_Ptr) {
                return (expr.left.type as *PtrType).is_mut;
            }
            return is_mutable_lvalue(expr.left);
        }
        case Expr_Index: {
            var expr = expr as *IndexExpr;
            var indexee = expr.indexee;
            if (indexee.type.kind == Type_Ptr) {
                return (indexee.type as *PtrType).is_mut;
            }
            return is_mutable_lvalue(indexee);
        }
        case Expr_Unary if (expr as *UnaryExpr).op == Tok_Star: {
            var expr = expr as *UnaryExpr;
            return expr.right.type.kind == Type_Ptr && (expr.right.type as *PtrType).is_mut;
        }
        case _: {
            return false;
        }
    }
}
