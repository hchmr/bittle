include "libc.cogs";

//==============================================================================
//== misc.cog

struct Pos {
    file: *Char,
    row: Int32,
    col: Int32,
}

struct List {
    elems: *(*Void),
    len: Int,
    cap: Int,
}

struct StringBuilder {
    buf: *Char,
    len: Int,
    cap: Int,
}

func assert(cond: Bool, because: *Char);
func unreachable(function: *Char): !;

func error_at(pos: *Pos);
func die(msg: *Char): !;
func die_at(pos: *Pos, msg: *Char): !;

func sb_new(): *StringBuilder;
func sb_len(self: *StringBuilder): Int;
func sb_get(self: *StringBuilder): *Char;
func sb_ensure_cap(self: *StringBuilder, cap: Int);
func sb_push(self: *StringBuilder, c: Char);
func sb_append(self: *StringBuilder, s: *Char);
func sb_finish(self: *StringBuilder): *Char;

func list_new(): *List;
func list_len(self: *List): Int;
func list_get(self: *List, i: Int): *Void;
func list_set(self: *List, i: Int, elem: *Void);
func list_push(self: *List, elem: *Void);

func str_eq(a: *Char, b: *Char): Bool;

func align_up(size: Int , align: Int): Int;
func ilog2(n: Int): Int;

func read_file(file: *File): *Char;
func get_directory(path: *Char): *Char;
func join_paths(dir: *Char, file: *Char): *Char;

func parse_char(c: *Char): Char;
func parse_string(s: *Char): *Char;

//==============================================================================
//== type.cog

const MAX_PARAMS = 8;

struct Sym;

enum {
    Type_Void,
    Type_Bool,
    Type_Int,
    Type_Ptr,
    Type_Arr,
    Type_Struct,
    Type_Never,
}

struct Type;

struct IntType {
    size: Int,
}

struct PtrType {
    pointee: *Type,
}

struct ArrType {
    elem: *Type,
    size: Int,
}

struct StructType {
    sym: *Sym,
}

struct Type {
    kind: Int32,
    as_int: IntType,
    as_ptr: PtrType,
    as_arr: ArrType,
    as_struct: StructType,
}

func mk_type(kind: Int32): *Type;
func mk_void_type(): *Type;
func mk_never_type(): *Type;
func mk_bool_type(): *Type;
func mk_int_type(size: Int): *Type;
func mk_ptr_type(pointee: *Type): *Type;
func mk_array_type(elem: *Type, size: Int): *Type;
func mk_struct_type(sym: *Sym): *Type;

func type_eq(t1: *Type, t2: *Type): Bool;
func type_le(t1: *Type, t2: *Type): Bool;
func type_size(type: *Type): Int;
func type_align(type: *Type): Int;
func is_scalar(type: *Type): Bool;
func is_sized(type: *Type): Bool;

func pretty_type(file: *File, type: *Type): Void;

//==============================================================================
//== sym.cog

struct Sym;

enum {
    Sym_Struct,
    Sym_Global,
    Sym_Const,
    Sym_Func,
    Sym_Local,
}

struct StructField {
    name: *Char,
    type: *Type,
}

struct StructSym {
    name: *Char,
    fields: *List, // List<StructField>
    unpadded_size: Int,
    is_defined: Bool,
}

struct GlobalSym {
    type: *Type,
    is_defined: Bool,
}

struct ConstSym {
    value: Int32,
}

struct FuncParam {
    name: *Char,
    type: *Type,
}

struct FuncSym {
    params: *List, // List<FuncParam>
    return_type: *Type,
    is_variadic: Bool,
    is_defined: Bool,
}

struct LocalSym {
    type: *Type,
}

struct Sym {
    kind: Int32,
    name: *Char,
    as_struct: StructSym,
    as_global: GlobalSym,
    as_const: ConstSym,
    as_func: FuncSym,
    as_local: LocalSym,
}

//==============================================================================
//== tok.cog

// NOTE: When updating this declaration, remember to also update `pretty_tok_kind` and `lookup_keyword`.
enum {
    Tok_Eof = 1,
    // Identifier
    Tok_Ident,
    // Literals
    Tok_Int,
    Tok_String,
    Tok_Char,
    // Keywords
    Tok_As,
    Tok_Break,
    Tok_Const,
    Tok_Continue,
    Tok_Else,
    Tok_Enum,
    Tok_Extern,
    Tok_False,
    Tok_Func,
    Tok_If,
    Tok_Include,
    Tok_Null,
    Tok_Return,
    Tok_Sizeof,
    Tok_Struct,
    Tok_True,
    Tok_Var,
    Tok_While,
    // Symbols
    Tok_LParen,
    Tok_RParen,
    Tok_LBrace,
    Tok_RBrace,
    Tok_LBracket,
    Tok_RBracket,
    Tok_Comma,
    Tok_Semicolon,
    Tok_Dot,
    Tok_DotDot,
    Tok_DotDotDot,
    Tok_Colon,
    Tok_ColonColon,
    Tok_Arrow,
    Tok_Plus,
    Tok_PlusEq,
    Tok_Minus,
    Tok_MinusEq,
    Tok_Star,
    Tok_StarEq,
    Tok_Slash,
    Tok_SlashEq,
    Tok_Percent,
    Tok_PercentEq,
    Tok_Amp,
    Tok_AmpEq,
    Tok_AmpAmp,
    Tok_Bar,
    Tok_BarEq,
    Tok_BarBar,
    Tok_Caret,
    Tok_CaretEq,
    Tok_Bang,
    Tok_Tilde,
    Tok_Question,
    Tok_Lt,
    Tok_LtLtEq,
    Tok_LtLt,
    Tok_LtEq,
    Tok_Gt,
    Tok_GtEq,
    Tok_GtGt,
    Tok_GtGtEq,
    Tok_Eq,
    Tok_EqEq,
    Tok_BangEq,
}

struct Tok {
    kind: Int32,
    pos: Pos,
    lexeme: *Char,
}

func pretty_tok_kind(kind: Int32): *Char;

//==============================================================================
//== ast.cog

struct Expr;

// Type

struct TypeExpr;

enum {
    TypeExpr_Named,
    TypeExpr_Ptr,
    TypeExpr_Arr,
    TypeExpr_Never,
}

struct PtrTypeExpr {
    pointee: *TypeExpr,
}

struct ArrTypeExpr {
    elem: *TypeExpr,
    size: *Expr,
}

struct TypeExpr {
    kind: Int32,
    pos: Pos,
    as_named: *Char,
    as_ptr: PtrTypeExpr,
    as_array: ArrTypeExpr,
}

// Literal

struct Literal;

enum {
    Literal_Null,
    Literal_Bool,
    Literal_Int,
    Literal_Char,
    Literal_String,
}

struct Literal {
    kind: Int32,
    as_bool: Bool,
    as_int: Int,
    as_char: Char,
    as_string: *Char,
}

// Expr

enum {
    Expr_Ident,
    Expr_Literal,
    Expr_Call,
    Expr_Index,
    Expr_Member,
    Expr_Sizeof,
    Expr_Unary,
    Expr_Binary,
    Expr_Ternary,
    Expr_Cast,
}

struct IdentExpr {
    name: *Char,
}

struct CallExpr {
    callee: *Expr,
    args: *List, // List<Expr>
}

struct IndexExpr {
    indexee: *Expr,
    index: *Expr,
}

struct MemberExpr {
    left: *Expr,
    name: *Char,
}

struct SizeofExpr {
    type: *TypeExpr,
}

struct UnaryExpr {
    op: Int32,
    right: *Expr,
}

struct BinaryExpr {
    op: Int32,
    left: *Expr,
    right: *Expr,
}

struct TernaryExpr {
    cond: *Expr,
    then_expr: *Expr,
    else_expr: *Expr,
}

struct CastExpr {
    expr: *Expr,
    type: *TypeExpr,
}

struct Expr {
    kind: Int32,
    pos: Pos,
    type: *Type,
    as_ident: IdentExpr,
    as_literal: *Literal,
    as_call: CallExpr,
    as_index: IndexExpr,
    as_member: MemberExpr,
    as_sizeof: SizeofExpr,
    as_unary: UnaryExpr,
    as_binary: BinaryExpr,
    as_ternary: TernaryExpr,
    as_cast: CastExpr,
}

// Stmt

struct Stmt;

enum {
    Stmt_Block,
    Stmt_Local,
    Stmt_If,
    Stmt_While,
    Stmt_Return,
    Stmt_Break,
    Stmt_Continue,
    Stmt_Expr,
}

struct BlockStmt {
    stmts: *List, // List<Stmt>
}

struct LocalStmt {
    name: *Char,
    type: *TypeExpr,
    init: *Expr,
}

struct IfStmt {
    cond: *Expr,
    then_stmt: *Stmt,
    else_stmt: *Stmt,
}

struct WhileStmt {
    cond: *Expr,
    body: *Stmt,
}

struct ReturnStmt {
    expr: *Expr,
}

struct ExprStmt {
    expr: *Expr,
}

struct Stmt {
    kind: Int32,
    pos: Pos,
    as_block: BlockStmt,
    as_local: LocalStmt,
    as_if: IfStmt,
    as_while: WhileStmt,
    as_return: ReturnStmt,
    as_expr: ExprStmt,
}

// Decl

enum {
    Decl_Struct,
    Decl_Func,
    Decl_Enum,
    Decl_Const,
    Decl_Global,
}

struct StructFieldDecl {
    pos: Pos,
    name: *Char,
    type: *TypeExpr,
}

struct StructDecl {
    name: *Char,
    fields: *List, // List<StructFieldDecl>
}

struct FuncParamDecl {
    pos: Pos,
    name: *Char,
    type: *TypeExpr,
}

struct FuncDecl {
    is_extern: Bool,
    name: *Char,
    params: *List, // List<FuncParam>
    is_variadic: Bool,
    return_type: *TypeExpr,
    body: *Stmt,
}

struct EnumMember {
    pos: Pos,
    name: *Char,
    value: *Expr,
}

struct EnumDecl {
    members: *List, // List<EnumMember>
}

struct ConstDecl {
    name: *Char,
    value: *Expr,
}

struct GlobalDecl {
    is_extern: Bool,
    name: *Char,
    type: *TypeExpr,
}

struct Decl {
    kind: Int32,
    pos: Pos,
    as_struct: StructDecl,
    as_func: FuncDecl,
    as_enum: EnumDecl,
    as_const: ConstDecl,
    as_global: GlobalDecl,
}

struct Ast {
    decls: *List, // List<Decl>
}

func mk_type_expr(pos: *Pos, kind: Int32): *TypeExpr;
func mk_literal(kind: Int32): *Literal;
func mk_expr(pos: *Pos, kind: Int32): *Expr;
func mk_stmt(pos: *Pos, kind: Int32): *Stmt;
func mk_decl(pos: *Pos, kind: Int32): *Decl;
func is_lvalue(expr: *Expr): Bool;

//==============================================================================
//== lexer.cog

struct Lexer;

func lexer_new(file_name: *Char, input: *Char): *Lexer;
func lexer_next(self: *Lexer, out: *Tok);

//==============================================================================
//== parser.cog

struct Parser;

func parser_new(lexer: *Lexer): *Parser;
func parser_run(self: *Parser): *Ast;

//==============================================================================
//== elab.cog

func elab(ast: *Ast);
