include "cog.cogs";

//==============================================================================

func parse(file_name: *Char, input_file: *File): *Ast {
    var text = read_file(input_file);
    var lexer = lexer_new(file_name, text);
    var parser = parser_new(lexer);
    return parser_run(parser);
}

//==============================================================================
//== main

struct Args {
    file_name: *Char,
}

func help(progname: *Char, status: Int32) {
    printf("Usage: %s [options] file\n", progname);
    printf("Options:\n");
    printf("  --help, -h  Show this help message\n");
    exit(status);
}

func arg_parse(argc: Int32, argv: **Char, args: *Args) {
    for (var i = 1; i < argc; i += 1) {
        if (str_eq(argv[i], "--help") || str_eq(argv[i], "-h")) {
            help(argv[0], 0);
        } else if (i == 1) {
            args.file_name = argv[i];
        } else {
            printf("Unknown argument: %s\n", argv[i]);
            help(argv[0], 1);
        }
    }
}

func main(argc: Int32, argv: **Char): Int32 {
    var args: Args;
    arg_parse(argc, argv, &args);

    var file_name: *Char;
    var input_file: *File;
    if (!args.file_name) {
        file_name = "<stdin>";
        input_file = stdin;
    } else {
        file_name = args.file_name;
        input_file = fopen(args.file_name, "r");
        if (!input_file) {
            perror("fopen");
            return 1;
        }
    }

    var ast = parse(file_name, input_file);
    var syms = elab(ast);
    emit_program(syms);
    return 0;
}
