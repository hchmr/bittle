include "libc.btls";

//==============================================================================
//== misc.btl

struct Pos {
    file: *Char,
    row: Int32,
    col: Int32,
}

struct StringBuffer;

struct List;

func assert(cond: Bool, because: *Char);
func unreachable(function: *Char): !;

func error_at(pos: *Pos);
func die(msg: *Char): !;
func die_at(pos: *Pos, msg: *Char): !;

func sb_new(): *StringBuffer;
func sb_free(self: *StringBuffer);
func sb_len(self: *StringBuffer): Int;
func sb_get(self: *StringBuffer, i: Int): Char;
func sb_cstr(self: *StringBuffer): *Char;
func sb_ensure_cap(self: *StringBuffer, cap: Int);
func sb_shrink_to_fit(self: *StringBuffer);
func sb_push(self: *StringBuffer, c: Char);
func sb_append(self: *StringBuffer, s: *Char);
func sb_finish(self: *StringBuffer): *Char;

func list_new(): *List;
func list_new_with_cap(cap: Int): *List;
func list_len(self: *List): Int;
func list_get(self: *List, i: Int): *Void;
func list_set(self: *List, i: Int, elem: *Void);
func list_push(self: *List, elem: *Void);
func list_pop(self: *List): *Void;

func str_eq(a: *Char, b: *Char): Bool;

func align_up(size: Int , align: Int): Int;
func ilog2(n: Int): Int;
func iabs(n: Int): Int;
func int_min(a: Int, b: Int): Int;
func int_max(a: Int, b: Int): Int;

func read_file(file: *File): *Char;
func get_directory(path: *Char): *Char;
func join_paths(dir: *Char, file: *Char): *Char;

func is_whitespace(c: Int32): Bool;
func is_digit(c: Int32, base: Int): Bool;
func is_word_start(c: Int32): Bool;
func is_word_part(c: Int32): Bool;
func is_print(c: Int32): Bool;

func parse_char(c: *Char): Char;
func parse_string(s: *Char): *StringBuffer;

//==============================================================================
//== type.btl

struct Sym;
struct StructSym;
struct EnumSym;

enum TypeKind {
    Type_Void,
    Type_Bool,
    Type_Int,
    Type_Ptr,
    Type_Arr,
    Type_Enum,
    Type_Struct,
    Type_Never,
    Type_RestParam,
}

struct Type {
    kind: TypeKind,
}

struct VoidType: Type {
}

struct BoolType: Type {
}

struct IntType: Type {
    size: Int,
}

struct PtrType: Type {
    pointee: *Type,
}

struct ArrType: Type {
    elem: *Type,
    size: Int,
}

struct EnumType: Type {
    sym: *EnumSym,
}

struct StructType: Type {
    sym: *StructSym,
}

struct NeverType: Type {
}

func mk_type(kind: Int32): *Type;
func mk_void_type(): *VoidType;
func mk_never_type(): *NeverType;
func mk_bool_type(): *BoolType;
func mk_int_type(size: Int): *IntType;
func mk_ptr_type(pointee: *Type): *PtrType;
func mk_array_type(elem: *Type, size: Int): *ArrType;
func mk_enum_type(sym: *EnumSym): *EnumType;
func mk_struct_type(sym: *StructSym): *StructType;
func mk_rest_param_type(): *Type;

func type_eq(t1: *Type, t2: *Type): Bool;
func type_implicitly_convertible(src: *Type, dst: *Type): Bool;
func type_convertible(src: *Type, dst: *Type): Bool;
func type_size(type: *Type): Int;
func type_align(type: *Type): Int;
func is_scalar(type: *Type): Bool;
func is_composite(type: *Type): Bool;
func is_pass_by_ptr(type: *Type): Bool;
func is_sized(type: *Type): Bool;

func pretty_type(file: *File, type: *Type): Void;

//==============================================================================
//== sym.btl

struct Sym;
struct Stmt;

enum SymKind {
    Sym_Enum,
    Sym_Struct,
    Sym_Global,
    Sym_Const,
    Sym_Func,
    Sym_Local,
}

struct Sym {
    kind: SymKind,
    name: *Char,
}

struct StructField {
    name: *Char,
    type: *Type,
    offset: Int,
}

struct EnumSym: Sym {
    size: Int,
}

struct StructSym: Sym {
    base: *StructSym,
    fields: *List, // List<StructField>
    unpadded_size: Int,
    align: Int,
    is_defined: Bool,
}

struct GlobalSym: Sym {
    type: *Type,
    is_defined: Bool,
}

struct ConstSym: Sym {
    type: *Type,
    value: Int32,
}

struct FuncParam {
    name: *Char,
    type: *Type,
}

struct FuncSym: Sym {
    params: *List, // List<FuncParam>
    return_type: *Type,
    is_variadic: Bool,
    rest_param_name: *Char,
    is_defined: Bool,
    locals: *List, // List<Sym>
    temps: *List, // List<HirTemp>
    body: *Stmt,
}

struct LocalSym: Sym {
    type: *Type,
    slot_id: Int,
    is_indirect: Bool,
}

func sym_is_defined(sym: *Sym): Bool;
func find_struct_field(sym: *Sym, name: *Char): Int;

//==============================================================================
//== tok.btl

// NOTE: When updating this declaration, remember to also update `pretty_tok_kind` and `lookup_keyword`.
enum TokKind {
    Tok_Eof = 1,
    // Identifier
    Tok_Ident,
    // Literals
    Tok_Int,
    Tok_String,
    Tok_Char,
    // Keywords
    Tok_As,
    Tok_Break,
    Tok_Const,
    Tok_Continue,
    Tok_Else,
    Tok_Enum,
    Tok_Extern,
    Tok_False,
    Tok_For,
    Tok_Func,
    Tok_If,
    Tok_Include,
    Tok_Null,
    Tok_Return,
    Tok_Sizeof,
    Tok_Struct,
    Tok_True,
    Tok_Var,
    Tok_While,
    // Symbols
    Tok_LParen,
    Tok_RParen,
    Tok_LBrace,
    Tok_RBrace,
    Tok_LBracket,
    Tok_RBracket,
    Tok_Comma,
    Tok_Semicolon,
    Tok_Dot,
    Tok_DotDot,
    Tok_DotDotDot,
    Tok_Colon,
    Tok_ColonColon,
    Tok_Arrow,
    Tok_Plus,
    Tok_PlusEq,
    Tok_Minus,
    Tok_MinusEq,
    Tok_Star,
    Tok_StarEq,
    Tok_Slash,
    Tok_SlashEq,
    Tok_Percent,
    Tok_PercentEq,
    Tok_Amp,
    Tok_AmpEq,
    Tok_AmpAmp,
    Tok_Bar,
    Tok_BarEq,
    Tok_BarBar,
    Tok_Caret,
    Tok_CaretEq,
    Tok_Bang,
    Tok_Tilde,
    Tok_Question,
    Tok_Lt,
    Tok_LtLtEq,
    Tok_LtLt,
    Tok_LtEq,
    Tok_Gt,
    Tok_GtEq,
    Tok_GtGt,
    Tok_GtGtEq,
    Tok_Eq,
    Tok_EqEq,
    Tok_BangEq,
}

struct Tok {
    kind: TokKind,
    pos: Pos,
    lexeme: *Char,
}

func pretty_tok_kind(kind: Int32): *Char;

//==============================================================================
//== ast.btl

struct Expr;

// Type

enum TypeExprKind {
    TypeExpr_Named,
    TypeExpr_Ptr,
    TypeExpr_Arr,
    TypeExpr_Never,
    TypeExpr_RestParam,
}

struct TypeExpr;

struct TypeExpr {
    kind: TypeExprKind,
    pos: Pos,
}

struct NamedTypeExpr: TypeExpr {
    name: *Char,
}

struct PtrTypeExpr: TypeExpr {
    pointee: *TypeExpr,
}

struct ArrTypeExpr: TypeExpr {
    elem: *TypeExpr,
    size: *Expr,
}

// Literal

struct Literal;

enum LiteralKind {
    Literal_Null,
    Literal_Bool,
    Literal_Int,
    Literal_Char,
    Literal_String,
}

struct Literal {
    kind: LiteralKind,
}

struct BoolLiteral: Literal {
    value: Bool,
}
struct IntLiteral: Literal {
    value: Int,
}
struct CharLiteral: Literal {
    value: Char,
}
struct StringLiteral: Literal {
    value: *StringBuffer,
}

// Expr

enum ExprKind {
    Expr_Ident,
    Expr_Literal,
    Expr_Array,
    Expr_Call,
    Expr_Index,
    Expr_Member,
    Expr_Sizeof,
    Expr_Unary,
    Expr_Binary,
    Expr_Ternary,
    Expr_Cast,
    Expr_Struct,
}

struct Expr {
    kind: ExprKind,
    pos: Pos,
    type: *Type,
}

struct IdentExpr: Expr {
    name: *Char,
    sym: *Sym,
}

struct LiteralExpr: Expr {
    literal: *Literal,
}

struct ArrayExpr: Expr {
    elems: *List, // List<Expr>
}

struct CallExpr: Expr {
    callee: *Expr,
    args: *List, // List<CallArg>
    resolved_callee: *FuncSym,
}

struct CallArg {
    label: *Char,
    expr: *Expr,
}

struct IndexExpr: Expr {
    indexee: *Expr,
    index: *Expr,
}

struct MemberExpr: Expr {
    left: *Expr,
    name: *Char,
    resolved_field: Int,
}

struct SizeofExpr: Expr {
    type_expr: *TypeExpr,
    size: Int,
}

struct UnaryExpr: Expr {
    op: Int32,
    right: *Expr,
}

struct BinaryExpr: Expr {
    op: Int32,
    left: *Expr,
    right: *Expr,
}

struct TernaryExpr: Expr {
    cond: *Expr,
    then_expr: *Expr,
    else_expr: *Expr,
}

struct CastExpr: Expr {
    expr: *Expr,
    type_expr: *TypeExpr,
}

struct FieldInitializer {
    pos: Pos,
    name: *Char,
    expr: *Expr,
}

struct StructExpr: Expr {
    name: *Char,
    fields: *List, // List<FieldInit>
}

// Stmt

enum StmtKind {
    Stmt_Block,
    Stmt_Local,
    Stmt_If,
    Stmt_While,
    Stmt_For,
    Stmt_Return,
    Stmt_Break,
    Stmt_Continue,
    Stmt_Expr,
}

struct Stmt {
    kind: StmtKind,
    pos: Pos,
}

struct BlockStmt: Stmt {
    stmts: *List, // List<Stmt>
}

struct LocalStmt: Stmt {
    name: *Char,
    type: *TypeExpr,
    init: *Expr,
    sym: *LocalSym,
}

struct IfStmt: Stmt {
    cond: *Expr,
    then_stmt: *Stmt,
    else_stmt: *Stmt,
}

struct WhileStmt: Stmt {
    cond: *Expr,
    body: *Stmt,
}

struct ForStmt: Stmt {
    init: *Stmt,
    cond: *Expr,
    step: *Expr,
    body: *Stmt,
}

struct ReturnStmt: Stmt {
    expr: *Expr,
}

struct ExprStmt: Stmt {
    expr: *Expr,
}

// Decl

enum DeclKind {
    Decl_Struct,
    Decl_Func,
    Decl_Enum,
    Decl_Const,
    Decl_Global,
}

struct Decl {
    kind: DeclKind,
    pos: Pos,
}

struct StructFieldDecl {
    pos: Pos,
    name: *Char,
    type: *TypeExpr,
}

struct StructDecl: Decl {
    name: *Char,
    base: *TypeExpr,
    fields: *List, // List<StructFieldDecl>
}

struct FuncParamDecl {
    pos: Pos,
    name: *Char,
    type: *TypeExpr,
}

struct RestParamDecl {
    pos: Pos,
    name: *Char,
}

struct FuncDecl: Decl {
    is_extern: Bool,
    name: *Char,
    params: *List, // List<FuncParam>
    rest_param: *RestParamDecl,
    return_type: *TypeExpr,
    body: *Stmt,
}

struct EnumMember {
    pos: Pos,
    name: *Char,
    value: *Expr,
}

struct EnumDecl: Decl {
    name: *Char,
    members: *List, // List<EnumMember>
}

struct ConstDecl: Decl {
    name: *Char,
    value: *Expr,
}

struct GlobalDecl: Decl {
    is_extern: Bool,
    name: *Char,
    type: *TypeExpr,
}

struct Ast {
    decls: *List, // List<Decl>
}

func is_lvalue(expr: *Expr): Bool;

//==============================================================================
//== hir.btl

struct HirTemp {
    type: *Type,
    slot_id: Int,
}

enum HirOpKind {
    HirOp_Or,
    HirOp_Xor,
    HirOp_And,
    HirOp_Shl,
    HirOp_Shr,
    HirOp_Eq,
    HirOp_Ne,
    HirOp_Lt,
    HirOp_Le,
    HirOp_Gt,
    HirOp_Ge,
    HirOp_Add,
    HirOp_Sub,
    HirOp_Mul,
    HirOp_Div,
    HirOp_Rem,
}

struct HirExpr;

enum HirExprKind {
    // Composition primitives
    HirExpr_Skip,
    HirExpr_Seq,

    // Constants
    HirExpr_Int,
    HirExpr_Str,

    // Variables
    HirExpr_Var,
    HirExpr_Temp,

    // Control flow
    HirExpr_Cond,
    HirExpr_Loop,
    HirExpr_Jump,
    HirExpr_Return,

    // Expressions
    HirExpr_BinaryOp,
    HirExpr_Call,
    HirExpr_Member,
    HirExpr_Index,
    HirExpr_Deref,
    HirExpr_Addr,
    HirExpr_Assign,
    HirExpr_Cast,

    // Special
    HirExpr_Unreachable,
}

struct HirExpr {
    kind: HirExprKind,
    type: *Type,
    pos: Pos,
}

struct HirSeqExpr: HirExpr {
    first: *HirExpr,
    second: *HirExpr,
}

struct HirIntExpr: HirExpr {
    value: Int,
}

struct HirStrExpr: HirExpr {
    value: *StringBuffer,
}

struct HirVarExpr: HirExpr {
    sym: *Sym,
}

struct HirTempExpr: HirExpr {
    temp: *HirTemp,
}

struct HirCondExpr: HirExpr {
    cond: *HirExpr,
    then_expr: *HirExpr,
    else_expr: *HirExpr,
}

struct HirLoopExpr: HirExpr {
    cond: *HirExpr,
    body: *HirExpr,
    step: *HirExpr,
}

struct HirReturnExpr: HirExpr {
    expr: *HirExpr,
}

struct HirJumpExpr: HirExpr {
    is_break: Bool,
}

struct HirAssignExpr: HirExpr {
    dst: *HirExpr,
    src: *HirExpr,
}

struct HirBinaryOpExpr: HirExpr {
    op: Int32,
    left: *HirExpr,
    right: *HirExpr,
}

struct HirCallExpr: HirExpr {
    callee: *FuncSym,
    args: *List, // List<*HirExpr>
}

struct HirMemberExpr: HirExpr {
    left: *HirExpr,
    name: *Char,
    field_index: Int,
}

struct HirIndexExpr: HirExpr {
    indexee: *HirExpr,
    index: *HirExpr,
}

struct HirDerefExpr: HirExpr {
    expr: *HirExpr,
}

struct HirAddrExpr: HirExpr {
    expr: *HirExpr,
}

struct HirCastExpr: HirExpr {
    expr: *HirExpr,
}

func hir_is_lvalue(e: *HirExpr): Bool;
func hir_dump(e: *HirExpr);

//==============================================================================
//== lexer.btl

struct Lexer;

func lexer_new(file_name: *Char, input: *Char): *Lexer;
func lexer_next(self: *Lexer): Tok;

//==============================================================================
//== parser.btl

struct Parser;

func parser_new(lexer: *Lexer): *Parser;
func parser_run(self: *Parser): *Ast;

//==============================================================================
//== elab.btl

func elab(ast: *Ast): *List; // *List<*Sym>

//==============================================================================
//== hir_lower.btl

func hir_lower(func_: *FuncSym, body: *Stmt): *HirExpr;

//==============================================================================
//== call_layout.btl

struct ArgLocation {
    is_reg: Bool,
    is_stack: Bool,
// if is_reg:
    reg: Int,
    n_regs: Int,
// if is_stack:
    offset: Int,
}

struct RetLocation {
    is_reg: Bool,
    is_indirect: Bool,
// if is_reg:
    n_regs: Int,
}

struct CallLayout {
    n_args: Int,
    arg_locs: *ArgLocation,
    ret_loc: RetLocation,
    stack_space: Int,
    next_gpr: Int,
}

func call_layout_drop(self: *CallLayout);
func get_call_layout(n_args: Int, arg_types: **Type, ret_type: *Type): CallLayout;
func get_call_layout_for_call(e: *HirCallExpr): CallLayout;
func get_call_layout_for_func(f: *FuncSym): CallLayout;

//==============================================================================
//== codegen.btl

func emit_program(syms: *List);
