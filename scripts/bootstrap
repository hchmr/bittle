#!/bin/bash

set -e
set -u
set -o pipefail

#
# Helper functions
#

die() {
    printf "\e[31mError:\e[0m %s\n" "$*" >&2
    exit 1
}

section() {
    printf "\n\e[36m==>\e[0m %s\n\n" "$1"
}

toupper() {
    echo "$1" | tr '[:lower:]' '[:upper:]'
}

regex_escape() {
    sed 's/[]\/$*.^|[]/\\&/g' <<<"$1"
}

render_lines() {
    local width="$1" logfile="$2"
    local lots_of_spaces
    lots_of_spaces=$(printf "%${width}s" "")
    tail -n 5 "$logfile" | sed "s/$/$lots_of_spaces/" | cut "-c1-$width"
}

is_running() {
    kill -s 0 "$1" 2>/dev/null
}

monitor_command() {
    if [ ! -t 1 ]; then
        "$@"
        return
    fi

    echo "$*"

    local logfile
    logfile=$(mktemp -t bittle-bootstrap-command.XXXXXX)
    "$@" >"$logfile" 2>&1 &
    local pid
    pid=$!

    local prev_line_count=0
    while is_running "$pid"; do
        local term_width
        term_width=$(tput cols)
        sleep 0.025
        local lines
        lines=$(render_lines "$term_width" "$logfile")
        tput cuu "$prev_line_count"
        printf "\e[90m%s\e[0m\n" "$lines"
        prev_line_count=$(wc -l <<<"$lines")
    done

    tput cuu "$((prev_line_count + 1))"
    tput ed

    if ! wait "$pid"; then
        cat "$logfile"
        return 1
    fi

    rm "$logfile"
}

# Constants
script_dir=$(dirname "$(realpath "$0")")
root_dir=$(realpath "$script_dir/..")
bootstrap_dir="$root_dir/out/bootstrap"
src_dir="$bootstrap_dir/src"
build_dir="$bootstrap_dir/build"
cache_dir="$bootstrap_dir/cache"
head_commit=$(git rev-parse --short HEAD)

# Initial state
compiler_name=cogc
prev_stage=-1
prev_commit=
prev_compiler=

# Default options
cache_enabled=true
clean_first=false
extra_stage=false
create_output_dir=false
output_file=

usage() {
    cat <<HERE
Usage: $0 [options]

Bootstraps the Bittle compiler from Git history.

Options:
  -h, --help           Show this help
  --head               Add the latest commit as a stage
  --clean              Perform a clean build
  --no-cache           Disable stage caching
  -o, --output <file>  Output file
HERE
}

short_usage() {
    cat <<HERE
Usage: $0 [options]

For full usage, run: $0 --help
HERE
}

argparse() {
    while test $# -gt 0; do
        case "$1" in
        -h | --help)
            usage
            exit 0
            ;;
        --head)
            extra_stage=true
            ;;
        --clean)
            clean_first=true
            ;;
        --no-cache)
            cache_enabled=false
            ;;
        -o | --output)
            shift
            output_file="$1"
            ;;
        *)
            echo "Unexpected argument: $1" >&2
            short_usage >&2
            exit 1
            ;;
        esac
        shift
    done

    if [ -n "$output_file" ]; then
        output_file=$(realpath "$output_file")
    else
        output_file="$bootstrap_dir/bin/bittlec"
        create_output_dir=true
    fi
}

setup_repository() {
    section "Cloning repository"

    if [ -d .git ]; then
        echo "Repository already cloned"
        git fetch
        git reset --hard "$head_commit"
    else
        git clone "$root_dir" "$(pwd)"
    fi
}

find_commit() {
    local ref="$1"
    git rev-parse --quiet --short "$ref" ||
        git rev-list --grep "$(regex_escape "$ref")" --max-count=1 --abbrev-commit "$head_commit" | grep .
}

checkout() {
    local commit="$1"
    echo "Checking out $commit \"$(git log --format="%s" -n 1 "$commit")\""
    git checkout --quiet "$commit"
}

print_stage_changes() {
    local commit="$1"

    if [ -z "$prev_commit" ]; then
        return
    fi

    if [ "${prev_commit:0:7}" = "${commit:0:7}" ]; then
        return
    fi

    local commits
    commits=$(git rev-list --oneline --abbrev-commit --ancestry-path "$prev_commit..$commit" ./compiler/)

    local n_commits
    n_commits=$(wc -l <<<"$commits")

    local max_commits=20

    echo Changes from "$n_commits" commits:
    head -n $max_commits <<<"$commits" | sed 's/^/  /'
    if [ $((n_commits > max_commits)) = 1 ]; then
        echo "  ($((n_commits - max_commits)) more)"
    fi
}

compile() {
    local commit="$1" stage_dir="$2" cache_key="$3"

    mkdir -p "$stage_dir"

    local cached_compiler=""
    if [ "$cache_enabled" = true ]; then
        cached_compiler=$(realpath "$cache_dir/$cache_key")
    fi

    if [ -f "$cached_compiler" ]; then
        echo "Using cached executable $cached_compiler"
        cp "$cached_compiler" "$stage_dir/$compiler_name"
        return
    fi

    checkout "$commit"

    echo "Compiling"
    monitor_command make -C compiler "BUILD_DIR=$stage_dir" "$(toupper "$compiler_name")=$prev_compiler"
    echo "Compilation successful"

    if [ "$cache_enabled" = true ]; then
        cp "$stage_dir/$compiler_name" "$cached_compiler"
    fi
}

stage() {
    local ref="$1"

    local commit
    commit=$(find_commit "$ref") || die "Commit not found: $ref"

    local stage=$((prev_stage + 1))

    section "Building stage $stage"

    print_stage_changes "$commit"

    local stage_dir="$build_dir/stage$stage"

    compile "$commit" "$stage_dir" "stage$stage-${prev_commit:=root}-$commit"

    prev_stage="$stage"
    prev_commit="$commit"
    prev_compiler=$(realpath "$stage_dir/$compiler_name")
}

verify() {
    local commit="$prev_commit"

    section "Compiling compiler with itself"

    stage "$commit"

    section "Compiling compiler with compiler compiled with itself"

    compile "$commit" "$build_dir/verify" "verify-$commit-$commit-$commit"

    local curr_compiler="$build_dir/verify/$compiler_name"

    echo "Comparing executables $prev_compiler and $curr_compiler"

    decompile() {
        # The first few lines of objdump output are boilerplate which contains the file name
        objdump -dr -j .text -j .rodata -j .data -j .bss "$1" | tail -n +3
    }

    decompile "$prev_compiler" >"$build_dir/verify/$compiler_name-once.objdump"
    decompile "$curr_compiler" >"$build_dir/verify/$compiler_name-twice.objdump"

    if ! diff "$build_dir/verify/$compiler_name-once.objdump" "$build_dir/verify/$compiler_name-twice.objdump" >/dev/null; then
        die "Difference found"
    else
        echo "No difference found"
    fi
}

finish() {
    section "Copying final executable to $output_file"

    cp "$prev_compiler" "$output_file"

    section "Done"
}

argparse "$@"

rm -rf "$build_dir"
if [ "$clean_first" = true ]; then
    rm -rf "$bootstrap_dir"
fi

mkdir -p "$bootstrap_dir" "$src_dir" "$build_dir"
if [ "$create_output_dir" = true ]; then
    mkdir -p "$(dirname "$output_file")"
fi
if [ "$cache_enabled" = true ]; then
    mkdir -p "$cache_dir"
fi

cd "$src_dir"

setup_repository

stage "Make compilation of bootstrap compiler stricter"

stage "Replace bootstrap compiler with self-host compiler"

stage "feat: Add support for include files"

stage "feat(compiler): Add never type"

stage "Merge branch 'compiler-rewrite'"

stage "feat(compiler): Add for loops"

stage "feat(compiler): Add struct initializer expressions"

stage "feat(compiler): Add struct inheritance"

stage "feat(compiler): Add enum types"

compiler_name=bittlec

stage "chore: Rename the language from Cog to Bittle"

stage "fix(compiler): Allow more than 8 field arguments in struct initializer"

stage "fix(compiler): Fix very bad miscompilation of array indexing"

stage "feat(compiler): Add struct field initialization shorthand"

stage "fix(compiler): Fix miscompilation when taking address of temporary"

if [ "$extra_stage" = true ]; then
    stage "$head_commit"
fi

verify

finish
