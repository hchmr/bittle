#!/bin/bash

set -e
set -u
set -o pipefail

script_dir=$(dirname "$(realpath "$0")")
root_dir=$(realpath "$script_dir/..")
bootstrap_dir="$root_dir/out/bootstrap"
src_dir="$bootstrap_dir/src"
build_dir="$bootstrap_dir/build"
cache_dir="$bootstrap_dir/cache"
latest_commit=$(git rev-parse --short HEAD)

cache_enabled=true

compiler_name=cogc
prev_stage=-1
prev_commit=
prev_compiler=

usage() {
    cat <<HERE
usage: $0 [options]

options:
  -h,--help         Show this help
  --head            Build the latest commit
  --clean           Perform a clean build
  --no-cache        Disable stage caching
  -o,--output FILE  Output file
HERE
}

die() {
    echo "Error: $1" >&2
    exit 1
}

section() {
    echo
    echo "==> $1"
    echo
}

toupper() {
    echo "$1" | tr '[:lower:]' '[:upper:]'
}

regex_escape() {
    sed 's/[]\/$*.^|[]/\\&/g' <<<"$1"
}

render_lines() {
    local width="$1" logfile="$2" spaces
    lines="$(tail -n 5 "$logfile")"
    spaces=$(printf "%${width}s" "")
    sed "s/$/$spaces/" <<<"$lines" | cut "-c1-$width"
}

monitor_command() {
    local logfile pid width

    echo "$*"

    logfile=$(mktemp "$build_dir/log.XXXXXX")
    "$@" >"$logfile" 2>&1 &
    pid=$!

    width=$(tput cols)
    height=0
    while kill -0 "$pid" 2>/dev/null; do
        sleep 0.025
        lines=$(render_lines "$width" "$logfile")
        printf "\033[%dA$lines\n" "$height"
        height=$(wc -l <<<"$lines")
    done

    printf "\033[%dA" "$((height + 1))"
    printf "\033[J"

    if ! wait "$pid"; then
        cat "$logfile"
        return
    fi

    rm "$logfile"
}

setup_repository() {
    section "Cloning repository"

    if [ -d .git ]; then
        echo "Repository already cloned"
        git fetch
        git reset --hard "$latest_commit"
        return
    else
        git clone "$root_dir" "$(pwd)"
    fi
}

find_commit() {
    local ref="$1"
    local commit
    # Check if the argument is a commit hash
    if git rev-parse --quiet --verify "$ref" >/dev/null; then
        commit="$ref"
    else
        pattern=$(regex_escape "$ref")
        commit="$(git rev-list --grep "$pattern" --max-count=1 --abbrev-commit "$latest_commit")"
        if [[ -z "$commit" ]]; then
            return 1
        fi
    fi
    echo "$commit"
}

checkout() {
    local commit="$1"
    echo "Checking out $commit \"$(git log --format="%s" -n 1 "$commit")\""
    git checkout --quiet "$commit"
}

ensure_checked_out() {
    local commit="$1"
    local actual_commit
    actual_commit=$(git rev-parse HEAD)
    if [ "$actual_commit" != "$commit" ]; then
        checkout "$commit"
    fi
}

print_stage_changes() {
    local commit="$1"

    if [ -z "$prev_commit" ]; then
        return
    fi

    if [ "${prev_commit:0:7}" = "${commit:0:7}" ]; then
        return
    fi

    local commits
    commits=$(git rev-list --oneline --abbrev-commit --ancestry-path "$prev_commit..$commit" ./compiler/)

    local n_commits
    n_commits=$(wc -l <<<"$commits")

    echo Changes from "$n_commits" commits:

    local max_commits=20

    head -n $max_commits <<<"$commits" | sed 's/^/  /'
    if [ $((n_commits > max_commits)) = 1 ]; then
        echo "  ($((n_commits - max_commits)) more)"
    fi
}

stage() {
    local ref="$1"

    local commit
    commit=$(find_commit "$ref") || die "Commit not found: $ref"

    local stage=$((prev_stage + 1))

    section "Building stage $stage"

    print_stage_changes "$commit"

    local stage_dir="$build_dir/stage$stage/"
    mkdir -p "$stage_dir"

    local cached_compiler=""
    if [ "$cache_enabled" = true ]; then
        cached_compiler=$(realpath "$cache_dir/stage$stage-${prev_commit:=root}-$commit")
    fi

    if [ -f "$cached_compiler" ]; then
        echo "Found cached executable $cached_compiler"
        cp "$cached_compiler" "$stage_dir/$compiler_name"
    else
        checkout "$commit"

        echo "Compiling"
        monitor_command make -C compiler "BUILD_DIR=$stage_dir" "$(toupper "$compiler_name")=$prev_compiler"
        echo "Compilation successful"

        if [ "$cache_enabled" = true ]; then
            echo "Caching executable $stage_dir/$compiler_name" to "$cached_compiler"
            cp "$stage_dir/$compiler_name" "$cached_compiler"
        fi
    fi

    prev_stage="$stage"
    prev_commit="$commit"
    prev_compiler=$(realpath "$stage_dir/$compiler_name")
}

verify() {
    local commit="$prev_commit"

    section "Compiling compiler with itself"

    stage "$commit"

    section "Compiling compiler with compiler compiled with itself"

    ensure_checked_out "$commit"

    mkdir -p "$build_dir/verify"

    local cached_compiler=
    if [ "$cache_enabled" = true ]; then
        cached_compiler=$(realpath "$cache_dir/verify-$commit-$commit-$commit")
    fi

    if [ -f "$cached_compiler" ]; then
        echo "Found cached executable $cached_compiler"
        cp "$cached_compiler" "$build_dir/verify/bittlec"
    else
        echo "Compiling"
        monitor_command make -C compiler "BUILD_DIR=$build_dir/verify" "BITTLEC=$(realpath "$prev_compiler")"
        if [ "$cache_enabled" = true ]; then
            echo "Caching executable $build_dir/verify/bittlec" to "$cached_compiler"
            cp "$build_dir/verify/bittlec" "$cached_compiler"
        fi
    fi

    echo "Comparing executables $prev_compiler and $build_dir/verify/bittlec"

    objdump -dr -j .rodata -j .text "$prev_compiler" | tail -n +3 >"$build_dir/verify/bittlec.objdump"
    objdump -dr -j .rodata -j .text "$build_dir/verify/bittlec" | tail -n +3 >"$build_dir/verify/bittlec.verify.objdump"

    if ! diff "$build_dir/verify/bittlec.objdump" "$build_dir/verify/bittlec.verify.objdump" >/dev/null; then
        echo "^^^ Difference found"
        return 1
    fi
    echo "Compiler verified"
}

clean_first=false
bootstrap_head=false
output_file=

while test $# -gt 0; do
    case "$1" in
    -h | --help)
        usage
        exit 0
        ;;
    --head)
        bootstrap_head=true
        ;;
    --clean)
        clean_first=true
        ;;
    --no-cache)
        cache_enabled=false
        ;;
    -o | --output)
        shift
        output_file="$1"
        ;;
    *)
        echo "Unexpected argument: $1"
        usage
        exit 1
        ;;
    esac
    shift
done

if [ -z "$output_file" ]; then
    output_file="$bootstrap_dir/bin/bittlec"
fi
if [ "$clean_first" = true ]; then
    rm -rf "$bootstrap_dir"
fi
if [ "$cache_enabled" = true ]; then
    mkdir -p "$cache_dir"
fi
rm -rf "$build_dir"
mkdir -p "$bootstrap_dir" "$src_dir" "$build_dir" "$(dirname "$output_file")"
cd "$src_dir"

output_file=$(realpath "$output_file")

setup_repository

stage "Make compilation of bootstrap compiler stricter"

stage "Replace bootstrap compiler with self-host compiler"

stage "feat: Add support for include files"

stage "feat(compiler): Add never type"

stage "Merge branch 'compiler-rewrite'"

stage "feat(compiler): Add for loops"

stage "feat(compiler): Add struct initializer expressions"

stage "feat(compiler): Add struct inheritance"

stage "feat(compiler): Add enum types"

compiler_name=bittlec

stage "chore: Rename the language from Cog to Bittle"

stage "fix(compiler): Allow more than 8 field arguments in struct initializer"

stage "fix(compiler): Fix very bad miscompilation of array indexing"

stage "feat(compiler): Add struct field initialization shorthand"

stage "fix(compiler): Fix miscompilation when taking address of temporary"

if [ "$bootstrap_head" = true ]; then
    stage "$latest_commit"
fi

verify

section "Copying final executable to $output_file"

cp "$prev_compiler" "$output_file"

section "Done"
