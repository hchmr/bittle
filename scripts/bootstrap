#!/bin/bash

set -e
set -u
set -o pipefail

script_dir=$(dirname "$(realpath "$0")")
root_dir=$(realpath "$script_dir/..")
bootstrap_dir="$root_dir/out/bootstrap"
src_dir="$bootstrap_dir/src"
build_dir="$bootstrap_dir/build"

compiler_name=cogc
prev_stage=-1
prev_stage_ref=
prev_compiler_path=

usage() {
    cat <<HERE
usage: $0 [options]

options:
  -h,--help         Show this help
  --next            Include latest commit from master
  -o,--output FILE  Output file
HERE
}

section() {
    echo
    echo "==> $1"
    echo
}

toupper() {
    echo "$1" | tr '[:lower:]' '[:upper:]'
}

checkout() {
    local commit
    if git rev-parse --quiet --verify "$1" >/dev/null; then
        commit="$1"
    else
        pattern="^$(sed 's/[$\.*[\^]/\\&/g' <<<"$1")$"
        commit="$(git rev-list origin/master --grep "$pattern" --max-count=1)"
        if [[ -z "$commit" ]]; then
            echo "Commit not found: $1"
            exit 1
        fi
    fi

    echo "Checking out \"$(git log --format="%h %s" -n 1 "$commit")\""
    git checkout --quiet "$commit"
}

stage() {
    local stage=$(($prev_stage + 1))

    local ref="$1"

    section "Building stage $stage"

    local stage_dir="$build_dir/stage$stage/"
    mkdir -p "$stage_dir"

    checkout "$ref"

    local compiler_var=$(toupper "$compiler_name")

    make -C compiler "BUILD_DIR=$stage_dir" "$compiler_var=$prev_compiler_path"

    prev_stage="$stage"
    prev_stage_ref="$ref"
    prev_compiler_path=$(realpath "$stage_dir/$compiler_name")
}

verify() {
    section "Compiling compiler with itself"

    stage "$prev_stage_ref"

    section "Compiling compiler with compiler compiled with itself"

    mkdir -p "$build_dir/verify"

    make -C compiler "BUILD_DIR=$build_dir/verify" "BITTLEC=$(realpath "$build_dir/stage$prev_stage/bittlec")"

    echo "Comparing executables $build_dir/stage$prev_stage/bittlec and $build_dir/verify/bittlec"

    objdump -dr -j .rodata -j .text "$build_dir/stage$prev_stage/bittlec" | tail -n +3 >"$build_dir/verify/bittlec.objdump"
    objdump -dr -j .rodata -j .text "$build_dir/verify/bittlec" | tail -n +3 >"$build_dir/verify/bittlec.verify.objdump"
    diff "$build_dir/verify/bittlec.objdump" "$build_dir/verify/bittlec.verify.objdump" && echo "No difference" || echo "^^^ Difference found"
}

bootstrap_next=0
output_file=

while test $# -gt 0; do
    case "$1" in
    -h | --help)
        usage
        exit 0
        ;;
    --next)
        bootstrap_next=1
        ;;
    -o | --output)
        shift
        output_file="$1"
        ;;
    *)
        echo "Unexpected argument: $1"
        usage
        exit 1
        ;;
    esac
    shift
done

rm -rf "$bootstrap_dir"
mkdir -p "$bootstrap_dir" "$src_dir" "$build_dir"
cd "$src_dir"

if [ -z "$output_file" ]; then
    mkdir -p "$bootstrap_dir/bin"
    output_file="$bootstrap_dir/bin/bittlec"
fi
output_file=$(realpath "$output_file")

git clone --quiet "file://$root_dir" .

stage "Make compilation of bootstrap compiler stricter"

stage "Replace bootstrap compiler with self-host compiler"

stage "feat: Add support for include files"

stage "feat(compiler): Add never type"

stage "Merge branch 'compiler-rewrite'"

stage "feat(compiler): Add for loops"

stage "feat(compiler): Add struct initializer expressions"

stage "feat(compiler): Add struct inheritance"

stage "feat(compiler): Add enum types"

compiler_name=bittlec

stage "chore: Rename the language from Cog to Bittle"

stage "fix(compiler): Allow more than 8 field arguments in struct initializer"

stage "fix(compiler): Fix very bad miscompilation of array indexing"

if [ "$bootstrap_next" = "1" ]; then
    stage "master"
fi

verify

section "Copying final executable to $output_file"

cp "$build_dir/stage$prev_stage/$compiler_name" "$output_file"

section "Done"
